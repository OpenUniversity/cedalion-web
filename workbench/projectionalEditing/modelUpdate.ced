'/bootstrap':signature(modelUpdate(Model,Role,TTerm)::'/javascript/asyncproc':asyncProc,[Model::'/javascript/jsLogic':jsExpr,Role::'/bootstrap':string,TTerm::'/bootstrap':typedTerm]).
'/bootstrap':projection(modelUpdate(Model,Role,TTerm)::'/javascript/asyncproc':asyncProc,'/bootstrap':horiz(['/bootstrap':label(!'update model'),'/bootstrap':vis(Model::'/javascript/jsLogic':jsExpr),'/bootstrap':label(!role),'/bootstrap':vis(Role::'/bootstrap':string),'/bootstrap':label(!'with content'),'/bootstrap':vis(TTerm::'/bootstrap':typedTerm)])).
'/javascript/asyncproc':asyncProc(modelUpdate(Model,Role,TTerm),Finally,'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/asyncproc':andThen('/javascript/statepred':'for (s)'(uuid(UUID),'/javascript/jsLogic':jsCommand(['/javascript':var(OldUUID,'/javascript':arrayElement('/javascript/jsLogic':inlineTerm(Model::'/javascript/jsLogic':jsExpr),'/javascript/jsLogic':inlineTerm(Role::'/bootstrap':string))),'/javascript/jsLogic':runProcedure(modelUpdate(Model,Role,UUID,TTerm)),'/javascript':assign('/javascript':arrayElement('/javascript/jsLogic':inlineTerm(Model::'/javascript/jsLogic':jsExpr),'/javascript/jsLogic':inlineTerm(Role::'/bootstrap':string)),'/javascript/jsLogic':inlineTerm(UUID::'/bootstrap':string)),'/javascript/jsLogic':runProcedure(modelUpdated(Model,Role,UUID,'/javascript/jsLogic':jsExpr('/javascript':varExpr(OldUUID))))])),Finally))])):-builtin:true.
'/bootstrap':signature(modelUpdate(Model,Role,UUID,TTerm)::'/javascript/jsLogic':procedure,[Model::'/javascript/jsLogic':jsExpr,Role::'/bootstrap':string,UUID::'/bootstrap':string,TTerm::'/bootstrap':typedTerm]).
'/bootstrap':defAtom(termDescriptor::'/bootstrap':type).
'/bootstrap':signature(termDesc(TTerm,Desc)::'/bootstrap':pred,[TTerm::'/bootstrap':typedTerm,Desc::termDescriptor]).
'/bootstrap':signature(compound(Name,Arity,Type)::termDescriptor,[Name::'/bootstrap':string,Arity::'/bootstrap':number,Type::'/bootstrap':type]).
'/bootstrap':projection(compound(Name,Arity,Type)::termDescriptor,'/bootstrap':horiz(['/bootstrap':vis(Name::'/bootstrap':string),'/bootstrap':label(! (/)),'/bootstrap':vis(Arity::'/bootstrap':number),'/bootstrap':label(! (::)),'/bootstrap':vis(Type::'/bootstrap':type)])).
'/bootstrap':signature(uuidLink(UUID)::termDescriptor,[UUID::'/bootstrap':string]).
termDesc(Term::Type,Desc):-builtin:compound(Term::Type),builtin:if(Term::Type=termWithUUID(UUID)::Type,Desc::termDescriptor=uuidLink(UUID)::termDescriptor, (builtin:parseTerm(Term::Type,Name,Args),'/javascript/jsLogic':length(Args,Arity),Desc::termDescriptor=compound(Name,Arity,Type)::termDescriptor)).
'/bootstrap':signature(number(Num)::termDescriptor,[Num::'/bootstrap':number]).
termDesc(Num::'/bootstrap':number,number(Num)):-builtin:number(Num::'/bootstrap':number).
'/bootstrap':signature(string(Str)::termDescriptor,[Str::'/bootstrap':string]).
termDesc(Str::'/bootstrap':string,string(Str)):-builtin:string(Str::'/bootstrap':string).
'/javascript/jsLogic':procedure(modelUpdate(Model,Role,UUID,Term::Type),'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/jsLogic':foreach((applyDefault(Term::Type,TermPrime::Type),termDesc(TermPrime::Type,Desc)),'/javascript/jsLogic':jsCommand(['/javascript':assign('/javascript':arrayElement('/javascript/jsLogic':inlineTerm(Model::'/javascript/jsLogic':jsExpr),'/javascript/jsLogic':inlineTerm(UUID::'/bootstrap':string)),'/javascript/jsLogic':inlineTerm(Desc::termDescriptor)),'/javascript/jsLogic':runProcedure(newUUID(Model,Role,UUID,Desc)),'/javascript/jsLogic':runProcedure('/javascript/jsLogic':foreach(Desc::termDescriptor=compound(_,_,_)::termDescriptor,'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/jsLogic':foreach(('/cedalionWeb/visualization':propagateDescriptor(uuidDesc(TermPrime,UUID,Role,Model,'/bootstrap':listSet([]))::Type,TProp,_),'/bootstrap':safeParseTerm(TProp,_,Args),'/bootstrap':listMember(uuidDesc(Arg,ChildUUID,ChildRole,_,_)::T,'/bootstrap':typedTerm,Args),'/cedalionWeb/visualization':removeDescriptorsFromType(Arg::T,ChildTerm::ChildType)),'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure(modelUpdate(Model,ChildRole,ChildUUID,ChildTerm::ChildType))])))])))])))])).
'/bootstrap':disabled('/javascript/jsLogic':procedure(modelUpdate(Model,Role,UUID,Term::Type),'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/jsLogic':foreach(termDesc(Term::Type,Desc),'/javascript/jsLogic':jsCommand(['/javascript':assign('/javascript':arrayElement('/javascript/jsLogic':inlineTerm(Model::'/javascript/jsLogic':jsExpr),'/javascript/jsLogic':inlineTerm(UUID::'/bootstrap':string)),'/javascript/jsLogic':inlineTerm(Desc::termDescriptor))]))),'/javascript':if('/javascript':op('/javascript/jsLogic':inlineTerm(Term::Type),'/javascript':instanceof,'/javascript':varExpr('/cedalionWeb':'Array')),['/javascript':var(Index,'/javascript':const(1)),'/javascript':while('/javascript':op('/javascript':varExpr(Index),'/javascript':lt,'/javascript':dot('/javascript/jsLogic':inlineTerm(Term::Type),!length)),['/javascript/jsLogic':runProcedure(modelUpdate(Model,'/javascript/jsLogic':jsExpr('/javascript':op('/javascript':op('/javascript/jsLogic':inlineTerm(UUID::'/bootstrap':string),'/javascript':plus,'/javascript':str(! (-))),'/javascript':plus,'/javascript':call('/javascript':dot('/javascript':varExpr('String'),!fromCharCode),['/javascript':op('/javascript':varExpr(Index),'/javascript':plus,'/javascript':const(64))]))),'/javascript/jsLogic':jsExpr('/javascript':op('/javascript/jsLogic':inlineTerm(UUID::'/bootstrap':string),'/javascript':plus,'/javascript':call('/javascript':dot('/javascript':varExpr('String'),!fromCharCode),['/javascript':op('/javascript':varExpr(Index),'/javascript':plus,'/javascript':const(64))]))),'/javascript/jsLogic':jsExpr('/javascript':arrayElement('/javascript/jsLogic':inlineTerm(Term::Type),'/javascript':varExpr(Index)))::_)),'/javascript':assign('/javascript':varExpr(Index),'/javascript':op('/javascript':varExpr(Index),'/javascript':plus,'/javascript':const(1)))])],[])]))).
annotation:comment('/bootstrap':signature(modelUpdated(Model,Role,UUID,OldUUID)::'/javascript/jsLogic':procedure,[Model::'/javascript/jsLogic':jsExpr,Role::'/bootstrap':string,UUID::'/bootstrap':string,OldUUID::'/bootstrap':string]),!'This is a hook for making all editing-related updates, such as display updates').
'/bootstrap':signature(modifyModel(Role,Model,TTermFrom,TTermTo)::'/javascript/asyncproc':asyncProc,[Role::'/bootstrap':string,Model::'/javascript/jsLogic':jsExpr,TTermFrom::'/bootstrap':typedTerm,TTermTo::'/bootstrap':typedTerm]).
'/bootstrap':projection(modifyModel(Role,Model,TTermFrom,TTermTo)::'/javascript/asyncproc':asyncProc,'/bootstrap':horiz(['/bootstrap':label(!'modify model'),'/bootstrap':vis(Model::'/javascript/jsLogic':jsExpr),'/bootstrap':label(!role),'/bootstrap':vis(Role::'/bootstrap':string),'/bootstrap':label(! (:)),'/bootstrap':vis(TTermFrom::'/bootstrap':typedTerm),'/bootstrap':symbol(8611),'/bootstrap':vis(TTermTo::'/bootstrap':typedTerm)])).
'/javascript/asyncproc':asyncProc(modifyModel(Role,Model,TTermFrom,TTermTo),After,'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/asyncproc':andThen('/javascript/statepred':'for (s)'(matchUUID(Role,Model,TTermFrom),'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/asyncproc':andThen(modelUpdate(Model,Role,TTermTo),'/javascript/jsLogic':do('/javascript/jsLogic':jsCommand([]))))])),After))])):-builtin:true.
'/bootstrap':disabled('/javascript/jsLogic':procedure(test:modelUpdate,'/javascript/jsLogic':jsCommand(['/javascript':var(Model,'/javascript':json(['/javascript':bind('/javascript':str(!root),'/javascript':str(!nil))])),'/javascript/jsLogic':runProcedure('/javascript/asyncproc':andThen(modelUpdate('/javascript/jsLogic':jsExpr('/javascript':varExpr(Model)),!root,'/Functional':eval('/Functional':applyBinOp('/Functional':const(3),'/Functional':numPlus,'/Functional':const(2)),'/bootstrap':number,5)::'/bootstrap':pred),'/javascript/asyncproc':andThen('/javascript/statepred':'for (s)'(matchUUID(!root,'/javascript/jsLogic':jsExpr('/javascript':varExpr(Model)),'/Functional':eval('/Functional':applyBinOp(A,'/Functional':numPlus,B),'/bootstrap':number,5)::'/bootstrap':pred),'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/asyncproc':andThen(modelUpdate('/javascript/jsLogic':jsExpr('/javascript':varExpr(Model)),!root,'/Functional':eval('/Functional':applyBinOp(B,'/Functional':numPlus,A),'/bootstrap':number,5)::'/bootstrap':pred),'/javascript/asyncproc':andThen('/javascript/statepred':'for (s)'(termForRole(!root,'/javascript/jsLogic':jsExpr('/javascript':varExpr(Model)),Term::'/bootstrap':pred,-1),'/javascript/jsLogic':jsCommand(['/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript':varExpr('/javascript/jsLogic':console),!log),['/javascript':varExpr(Model)])),'/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript':varExpr('/javascript/jsLogic':console),!log),['/javascript/jsLogic':inlineTerm(Term::'/bootstrap':pred)]))])),'/javascript/jsLogic':do('/javascript/jsLogic':jsCommand(['/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript':varExpr('/javascript/jsLogic':console),!log),['/javascript':str(!'Done1')]))])))))])),'/javascript/jsLogic':do('/javascript/jsLogic':jsCommand(['/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript':varExpr('/javascript/jsLogic':console),!log),['/javascript':str(!'Done2')]))])))))]))).
'/javascript/jsLogic':procedure(test:modelUpdate,'/javascript/jsLogic':jsCommand(['/javascript':var(Model,'/javascript':json(['/javascript':bind('/javascript':str(!root),'/javascript':str(!nil))])),'/javascript/jsLogic':runProcedure('/javascript/asyncproc':andThen(modelUpdate('/javascript/jsLogic':jsExpr('/javascript':varExpr(Model)),!root,'/Functional':eval('/Functional':applyBinOp('/Functional':const(3),'/Functional':numPlus,'/Functional':const(2)),'/bootstrap':number,5)::'/bootstrap':pred),'/javascript/asyncproc':andThen(modifyModel(!root,'/javascript/jsLogic':jsExpr('/javascript':varExpr(Model)),'/Functional':eval('/Functional':applyBinOp(A,'/Functional':numPlus,B),'/bootstrap':number,5)::'/bootstrap':pred,'/Functional':eval('/Functional':applyBinOp(B,'/Functional':minus,A),'/bootstrap':number,2)::'/bootstrap':pred),'/javascript/asyncproc':andThen('/javascript/statepred':'for (s)'(termForRole(!root,'/javascript/jsLogic':jsExpr('/javascript':varExpr(Model)),Term::'/bootstrap':pred,-1),'/javascript/jsLogic':jsCommand(['/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript':varExpr('/javascript/jsLogic':console),!log),['/javascript':varExpr(Model)])),'/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript':varExpr('/javascript/jsLogic':console),!log),['/javascript/jsLogic':inlineTerm(Term::'/bootstrap':pred)]))])),'/javascript/jsLogic':do('/javascript/jsLogic':jsCommand(['/javascript':var(Sel,'/javascript':json([])),'/javascript/jsLogic':runProcedure('/cedalionWeb/jquery':openPage('/cedalionWeb/visualization':toHTML('/bootstrap':vis(uuidDesc(builtin:true,!nil,!root,'/javascript/jsLogic':jsExpr('/javascript':varExpr(Model)),'/bootstrap':listSet([selectable('/javascript/jsLogic':jsExpr('/javascript':varExpr(Sel)))]))::'/bootstrap':pred)))),'/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript':call('/javascript':varExpr('/javascript/jsLogic':jQuery),['/javascript':str(!'.vis-term')]),!addClass),['/javascript':str(!selected)])),'/javascript/jsLogic':runProcedure('/javascript/asyncproc':andThen(modifyModel(!root,'/javascript/jsLogic':jsExpr('/javascript':varExpr(Model)),'/Functional':eval('/Functional':applyBinOp(Arg1,Op,Arg2),'/bootstrap':number,V)::'/bootstrap':pred,'/Functional':eval('/Functional':applyBinOp(Arg1,Op,'/Functional':applyBinOp('/Functional':const(0),'/Functional':numPlus,Arg2)),'/bootstrap':number,V)::'/bootstrap':pred),'/javascript/jsLogic':do('/javascript/jsLogic':jsCommand([]))))]))))))])).
'/bootstrap':signature(newUUID(Model,Role,UUID,Desc)::'/javascript/jsLogic':procedure,[Model::'/javascript/jsLogic':jsExpr,Role::'/bootstrap':string,UUID::'/bootstrap':string,Desc::termDescriptor]).
'/bootstrap':signature(applyDefault(TTermIn,TTermOut)::'/bootstrap':pred,[TTermIn::'/bootstrap':typedTerm,TTermOut::'/bootstrap':typedTerm]).
applyDefault(Term1::Type,Term2::Type):-builtin:if(builtin:var(Term1::Type),builtin:if('/bootstrap':defaultRepresentation(Term2::Type),builtin:true,Term2::Type=empty::_),Term2::Type=Term1::Type).
