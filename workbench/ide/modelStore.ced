'/bootstrap':defAtom(modelStore::'/bootstrap':type).
'/bootstrap':defAtom(loadedStatementsMS::modelStore).
'/bootstrap':signature(modelNames(MS)::'/javascript/statepred':stateSet('/bootstrap':string),[MS::modelStore]).
'/javascript/statepred':setDef(modelNames(loadedStatementsMS),'/bootstrap':string,unique('/javascript/statepred':set(File,'/javascript/statepred':pred(builtin:loadedStatement(File,_,_))))).
'/bootstrap':signature(modelForName(ModelStore,Name,Model)::'/javascript/statepred':statePred,[ModelStore::modelStore,Name::'/bootstrap':string,Model::'/javascript/jsLogic':jsExpr]).
'/javascript/statepred':def(modelForName(loadedStatementsMS,Name,Model),Action,Finally,'/javascript/jsLogic':jsCommand(['/javascript':var(ModelPrime,'/javascript':json([])),'/javascript/jsLogic':runProcedure('/javascript/jsLogic':foreach((builtin:findall(Statement,'/bootstrap':statement, (builtin:loadedStatement(Name,StatementPrime,VNs),'/workbench/cedalion':concreteVariables(StatementPrime::'/bootstrap':statement,VNs,Statement::'/bootstrap':statement)),Statements),'/Functional':eval('/Functional':applyBinOp('/Functional':const(Name),'/Functional':concat,'/Functional':const(!'-A')),'/bootstrap':string,Role)),'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/asyncproc':andThen('/workbench/projectionalEditing':modelUpdate('/javascript/jsLogic':jsExpr('/javascript':varExpr(ModelPrime)),Role,'/workbench/projectionalEditing':editorContent(1,Statements)::'/workbench/projectionalEditing':editorContent),'/javascript/asyncproc':andThen('/javascript/statepred':'for (s)'('/javascript/statepred':pred(Model::'/javascript/jsLogic':jsExpr='/javascript/jsLogic':jsExpr('/javascript':varExpr(ModelPrime))::'/javascript/jsLogic':jsExpr),Action),'/javascript/jsLogic':do(Finally))))])))])).
'/bootstrap':signature(updateModelByName(MS,Name,Model,Role)::'/javascript/asyncproc':asyncProc,[MS::modelStore,Name::'/bootstrap':string,Model::'/javascript/jsLogic':jsExpr,Role::'/bootstrap':string]).
'/javascript/asyncproc':asyncProc(updateModelByName(loadedStatementsMS,Name,Model,Role),After,'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/jsLogic':foreach(builtin:findall(Statement,'/bootstrap':statement, (builtin:loadedStatement(Name,StatementPrime,VNs),'/workbench/cedalion':concreteVariables(StatementPrime::'/bootstrap':statement,VNs,Statement::'/bootstrap':statement)),Statements),'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/asyncproc':andThen('/workbench/projectionalEditing':modelUpdate(Model,Role,Statements::'/bootstrap':list('/bootstrap':statement)),After))])))])):-builtin:true.
'/bootstrap':defAtom(alert::'/javascript':symbol).
'/bootstrap':signature(save(ModelStore,Name,Model)::'/javascript/asyncproc':asyncProc,[ModelStore::modelStore,Name::'/bootstrap':string,Model::'/javascript/jsLogic':jsExpr]).
'/javascript/asyncproc':procDef(save(loadedStatementsMS,Name,Model),'/javascript/asyncproc':sync('/javascript/jsLogic':do('/javascript/jsLogic':jsCommand(['/javascript':exprStatement('/javascript':call('/javascript':varExpr(alert),['/javascript':op('/javascript':op('/javascript':str(!'Read only model '),'/javascript':plus,'/javascript/jsLogic':inlineTerm(Name::'/bootstrap':string)),'/javascript':plus,'/javascript':str(!' cannot be saved'))]))])))).
