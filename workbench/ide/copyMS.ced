'/bootstrap':signature(copyMS(From,To,MT)::'/javascript/jsLogic':procedure,[From::modelStore(MT),To::modelStore(MT),MT::'/bootstrap':type]).
'/javascript/jsLogic':procedure(copyMS(From,To,MT),'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/asyncproc':andThen('/javascript/statepred':'for (s)'('/javascript/statepred':conj('/javascript/statepred':member(Name,'/bootstrap':string,modelNames(From,MT)),modelForName(From,Name,Model,MT)),'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/asyncproc':andThen(newModel(To,Name,MT),'/javascript/asyncproc':andThen(preSave(Model),'/javascript/asyncproc':andThen(save(To,Model,MT),'/javascript/jsLogic':do('/javascript/jsLogic':jsCommand([]))))))])),'/javascript/jsLogic':do('/javascript/jsLogic':jsCommand([]))))])).
'/javascript/jsLogic':procedure(test:loadedToCouch,'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure(copyMS(loadedStatementsMS,couchdbMS('/workbench/projectionalEditing':editorContent),'/workbench/projectionalEditing':editorContent))])).
'/javascript/jsLogic':procedure(test:fileToCouch,'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure(copyMS(fileMS(!.,'/workbench/projectionalEditing':editorContent),couchdbMS('/workbench/projectionalEditing':editorContent),'/workbench/projectionalEditing':editorContent))])).
'/javascript/jsLogic':procedure(test:couchToFile,'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure(copyMS(couchdbMS('/workbench/projectionalEditing':editorContent),fileMS(!.,'/workbench/projectionalEditing':editorContent),'/workbench/projectionalEditing':editorContent))])).
