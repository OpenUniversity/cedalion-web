'/bootstrap':signature(variableName(Name)::'/cedalionWeb/parsing':token('/workbench/projectionalEditing':tCed),[Name::'/bootstrap':string]).
'/cedalionWeb/parsing':tokenDef(variableName(Name),'/cedalionWeb/parsing':follow('/cedalionWeb/parsing':bind('/cedalionWeb/parsing':follow(annotation:parentheses('/cedalionWeb/parsing':alt('/cedalionWeb/parsing':charRange(!'A',!'Z'),'/cedalionWeb/parsing':char(!'_'))),'/cedalionWeb/parsing':repeatMax(annotation:parentheses('/cedalionWeb/parsing':alt('/cedalionWeb/parsing':alt('/cedalionWeb/parsing':alt('/cedalionWeb/parsing':charRange(!'A',!'Z'),'/cedalionWeb/parsing':char(!'_')),'/cedalionWeb/parsing':charRange(!a,!z)),'/cedalionWeb/parsing':charRange(!'0',!'9'))))),Codes),'/cedalionWeb/parsing':pred(builtin:charCodes(Name,Codes))),'/workbench/projectionalEditing':tCed).
'/cedalionWeb/parsing':prod('/workbench/projectionalEditing':term(_,var(Name)::_),'/cedalionWeb/parsing':token('/workbench/projectionalEditing':tCed),'/cedalionWeb/parsing':terminal(variableName(Name))).
'/bootstrap':signature(var(Name)::_,[Name::'/bootstrap':string]).
'/bootstrap':userVisualization(var(Name)::_,cpi:default,_,Vis):-builtin:if(('/bootstrap':descriptorContent(Name::'/bootstrap':string,Str::'/bootstrap':string,_),builtin:string(Str::'/bootstrap':string)), ('/cedalionWeb/visualization':varNameVisualization(Str,InternalVis),Vis::'/bootstrap':visualization='/bootstrap':color('/bootstrap':italic(InternalVis),cpi:rgb(0,128,0))::'/bootstrap':visualization),Vis::'/bootstrap':visualization='/bootstrap':horiz(['/bootstrap':label(!var),'/bootstrap':vis(Name::'/bootstrap':string)])::'/bootstrap':visualization).
'/workbench/projectionalEditing':neededDepthForProjection(var(_)::_,2):-builtin:true.
'/bootstrap':signature(extractVariables(TTermIn,TTermOut,VNsIn,VNsOut)::'/bootstrap':pred,[TTermIn::'/bootstrap':typedTerm,TTermOut::'/bootstrap':typedTerm,VNsIn::'/bootstrap':list('/bootstrap':varName),VNsOut::'/bootstrap':list('/bootstrap':varName)]).
annotation:shrink((extractVariables(TTermIn,TTermOut,VNsIn,VNsOut):-builtin:if(TTermIn=var(Name)::Type, ('/bootstrap':mergeVarNames(VNsIn,[builtin:varName(Var::Type,Name)],VNsOut),TTermOut=Var::Type),builtin:if(builtin:compound(TTermIn), ('/bootstrap':safeParseTerm(TTermIn,Func,TTermsIn),extractVariablesInList(TTermsIn,TTermsOut,VNsIn,VNsOut),builtin:parseTerm(TTermOut,Func,TTermsOut)), (TTermOut=TTermIn,VNsOut::'/bootstrap':list('/bootstrap':varName)=VNsIn::'/bootstrap':list('/bootstrap':varName)))))).
'/bootstrap':signature(extractVariablesInList(TTermsIn,TTermsOut,VNsIn,VNsOut)::'/bootstrap':pred,[TTermsIn::'/bootstrap':list('/bootstrap':typedTerm),TTermsOut::'/bootstrap':list('/bootstrap':typedTerm),VNsIn::'/bootstrap':list('/bootstrap':varName),VNsOut::'/bootstrap':list('/bootstrap':varName)]).
extractVariablesInList([],[],VNs,VNs):-builtin:true.
annotation:shrink((extractVariablesInList([TTermIn|TTermsIn],[TTermOut|TTermsOut],VNsIn,VNsOut):-extractVariables(TTermIn,TTermOut,VNsIn,VNsMid),extractVariablesInList(TTermsIn,TTermsOut,VNsMid,VNsOut))).
'/bootstrap':unitTest(extractVariables(a(b(var(!'X'),var(!'Y')),var(!'X'))::'/bootstrap':pred,a(b(X,Y),X)::_,[],[builtin:varName(Y::_,!'Y'),builtin:varName(X::_,!'X')])).
