var vows = require('vows'),
    assert = require('assert');

vows.describe('detalion').addBatch({
    'In ProgramDatabase': {
        topic: new ProgramDatabase(),

        'findAllMatches() should retrieve a stored statement': function (db) {
			db.store(['clause', ['a', 'X'], ['b', 'X']]);
			var matches = db.findAllMatches(['clause', ['a', 'X'], 'Y'], new Interpreter(db));
            assert.equal(matches.length, 1);
            assert.deepEqual(matches[0].st, ['clause', ['a', 'X'], ['b', 'X']]);
        },
		'findAllMatches() should only retrieve matching statements': function(db) {
			db.store(['clause', ['b', 'X'], ['c', 'X']]);
			var matches = db.findAllMatches(['clause', ['a', 'X'], 'Y'], new Interpreter(db));
            assert.equal(matches.length, 1);
            assert.deepEqual(matches[0].st, ['clause', ['a', 'X'], ['b', 'X']]);
		},
		'findAllMatches() should provide all that matches' : function(db) {
			var matches = db.findAllMatches(['clause', 'X', 'Y'], new Interpreter(db));
            assert.equal(matches.length, 2);
		},
		'findAllMatches() should address the case where the pattern is more specific' : function(db) {
			var matches = db.findAllMatches(['clause', ['a', ['d', 'X']], ['b', 'X']], new Interpreter(db));
            assert.equal(matches.length, 1);
            assert.deepEqual(matches[0].st, ['clause', ['a', 'X'], ['b', 'X']]);
		},
		'findAllMatches() should provide all answers if there are different levels of specificity' : function(db) {
			db.store(['clause', ['a', ['c', 'X']], ['b', 'X']]);
			var matches = db.findAllMatches(['clause', ['a', 'X'], 'Y'], new Interpreter(db));
            assert.equal(matches.length, 2);
            assert.deepEqual(matches[0].st, ['clause', ['a', 'X'], ['b', 'X']]);
            assert.deepEqual(matches[1].st, ['clause', ['a', ['c', 'X']], ['b', 'X']]);
		},
		'findMostSpecific() should only return the most specific answer': function(db) {
			var matches = db.findMostSpecific(['clause', ['a', ['c', 'X']], 'Y'], new Interpreter(db));
            assert.equal(matches.length, 1);
            assert.deepEqual(matches[0].st, ['clause', ['a', ['c', 'X']], ['b', 'X']]);
		},
		'findMostSpecific() should only return matches that are as or less specific than the pattern': function(db) {
			var matches = db.findMostSpecific(['clause', ['a' 'X'], 'Y'], new Interpreter(db));
            assert.equal(matches.length, 1);
		},
		'When there is a generic and a specific answer, findMostSpecific() should return the generic one': function(db) {
			var matches = db.findMostSpecific(['clause', ['a', 'Z'], 'Y'], new Interpreter(db));
            assert.equal(matches.length, 1);
            assert.deepEqual(matches[0].st, ['clause', ['a', 'X'], ['b', 'X']]);
		},
		'findMostSpecific() should fall back to the more generic match if no specific one is found': function(db) {
			var matches = db.findMostSpecific(['clause', ['a', ['d', 'X']], ['b', 'X']], new Interpreter(db));
            assert.equal(matches.length, 1);
            assert.deepEqual(matches[0].st, ['clause', ['a', 'X'], ['b', 'X']]);
		},
		'In the case of where there is no generic answer, just more specific ones, findMostSpecific() should throw an exception': function(db) {
			assert.throws(function() {
				db.findMostSpecific(['clause', 'X', 'Y'], new Interpreter(db));
			}, Error);
		}
    },
	'The interpreter': {
		topic: (function() {
			var program = new ProgramDatabase();
			return new Interpreter(program);
		})(),
		'Unification of a(1, X) and a(Y, 2) should succeed': function(det) {
			var X = det.heapAllocate();
			var Y = det.heapAllocate();
			assert.isTrue(det.unify(['a', 1, X], ['a', Y, 2]));
			assert.equal(det.deref(X), 2);
			assert.equal(det.deref(Y), 1);
		},
		'Unification of a(1, X) and a(2, Y) should fail': function(det) {
			var X = det.heapAllocate();
			var Y = det.heapAllocate();
			assert.isFalse(det.unify(['a', 1, X], ['a', 2, Y]));
		},
		'Writing a(2, 7) into a(X, Y) shoud turn p(X, 1, Y) into p(2, 1, 7)': function(det) {
			assert.isTrue(det.unifyWrite(['a', {id:1}, {id:2}], ['a', 2, 7]));
			assert.deepEqual(det.unifyRead(['p', {id:1}, 1, {id:2}]), ['p', 2, 1, 7]);
		},
		'toPrototype(a(X, b(Y, X))) should run correctly': function(det) {
			var X = det.heapAllocate();
			var Y = det.heapAllocate();
			assert.deepEqual(det.toPrototype(['a', X, ['b', Y, X]]), ['a', {id:1}, ['b', {id:2}, {id:1}]]);
		},
		'collectTermVars(a(X, b(Y, X))) collect X and Y': function(det) {
			var X = det.heapAllocate();
			var Y = det.heapAllocate();
			var vars = [];
			det.collectTermVars(['a', X, ['b', Y, X]], vars, {})
			assert.deepEqual(vars, [X, Y]);
		},
		'termHash(a(X, b(Y, X))) should run correctly': function(det) {
			var X = det.heapAllocate();
			var Y = det.heapAllocate();
			assert.equal(det.termHash(['a', X, ['b', Y, X]]), 187489);
		},
	},
	'A simple program': {
		topic: (function() {
			var program = new ProgramDatabase();
			program.store([PREFIX + 'clause', ['a', {id: 1}, 'one'], [TRUE]]);
			program.store([PREFIX + 'clause', ['a', ['b'], 'two'], [TRUE]]);
			program.store([PREFIX + 'clause', ['a', ['c'], 'three'], [FAIL]]);
			var det = new Interpreter(program);
			createBuiltins(det);
			return det;
		})(),
		'true should succeed': function(det) {
			assert.isTrue(det.call([TRUE]));
		},
		'fail should succeed': function(det) {
			assert.isFalse(det.call([FAIL]));
		},
		'evaluating a(Y, X) should emit X=one': function(det) {
			var X = det.heapAllocate();
			var Y = det.heapAllocate();
			assert.isTrue(det.call(['a', Y, X]));
			assert.equal(det.deref(X), 'one');
		},
		'evaluating a(b, X) should emit X=two': function(det) {
			var X = det.heapAllocate();
			assert.isTrue(det.call(['a', ['b'], X]));
			assert.equal(det.deref(X), 'two');
		},
		'evaluating a(c, X) should fail': function(det) {
			var X = det.heapAllocate();
			assert.isFalse(det.call(['a', ['c'], X]));
		},
		'evaluating a(d, X) should emit X=one': function(det) {
			var X = det.heapAllocate();
			assert.isTrue(det.call(['a', ['d'], X]));
			assert.equal(det.deref(X), 'one');
		}
	},
	'List concatenation': {
		// concat([], X, X) :- true.
		// concat([A|X], Y, [A|Z]) :- concat(X, Y, Z).
		topic: (function() {
			var program = new ProgramDatabase();
			program.store([PREFIX + 'clause', ['concat', ['[]'], {id:1}, {id:1}], [TRUE]]);
			program.store([PREFIX + 'clause', ['concat', ['.', {id:1}, {id:2}], {id:3}, ['.', {id:1}, {id:4}]], 
				['concat', {id:2}, {id:3}, {id:4}]]);
			var det = new Interpreter(program, new Jit({lifting: 0}));
			createBuiltins(det);
			return det;
		})(),
		'concat([1], [2], X) should succeed, emitting X=[1, 2]': function(det) {
			var X = det.heapAllocate();
			assert.isTrue(det.call(['concat', ['.', 1, ['[]']], ['.', 2, ['[]']], X]));
			assert.deepEqual(det.deepDeref(X), ['.', 1, ['.', 2, ['[]']]]);
		},
		'concat([3], X, [3, 4]) should succeed, emitting X=[4]': function(det) {
			var X = det.heapAllocate();
			assert.isTrue(det.call(['concat', ['.', 3, ['[]']], X, ['.', 3, ['.', 4, ['[]']]]]));
			assert.deepEqual(det.deepDeref(X), ['.', 4, ['[]']]);
		},
		'concat([1], X, [3, 4]) should fail': function(det) {
			var X = det.heapAllocate();
			assert.isFalse(det.call(['concat', ['.', 1, ['[]']], X, ['.', 3, ['.', 4, ['[]']]]]));
		}
	},
	'Builtin Predicate': {
		topic :(function() {
			var program = new ProgramDatabase();
			var det = new Interpreter(program);
			createBuiltins(det);
			return det;
		})(),
		'strcat("hello, ", "world", X) should succeed, emitting X = "hello, world"': function(det) {
			var X = det.heapAllocate();
			assert.isTrue(det.call([PREFIX + 'strcat', 'hello, ', 'world', X]));
			assert.equal(det.deref(X), 'hello, world');
		},
		'strcat("hello, ", X, "hello, world") should succeed, emitting X = "world"': function(det) {
			var X = det.heapAllocate();
			assert.isTrue(det.call([PREFIX + 'strcat', 'hello, ', X, 'hello, world']));
			assert.equal(det.deref(X), 'world');
		},
		'strcat(X, "world", "hello, world") should succeed, emitting X = "hello, "': function(det) {
			var X = det.heapAllocate();
			assert.isTrue(det.call([PREFIX + 'strcat', X, 'world', 'hello, world']));
			assert.equal(det.deref(X), 'hello, ');
		},
		'strcat(X, "mondi", "hello, world") should fail': function(det) {
			var X = det.heapAllocate();
			assert.isFalse(det.call([PREFIX + 'strcat', X, 'mondi', 'hello, world']));
		}
	},
	'peano numbers' : {
		topic :(function() {
			// p(zero, 0) :- true.
			// p(s(X), Y) :- p(X, Y1), plus(Y1, 1, Y).
			var program = new ProgramDatabase();
			program.store([PREFIX + 'clause', ['p', ['zero'], 0], [TRUE]]);
			program.store([PREFIX + 'clause', ['p', ['s', {id:1}], {id:2}], [PREFIX + 'conj', ['p', {id:1}, {id:3}], [PREFIX+'plus', {id:3}, 1, {id:2}]]]);
			var det = new Interpreter(program);
			createBuiltins(det);
			return det;
		})(),
		'zero = 0': function(det) {
			var Y = det.heapAllocate();
			assert.isTrue(det.call(['p', ['zero'], Y]));
			assert.equal(det.deref(Y), 0);
		},
		's(s(zero)) = 2': function(det) {
			var Y = det.heapAllocate();
			assert.isTrue(det.call(['p', ['s', ['s', ['zero']]], Y]));
			assert.equal(det.deref(Y), 2);
		}
	},
	'Fibonacci Sequence': {
		topic :(function() {
			// fib(X, Y) :- if(X < 2,
			//	Y = 1,
			//	(
			//		minus(X, 1, X1),
			//		fib(X1, Y1),
			//		minus(X, 2, X2),
			//		fib(X2, Y2),
			//		plus(Y1, Y2, Y)
			//	).
			var program = new ProgramDatabase();
			program.store([PREFIX + 'clause', ['fib', {id:1}, {id:2}], [PREFIX + 'if', [PREFIX + 'lt', {id:1}, 2], 
				[PREFIX + '=', {id:2}, 1],
				[PREFIX + 'conj', [PREFIX + 'minus', {id:1}, 1, {id:3}], 
				[PREFIX + 'conj', [PREFIX + 'minus', {id:1}, 2, {id:4}], 
				[PREFIX + 'conj', ['fib', {id:3}, {id:5}],
				[PREFIX + 'conj', ['fib', {id:4}, {id:6}],
				[PREFIX + 'plus', {id:5}, {id:6}, {id:2}]]]]]]]);
			var det = new Interpreter(program);
			createBuiltins(det);
			return det;
		})(),
		'fib(2) = 2': function(det) {
			var Y = det.heapAllocate();
			assert.isTrue(det.call(['fib', 2, Y]));
			assert.equal(det.deref(Y), 2);
		},
		'fib(5) = 8': function(det) {
			var Y = det.heapAllocate();
			assert.isTrue(det.call(['fib', 5, Y]));
			assert.equal(det.deref(Y), 8);
		},
		'fib(11) = 144': function(det) {
			var Y = det.heapAllocate();
			assert.isTrue(det.call(['fib', 11, Y]));
			assert.equal(det.deref(Y), 144);
		},
	},
	'parseTerm': {
		topic :(function() {
			var program = new ProgramDatabase();
			var det = new Interpreter(program);
			createBuiltins(det);
			return det;
		})(),
		'parseTerm(a(b, c)::_, Name, Args)' : function(det) {
			var Name = det.heapAllocate();
			var Args = det.heapAllocate();
			assert.isTrue(det.call([PREFIX + 'parseTerm', ['::', ['a', ['b'], ['c']], det.heapAllocate()], Name, Args]));
			assert.equal(det.deref(Name), 'a');
			assert.deepEqual(det.deepDeref(Args), ['.', ['::', ['b'], {ref:4}], ['.', ['::', ['c'], {ref:5}], ['[]']]]);
		},
		'parseTerm(a(b, c)::_, Name, Args) with the term being referenced' : function(det) {
			var Name = det.heapAllocate();
			var Args = det.heapAllocate();
			var Term = det.heapAllocate();
			det.bind(Term.ref, ['a', ['b'], ['c']]);
			assert.isTrue(det.call([PREFIX + 'parseTerm', ['::', Term, det.heapAllocate()], Name, Args]));
			assert.equal(det.deref(Name), 'a');
			assert.deepEqual(det.deepDeref(Args), ['.', ['::', ['b'], {ref:10}], ['.', ['::', ['c'], {ref:11}], ['[]']]]);
		},
		'parseTerm(a(b, c)::_, Name, Args) where b is referenced' : function(det) {
			var Name = det.heapAllocate();
			var Args = det.heapAllocate();
			var Term = det.heapAllocate();
			det.bind(Term.ref, ['b']);
			assert.isTrue(det.call([PREFIX + 'parseTerm', ['::', ['a', Term, ['c']], det.heapAllocate()], Name, Args]));
			assert.equal(det.deref(Name), 'a');
			assert.deepEqual(det.deepDeref(Args), ['.', ['::', ['b'], {ref:16}], ['.', ['::', ['c'], {ref:17}], ['[]']]]);
		},
		'parseTerm(a(b, c)::_, "a", [b::_, c::_]) ' : function(det) {
			assert.isTrue(det.call([PREFIX + 'parseTerm', ['::', ['a', ['b'], ['c']], det.heapAllocate()], 
				'a', ['.', ['::', ['b'], det.heapAllocate()], ['.', ['::', ['c'], det.heapAllocate()], ['[]']]]]));
		},
		'parseTerm(a(b, c)::_, "a", [b::_, c::_]) with the term referenced' : function(det) {
			var Term = det.heapAllocate();
			det.bind(Term.ref, ['a', ['b'], ['c']]);
			assert.isTrue(det.call([PREFIX + 'parseTerm', ['::', Term, det.heapAllocate()], 
				'a', ['.', ['::', ['b'], det.heapAllocate()], ['.', ['::', ['c'], det.heapAllocate()], ['[]']]]]));
		},
	},
	'charCodes': {
		topic :(function() {
			var program = new ProgramDatabase();
			var det = new Interpreter(program);
			createBuiltins(det);
			return det;
		})(),
		'charCodes("ABC", X)': function(det) {
			var X = det.heapAllocate();
			assert.isTrue(det.call([PREFIX + 'charCodes', 'ABC', X]));
			assert.deepEqual(det.listToArray(X), [65, 66, 67]);
		},
		'charCodes(X, [65, 66, 67])': function(det) {
			var X = det.heapAllocate();
			assert.isTrue(det.call([PREFIX + 'charCodes', X, det.arrayToList([65, 66, 67])]));
			assert.equal(det.deref(X), 'ABC');
		},
	},
}).run();

