'/bootstrap':defAtom(fooType::'/bootstrap':type).
'/bootstrap':signature('test1'(Foo)::'/detalion':pred,[Foo::fooType]).
'/detalion':clause('test1'(_),'/detalion':conj('/detalion':eval('/detalion':plus(1,2,X),X,'/bootstrap':number,Three),'/detalion':eval('/detalion':plus(Three,2,X),X,'/bootstrap':number,5))).
'/bootstrap':defAtom(foo::fooType).
'/detalion':unitTest('test1'(foo)).
'/bootstrap':signature('test2'(Foo)::'/detalion':pred,[Foo::fooType]).
'/detalion':clause('test2'(_),'/detalion':conj('/detalion':eval('/detalion':true,X,'/bootstrap':number,Y),'/detalion':conj('/detalion':eval('/detalion':true,X,'/bootstrap':number,Z),'/detalion':conj('/detalion':eq(Y::'/bootstrap':number,2::'/bootstrap':number),'/detalion':eq(Z::'/bootstrap':number,3::'/bootstrap':number))))).
'/detalion':unitTest('test2'(foo)).
'/detalion':unitTest('/detalion/cedalion':cedalion('/Functional':eval('/Functional':applyBinOpList('/Functional':const([]),'/Functional':numPlus,'/Functional':const([])),'/bootstrap':list('/bootstrap':number),V0),'/detalion/cedalion':term(!foo),'/bootstrap':string,'/detalion/cedalion':diffList(V1,V1),'/detalion/cedalion':diffList([!foo],[]))).
'/detalion':unitTest(det:specialize('/detalion':clause(foo,'/detalion/cedalion':cedalion(builtin:plus(A,B,X),'/detalion/cedalion':term(X),'/bootstrap':number,'/detalion/cedalion':diffList(L,L),'/detalion/cedalion':diffList([X],[]))),'/detalion':clause(foo,'/detalion':plus(A,B,X)),[])).
'/detalion':unitTest('/detalion':conj(det:specialize('/detalion':clause(foo,'/detalion/cedalion':cedalion(builtin:plus(1,2,X),'/detalion/cedalion':term(X),'/bootstrap':number,'/detalion/cedalion':diffList(L,L),'/detalion/cedalion':diffList([X],[]))),'/detalion':clause(foo,Result),Cls),'/detalion':conj('/detalion':unmarkDynamic(X,XPrime,'/bootstrap':number),'/detalion':conj('/detalion':trace('/detalion':equals(Result,'/detalion':true,'/detalion':pred)),'/detalion':conj('/detalion':trace('/detalion':equals(XPrime,3,'/bootstrap':number)),'/detalion':trace('/detalion':equals(Cls,[],'/bootstrap':list('/bootstrap':statement)))))))).
'/detalion':unitTest('/detalion':conj(det:specialize('/detalion':clause(foo,'/detalion/cedalion':cedalion('/Functional':eval('/Functional':plus('/Functional':const(1),'/Functional':const(2)),'/bootstrap':number,X),'/detalion/cedalion':term(X),'/bootstrap':number,'/detalion/cedalion':diffList(L,L),'/detalion/cedalion':diffList([X],[]))),'/detalion':clause(foo,Result),Cls),'/detalion':conj('/detalion':unmarkDynamic(X,XPrime,'/bootstrap':number),'/detalion':conj('/detalion':trace('/detalion':equals(Result,'/detalion':true,'/detalion':pred)),'/detalion':conj('/detalion':trace('/detalion':equals(XPrime,3,'/bootstrap':number)),'/detalion':trace('/detalion':equals(Cls,[],'/bootstrap':list('/bootstrap':statement)))))))).
'/detalion':unitTest('/detalion':conj(det:specialize('/detalion':clause(foo,'/detalion':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(1),'/Functional':numPlus,'/Functional':const(2)),'/Functional':numPlus,'/Functional':const(3)),'/bootstrap':number,X)),'/detalion':clause(foo,Result),Cls),'/detalion':conj('/detalion':unmarkDynamic(X,XPrime,'/bootstrap':number),'/detalion':conj('/detalion':trace('/detalion':equals(Result,'/detalion':true,'/detalion':pred)),'/detalion':conj('/detalion':trace('/detalion':equals(XPrime,6,'/bootstrap':number)),'/detalion':trace('/detalion':equals(Cls,[],'/bootstrap':list('/bootstrap':statement)))))))).
bar(1):-builtin:true.
bar(2):-builtin:true.
bar(3):-builtin:true.
'/detalion':unitTest('/detalion':conj(det:specialize('/detalion':clause(foo,'/detalion/cedalion':cedalion(bar(X),'/detalion/cedalion':term(X),'/bootstrap':number,'/detalion/cedalion':diffList(L,L),'/detalion/cedalion':diffList(LOut,[]))),'/detalion':clause(foo,'/detalion':true),ClOut),'/detalion':conj('/detalion':trace('/detalion':equals(LOut,[1,2,3],'/bootstrap':list('/bootstrap':number))),'/detalion':trace('/detalion':equals(ClOut,[],'/bootstrap':list('/bootstrap':statement)))))).
'/detalion':unitTest('/detalion':conj(det:specialize('/detalion':clause('/detalion':eval('/Functional':applyBinOp('/Functional':const(X),Op,Y),T,V),'/detalion':conj('/detalion':eval('/Functional':const(X),T,XPrime),'/detalion':conj('/detalion':eval(Y,T,YPrime),'/detalion':eval('/detalion':applyOp(Op,T,XPrime,YPrime,VPrime),VPrime,T,V)))),'/detalion':clause('/detalion':eval('/Functional':applyBinOp('/Functional':const(X),Op,Y),T,V),Result),ClOut),'/detalion':conj('/detalion':trace('/detalion':equals(Result,'/detalion':conj('/detalion':eval(Y,T,YPrime),'/detalion':eval('/detalion':applyOp(Op,T,X,YPrime,VPrime),VPrime,T,V)),'/detalion':pred)),'/detalion':trace('/detalion':equals(ClOut,[],'/bootstrap':list('/bootstrap':statement)))))).
