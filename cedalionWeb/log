[app] logicCode = ...
[app] programCode = ...
Iterating on /cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#raised,/bootstrap#lineBorder,/bootstrap#lowered,/bootstrap#background,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],cpi#rgb,150,150,255,3,cpi#rgb,0,0,255,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>,/javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-raised,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#lineBorder,/bootstrap#lowered,/bootstrap#background,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],cpi#rgb,150,150,255,3,cpi#rgb,0,0,255,<unbound>
Iterating on /javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-raised,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#lineBorder,/bootstrap#lowered,/bootstrap#background,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],cpi#rgb,150,150,255,3,cpi#rgb,0,0,255,<unbound>
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-raised,[],/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#pair,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-raised,/bootstrap#string,/cedalionWeb/xml#genAttr,[],/Functional#pairType,/bootstrap#string,/bootstrap#string,/Functional#pair,<unbound>,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-raised,/bootstrap#string,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#const,vis-raised,/bootstrap#string,<unbound>
Done
Done
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,[],/bootstrap#string,<unbound>
Done
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const, class="vis-raised",/Functional#concat,/Functional#const,,/bootstrap#string,<unbound>
Iterating on /cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#lineBorder,/bootstrap#lowered,/bootstrap#background,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],cpi#rgb,150,150,255,3,cpi#rgb,0,0,255,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>,/javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-line-border,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#applyBinOp,/Functional#plus,/Functional#const,border-width: ,/Functional#num2str,/Functional#const,3,/Functional#concat,/Functional#const,; border-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,0,0,255,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#lowered,/bootstrap#background,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],cpi#rgb,150,150,255,<unbound>
Iterating on /javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-line-border,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#applyBinOp,/Functional#plus,/Functional#const,border-width: ,/Functional#num2str,/Functional#const,3,/Functional#concat,/Functional#const,; border-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,0,0,255,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#lowered,/bootstrap#background,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],cpi#rgb,150,150,255,<unbound>
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-line-border,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#applyBinOp,/Functional#plus,/Functional#const,border-width: ,/Functional#num2str,/Functional#const,3,/Functional#concat,/Functional#const,; border-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,0,0,255,[],/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#pair,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-line-border,/bootstrap#string,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#applyBinOp,/Functional#plus,/Functional#const,border-width: ,/Functional#num2str,/Functional#const,3,/Functional#concat,/Functional#const,; border-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,0,0,255,[],/Functional#pairType,/bootstrap#string,/bootstrap#string,/Functional#pair,<unbound>,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-line-border,/bootstrap#string,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#const,vis-line-border,/bootstrap#string,<unbound>
Done
Done
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#applyBinOp,/Functional#plus,/Functional#const,border-width: ,/Functional#num2str,/Functional#const,3,/Functional#concat,/Functional#const,; border-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,0,0,255,[],/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#pair,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#applyBinOp,/Functional#applyBinOp,/Functional#plus,/Functional#const,border-width: ,/Functional#num2str,/Functional#const,3,/Functional#concat,/Functional#const,; border-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,0,0,255,/bootstrap#string,/cedalionWeb/xml#genAttr,[],/Functional#pairType,/bootstrap#string,/bootstrap#string,/Functional#pair,<unbound>,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#applyBinOp,/Functional#applyBinOp,/Functional#plus,/Functional#const,border-width: ,/Functional#num2str,/Functional#const,3,/Functional#concat,/Functional#const,; border-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,0,0,255,/bootstrap#string,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#applyBinOp,/Functional#plus,/Functional#const,border-width: ,/Functional#num2str,/Functional#const,3,/Functional#concat,/Functional#const,; border-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,0,0,255,/bootstrap#string,<unbound>
Done
Done
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,[],/bootstrap#string,<unbound>
Done
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const, style="border-width: 3; border-color: rgb(0, 0, 255)",/Functional#concat,/Functional#const,,/bootstrap#string,<unbound>
Done
Done
Done
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const, class="vis-line-border",/Functional#concat,/Functional#const, style="border-width: 3; border-color: rgb(0, 0, 255)",/bootstrap#string,<unbound>
Iterating on /cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#lowered,/bootstrap#background,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],cpi#rgb,150,150,255,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>,/javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-lowered,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#background,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],cpi#rgb,150,150,255,<unbound>
Iterating on /javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-lowered,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#background,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],cpi#rgb,150,150,255,<unbound>
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-lowered,[],/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#pair,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-lowered,/bootstrap#string,/cedalionWeb/xml#genAttr,[],/Functional#pairType,/bootstrap#string,/bootstrap#string,/Functional#pair,<unbound>,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-lowered,/bootstrap#string,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#const,vis-lowered,/bootstrap#string,<unbound>
Done
Done
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,[],/bootstrap#string,<unbound>
Done
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const, class="vis-lowered",/Functional#concat,/Functional#const,,/bootstrap#string,<unbound>
Iterating on /cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#background,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],cpi#rgb,150,150,255,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>,/javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-background,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const,background-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,150,150,255,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],<unbound>
Iterating on /javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-background,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const,background-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,150,150,255,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],<unbound>
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-background,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const,background-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,150,150,255,[],/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#pair,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-background,/bootstrap#string,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const,background-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,150,150,255,[],/Functional#pairType,/bootstrap#string,/bootstrap#string,/Functional#pair,<unbound>,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-background,/bootstrap#string,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#const,vis-background,/bootstrap#string,<unbound>
Done
Done
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const,background-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,150,150,255,[],/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#pair,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const,background-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,150,150,255,/bootstrap#string,/cedalionWeb/xml#genAttr,[],/Functional#pairType,/bootstrap#string,/bootstrap#string,/Functional#pair,<unbound>,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const,background-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,150,150,255,/bootstrap#string,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const,background-color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,150,150,255,/bootstrap#string,<unbound>
Done
Done
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,[],/bootstrap#string,<unbound>
Done
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const, style="background-color: rgb(150, 150, 255)",/Functional#concat,/Functional#const,,/bootstrap#string,<unbound>
Done
Done
Done
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const, class="vis-background",/Functional#concat,/Functional#const, style="background-color: rgb(150, 150, 255)",/bootstrap#string,<unbound>
Iterating on /cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#vert,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>,/javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-vert,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTMLList,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],vis-vert-elem,<unbound>
Iterating on /javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-vert,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTMLList,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],vis-vert-elem,<unbound>
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-vert,[],/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#pair,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-vert,/bootstrap#string,/cedalionWeb/xml#genAttr,[],/Functional#pairType,/bootstrap#string,/bootstrap#string,/Functional#pair,<unbound>,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-vert,/bootstrap#string,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#const,vis-vert,/bootstrap#string,<unbound>
Done
Done
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,[],/bootstrap#string,<unbound>
Done
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const, class="vis-vert",/Functional#concat,/Functional#const,,/bootstrap#string,<unbound>
Iterating on /cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTMLList,.,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,.,/bootstrap#horiz,.,/bootstrap#color,/bootstrap#symbol,8607,cpi#rgb,150,150,0,.,/bootstrap#halfSize,/bootstrap#label,mondi,[],.,/bootstrap#horiz,.,/bootstrap#bold,/bootstrap#label,Bold,.,/bootstrap#italic,/bootstrap#label,Italic,.,/bootstrap#smaller,/bootstrap#horiz,.,/bootstrap#label,smaller,.,/bootstrap#smaller,/bootstrap#label,even smaller,[],[],[],vis-vert-elem,<unbound>
Iterating on /cedalionWeb/xml#generates,/cedalionWeb/xml#elem,/Functional#const,div,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-vert-elem,[],/cedalionWeb/visualization#toHTML,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>,/javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-vert-elem,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,<unbound>
Iterating on /javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-vert-elem,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,<unbound>
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-vert-elem,[],/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#pair,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-vert-elem,/bootstrap#string,/cedalionWeb/xml#genAttr,[],/Functional#pairType,/bootstrap#string,/bootstrap#string,/Functional#pair,<unbound>,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-vert-elem,/bootstrap#string,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#const,vis-vert-elem,/bootstrap#string,<unbound>
Done
Done
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,[],/bootstrap#string,<unbound>
Done
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const, class="vis-vert-elem",/Functional#concat,/Functional#const,,/bootstrap#string,<unbound>
Iterating on /cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#color,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],cpi#rgb,255,255,255,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>,/javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-color,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const,color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,255,255,255,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],<unbound>
Iterating on /javascript/statepred#pred,/Functional#eval,/Functional#const,div,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#conj,/javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-color,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const,color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,255,255,255,[],/bootstrap#string,<unbound>,/cedalionWeb/xml#generates,/cedalionWeb/visualization#toHTML,/bootstrap#horiz,.,/bootstrap#label,Hello,.,/bootstrap#label,World,[],<unbound>
Iterating on /javascript/statepred#stateEval,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,class,/javascript/statepred#expr,/Functional#const,vis-color,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const,color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,255,255,255,[],/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#pair,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-color,/bootstrap#string,/cedalionWeb/xml#genAttr,.,/cedalionWeb/xml#attr,style,/javascript/statepred#expr,/Functional#applyBinOp,/Functional#const,color: ,/Functional#concat,/cedalionWeb/visualization#rgbToText,cpi#rgb,255,255,255,[],/Functional#pairType,/bootstrap#string,/bootstrap#string,/Functional#pair,<unbound>,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#jsFunction,function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


},/javascript/statepred#expr,/Functional#const,vis-color,/bootstrap#string,/bootstrap#string,<unbound>
Iterating on /javascript/statepred#stateEval,/javascript/statepred#expr,/Functional#const,vis-color,/bootstrap#string,<unbound>
Done
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
[Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true]
Recent calls: [978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true

undefined:464
		throw e; 
        ^
Error: Logic operation timed out. Recent calls:
[978360] Call: /javascript/asyncproc#asyncProc(/javascript/statepred#for (s)(/javascript/statepred#pred(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978367] Call: builtin#true
[978367] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ]  )   )  ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [2]    ]  )   )  ;  



}), _)
[978369] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _), function (logic  ) { 
     (logic . unify  (logic . concreteValue  (vars [4]   )  , logic . concreteValue  (vars [0]   )  (logic . concreteValue  (vars [7]   )   )    )  && logic . concreteValue  (vars [5]   )  (logic  )  ) ;  


}), _)
[978373] Call: /Functional#eval(/Functional#const("vis-color"), /bootstrap#string, _)
[978376] Call: builtin#true
[978370] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[978372] Call: builtin#true
[1956702] Call: cjs#procedureCommand(/javascript/asyncproc#andThen(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	})), _)
[1956705] Call: builtin#true
[1956705] Call: cjs#procedureCommand(/javascript/jsLogic#foreach(/javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _), function (logic  ) { 
     __symbol2 = (__symbol2 + 1 ) ;  
     logic . runProcedure  (logic . concreteValue  (["/javascript/jsLogic#do" , vars [4]    ]  )   )  ;  



}), _)
[1956708] Call: /javascript/asyncproc#asyncProc(/javascript/asyncproc#sync(/javascript/asyncproc#log("Done")), /javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956711] Call: builtin#true
[1956711] Call: cjs#procedureCommand(/javascript/jsLogic#do(function (logic  ) { 
     logic . runProcedure  (logic . concreteValue  (vars [0]   )   )  ;  
     logic . runProcedure  (logic . concreteValue  (vars [1]   )   )  ;  



}), _)
[1956713] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/asyncproc#log("Done"), _)
[1956715] Call: builtin#true
[1956713] Call: cjs#procedureCommand(/javascript/jsLogic#do(function () {
		var stackLevel = logic.stack.length;

		// Recreate the variable assignments
		for(var i = 0; i < vars.length; i++) {
			vars[i].bind(vals[i], logic);
		}

		// Call the original function
		var result = func.apply(this, arguments);
		logic.resume(stackLevel); // Backtrack away
		return result;
	}), _)
[1956715] Call: builtin#true
    at Error (unknown source)
    at Logic.process (eval at <anonymous> (/home/boaz/cedalion/samples/cedalionWeb/runCedalion.js:10:10))
    at Logic.resume (eval at <anonymous> (/home/boaz/cedalion/samples/cedalionWeb/runCedalion.js:10:10))
    at eval at <anonymous> (/home/boaz/cedalion/samples/cedalionWeb/runCedalion.js:10:10)
    at eval at <anonymous> (/home/boaz/cedalion/samples/cedalionWeb/runCedalion.js:10:10)
    at eval at <anonymous> (/home/boaz/cedalion/samples/cedalionWeb/runCedalion.js:10:10)
    at eval at <anonymous> (/home/boaz/cedalion/samples/cedalionWeb/runCedalion.js:10:10)
    at Logic.process (eval at <anonymous> (/home/boaz/cedalion/samples/cedalionWeb/runCedalion.js:10:10))
    at Logic.resume (eval at <anonymous> (/home/boaz/cedalion/samples/cedalionWeb/runCedalion.js:10:10))
    at Logic.run (eval at <anonymous> (/home/boaz/cedalion/samples/cedalionWeb/runCedalion.js:10:10))
