logic . program  . add  (["/Functional#valueApplyBinOp"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#valueApplyBinOp" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#fail"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#switch"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#switch" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#evalCases" , vars [2]  , vars [1]  , vars [3]  , vars [5]  , vars [4]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , vars [1]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#evalCases" , "/Functional#case"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/Functional#evalCases" , ["/Functional#case" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , vars [4]  , vars [5]  , vars [6]        ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["=" , ["::" , vars [0]  , vars [3]     ] , ["::" , vars [5]  , vars [3]     ]    ] , ["/Functional#eval" , vars [1]  , vars [4]  , vars [6]      ] , ["/Functional#evalCases" , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]        ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#evalCases" , "/Functional#otherwise"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#evalCases" , ["/Functional#otherwise" , vars [0]    ] , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , vars [2]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#if"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#if" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , vars [0]  , ["/Functional#eval" , vars [1]  , vars [3]  , vars [4]      ] , ["/Functional#eval" , vars [2]  , vars [3]  , vars [4]      ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eq"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eq" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#equals" , ["::" , vars [3]  , vars [2]     ] , ["::" , vars [4]  , vars [2]     ]    ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [1]  , vars [2]  , vars [4]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#gt"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#gt" , vars [0]  , vars [1]  , ["/bootstrap#number"  ]     ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#greaterThen" , vars [2]  , vars [3]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [1]  , ["/bootstrap#number"  ] , vars [3]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/bootstrap#number"  ] , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#ge"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#ge" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#or" , ["/Functional#gt" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#eq" , vars [0]  , vars [1]  , vars [2]      ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#const"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#const" , vars [0]    ] , vars [1]  , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#wrapToConst" , "/Functional#wrap"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/Functional#wrapToConst" , ["/Functional#wrap" , vars [0]    ] , ["/Functional#where" , ["/Functional#const" , vars [1]    ] , vars [2]     ] , vars [3]  , vars [4]  , vars [5]  , vars [6]  , vars [7]          ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#wrapToConst" , vars [0]  , vars [1]  , ["builtin#true"  ] , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]  , vars [7]            ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#wrapToConstArgs" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#wrapToConstArgs" , ["[]"  ] , ["[]"  ] , vars [0]  , vars [0]  , vars [1]  , vars [1]  , vars [2]  , vars [2]           ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#wrapToConstArgs" , "." , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (17  )  ;  
     if ( logic . unify  (["/Functional#wrapToConstArgs" , ["." , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , ["." , ["::" , vars [3]  , vars [1]     ] , vars [4]     ] , vars [5]  , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]           ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#wrapToConstArgs" , vars [2]  , vars [4]  , vars [15]  , vars [6]  , vars [13]  , vars [8]  , vars [16]  , vars [10]           ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#if" , ["=" , ["::" , vars [0]  , vars [1]     ] , ["::" , ["/Functional#unwrap" , vars [11]    ] , vars [1]     ]    ] , ["," , ["/Functional#eval" , ["/Functional#concat" , ["/Functional#wrap" , "Value"   ] , ["/Functional#num2str" , ["/Functional#wrap" , vars [9]    ]   ]    ] , ["/bootstrap#string"  ] , vars [12]      ] , ["," , ["=" , ["::" , vars [13]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["::" , ["." , ["builtin#varName" , ["::" , vars [14]  , vars [1]     ] , vars [12]     ] , vars [7]     ] , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]    ] , ["," , ["=" , ["::" , vars [3]  , vars [1]     ] , ["::" , vars [14]  , vars [1]     ]    ] , ["," , ["=" , ["::" , vars [15]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , ["/Functional#eval" , vars [11]  , vars [1]  , vars [14]      ] , vars [5]     ] , ["/bootstrap#pred"  ]    ]    ] , ["builtin#succ" , vars [9]  , vars [16]     ]    ]    ]    ]    ] , ["/Functional#wrapToConst" , vars [0]  , vars [3]  , vars [5]  , vars [15]  , vars [1]  , vars [7]  , vars [13]  , vars [9]  , vars [16]            ]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#wrapToConst"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (12  )  ;  
     if ( logic . unify  (["/Functional#wrapToConst" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]  , vars [7]  , vars [8]            ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#compound" , ["::" , vars [0]  , vars [4]     ]   ] , ["," , ["/bootstrap#safeParseTerm" , ["::" , vars [0]  , vars [4]     ] , vars [9]  , vars [10]      ] , ["," , ["/Functional#wrapToConstArgs" , vars [10]  , vars [11]  , vars [2]  , vars [3]  , vars [5]  , vars [6]  , vars [7]  , vars [8]           ] , ["builtin#parseTerm" , ["::" , vars [1]  , vars [4]     ] , vars [9]  , vars [11]      ]    ]    ] , ["," , ["=" , ["::" , vars [0]  , vars [4]     ] , ["::" , vars [1]  , vars [4]     ]    ] , ["," , ["=" , ["::" , vars [3]  , ["/bootstrap#pred"  ]    ] , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ]    ] , ["," , ["=" , ["::" , vars [7]  , ["/bootstrap#number"  ]    ] , ["::" , vars [8]  , ["/bootstrap#number"  ]    ]    ] , ["=" , ["::" , vars [6]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]    ]    ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/Functional#eset" , vars [1]  , vars [2]     ] , vars [3]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [1]  , vars [3]  , vars [0]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (vars [2]  , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#minus"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#minus" , vars [0]  , vars [1]     ] , ["/bootstrap#number"  ] , vars [2]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#minus" , vars [3]  , vars [4]  , vars [2]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [1]  , ["/bootstrap#number"  ] , vars [4]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/bootstrap#number"  ] , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#mult"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#mult" , vars [0]  , vars [1]     ] , ["/bootstrap#number"  ] , vars [2]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#mult" , vars [3]  , vars [4]  , vars [2]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [1]  , ["/bootstrap#number"  ] , vars [4]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/bootstrap#number"  ] , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#div"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#div" , vars [0]  , vars [1]     ] , ["/bootstrap#number"  ] , vars [2]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#div" , vars [3]  , vars [4]  , vars [2]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [1]  , ["/bootstrap#number"  ] , vars [4]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/bootstrap#number"  ] , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#idiv"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#idiv" , vars [0]  , vars [1]     ] , ["/bootstrap#number"  ] , vars [2]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#idiv" , vars [3]  , vars [4]  , vars [2]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [1]  , ["/bootstrap#number"  ] , vars [4]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/bootstrap#number"  ] , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#modulus"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#modulus" , vars [0]  , vars [1]     ] , ["/bootstrap#number"  ] , vars [2]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#modulus" , vars [3]  , vars [4]  , vars [2]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [1]  , ["/bootstrap#number"  ] , vars [4]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/bootstrap#number"  ] , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#evalList" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#evalList" , ["[]"  ]   ] , ["/bootstrap#list" , vars [0]    ] , ["[]"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#evalList" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#evalList" , ["." , vars [0]  , vars [1]     ]   ] , ["/bootstrap#list" , vars [2]    ] , ["." , vars [3]  , vars [4]     ]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#evalList" , vars [1]    ] , ["/bootstrap#list" , vars [2]    ] , vars [4]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#apply"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#apply" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/Functional#eval" , vars [6]  , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [5]  , ["/Functional#func" , vars [1]  , vars [3]     ] , ["/Functional#lambda" , vars [2]  , vars [6]     ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#copyTerm" , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#func" , vars [1]  , vars [3]     ]   ]    ] , ["::" , vars [5]  , ["/Functional#expr" , ["/Functional#func" , vars [1]  , vars [3]     ]   ]    ]    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#plus"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#plus" , vars [0]  , vars [1]     ] , ["/bootstrap#number"  ] , vars [2]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#plus" , vars [3]  , vars [4]  , vars [2]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [1]  , ["/bootstrap#number"  ] , vars [4]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/bootstrap#number"  ] , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#first"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#first" , vars [0]    ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [3]  , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/Functional#seq" , vars [1]    ] , ["/Functional#seq" , vars [3]  , vars [4]     ]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#next"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#next" , vars [0]    ] , ["/Functional#seq" , vars [1]    ] , vars [2]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [4]  , ["/Functional#seq" , vars [1]    ] , vars [2]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/Functional#seq" , vars [1]    ] , ["/Functional#seq" , vars [3]  , vars [4]     ]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#num2str"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#num2str" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#termToString" , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ] , 1 , ["[]"  ] , vars [1]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/bootstrap#number"  ] , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#concat"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#concat" , vars [0]  , vars [1]     ] , ["/bootstrap#string"  ] , vars [2]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#strcat" , vars [3]  , vars [4]  , vars [2]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [1]  , ["/bootstrap#string"  ] , vars [4]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/bootstrap#string"  ] , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#sum"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#sum" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#sumList" , vars [5]    ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#findall" , vars [4]  , vars [2]  , ["," , vars [1]  , ["/Functional#eval" , vars [0]  , vars [2]  , vars [4]      ]    ] , vars [5]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#where"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#where" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (vars [1]  , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#wrap"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#wrap" , vars [0]    ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#compound" , ["::" , vars [0]  , vars [1]     ]   ] , ["builtin#if" , ["=" , ["::" , vars [0]  , vars [1]     ] , ["::" , ["/Functional#unwrap" , vars [3]    ] , vars [1]     ]    ] , ["/Functional#eval" , vars [3]  , vars [1]  , vars [2]      ] , ["," , ["/bootstrap#safeParseTerm" , ["::" , vars [0]  , vars [1]     ] , vars [4]  , vars [5]      ] , ["," , ["/Functional#evalArgs" , vars [5]  , vars [6]     ] , ["builtin#parseTerm" , ["::" , vars [2]  , vars [1]     ] , vars [4]  , vars [6]      ]    ]    ]     ] , ["=" , ["::" , vars [2]  , vars [1]     ] , ["::" , vars [0]  , vars [1]     ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#evalArgs" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/Functional#evalArgs" , ["[]"  ] , ["[]"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#unwrap"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#unwrap" , vars [0]    ] , vars [1]     ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#evalArgs" , "." , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#evalArgs" , ["." , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , ["." , ["::" , vars [3]  , vars [1]     ] , vars [4]     ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#evalArgs" , vars [2]  , vars [4]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , vars [0]    ] , vars [1]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/Functional#insertExpression"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/Functional#insertExpression" , vars [0]  , vars [1]     ] , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["/Functional#unwrap" , vars [2]    ] , vars [1]     ] , ["[]"  ]     ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#ancestorIsWrapper" , vars [0]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#ancestorIsWrapper" , "cpi#path"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/Functional#ancestorIsWrapper" , ["cpi#path" , vars [0]  , vars [1]     ]   ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["cpi#termAtPath" , ["cpi#path" , vars [0]  , vars [2]     ] , ["::" , ["/Functional#wrap" , vars [5]    ] , ["/Functional#expr" , vars [6]    ]    ] , vars [7]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#append" , vars [2]  , ["." , vars [3]  , vars [4]     ] , vars [1]  , ["/bootstrap#number"  ]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/Functional#generateXMLFile"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/Functional#generateXMLFile" , vars [0]  , vars [1]     ] , ["/bootstrap#doProc" , ["/bootstrap#generateFileForSet" , vars [0]  , ["/bootstrap#singleton" , vars [2]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#plus" , ["/Functional#wrap" , "<?xml version=\"1.0\"?>\n"   ] , ["/html#toText" , ["::" , vars [1]  , ["/html#xml"  ]    ]   ]    ] , ["/bootstrap#string"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#empty"  ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , ["." , vars [0]  , vars [1]     ] , ["/Test/bnf#token" , vars [0]    ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , vars [1]  , vars [2]     ] , vars [3]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [4]  , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , vars [1]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#finallyEvaluatesTo"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test#finallyEvaluatesTo" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Test#finallyEvaluatesTo" , vars [2]  , vars [1]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Test#evaluatesTo" , vars [0]  , vars [2]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#evaluatesTo" , "/Test#and"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test#evaluatesTo" , ["/Test#and" , vars [0]  , vars [1]     ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#finallyEvaluatesTo" , vars [0]  , ["/Test#true"  ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#evaluatesTo" , "/Test#and"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test#evaluatesTo" , ["/Test#and" , vars [0]  , vars [1]     ] , ["/Test#false"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#finallyEvaluatesTo" , vars [0]  , ["/Test#false"  ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#evaluatesTo" , "/Test#or"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test#evaluatesTo" , ["/Test#or" , vars [0]  , vars [1]     ] , ["/Test#true"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#finallyEvaluatesTo" , vars [0]  , ["/Test#true"  ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#evaluatesTo" , "/Test#or"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test#evaluatesTo" , ["/Test#or" , vars [0]  , vars [1]     ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#finallyEvaluatesTo" , vars [0]  , ["/Test#false"  ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#evaluatesTo" , "/Test#not"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Test#evaluatesTo" , ["/Test#not" , vars [0]    ] , ["/Test#true"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#finallyEvaluatesTo" , vars [0]  , ["/Test#false"  ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#evaluatesTo" , "/Test#not"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Test#evaluatesTo" , ["/Test#not" , vars [0]    ] , ["/Test#false"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#finallyEvaluatesTo" , vars [0]  , ["/Test#true"  ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#evaluatesTo" , "/Test#parens"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test#evaluatesTo" , ["/Test#parens" , vars [0]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#evaluatesTo" , vars [0]  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#evaluatesTo" , "/Test#goal"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test#evaluatesTo" , ["/Test#goal" , vars [0]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , vars [0]  , ["=" , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["::" , ["/Test#true"  ] , ["/Test#boolean"  ]    ]    ] , ["=" , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["::" , ["/Test#false"  ] , ["/Test#boolean"  ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#trans" , "/Test#prefix"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test#trans" , ["/Test#prefix" , vars [0]  , vars [1]     ] , vars [1]  , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#trans" , "/Test#alt"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test#trans" , ["/Test#alt" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#or" , ["/Test#trans" , vars [0]  , vars [2]  , vars [3]      ] , ["/Test#trans" , vars [1]  , vars [2]  , vars [3]      ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#reaches"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Test#reaches" , vars [0]  , ["[]"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#reaches"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test#reaches" , vars [0]  , ["." , vars [1]  , vars [2]     ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Test#reaches" , vars [3]  , vars [2]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Test#trans" , vars [0]  , vars [1]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#trans" , "/Test#cond"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test#trans" , ["/Test#cond" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Test#trans" , vars [0]  , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (vars [1]  , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#namespace"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/Test#namespace" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g4   = function () { 
     logic . call  (["builtin#charCodes" , vars [1]  , vars [6]     ] , next   )  ;  


}
 ; 
var g3   = function () { 
     logic . call  (["/bootstrap#append" , vars [6]  , ["." , vars [4]  , vars [7]     ] , vars [5]  , ["/bootstrap#number"  ]      ] , g4     )  ;  


}
 ; 

var g2   = function () { 
     logic . call  (["builtin#charCodes" , vars [2]  , vars [5]     ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["builtin#charCodes" , "#" , ["." , vars [4]  , ["[]"  ]    ]    ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#safeParseTerm" , vars [0]  , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/Test#doShowAllSignaturesForNamespace"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/Test#doShowAllSignaturesForNamespace" , vars [0]    ] , ["/bootstrap#showView" , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "namespace"   ] , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , vars [1]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vert" , vars [2]    ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]   ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#findall" , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8729   ] , ["." , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [3]  , vars [4]     ] , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["/bootstrap#visualization"  ] , ["," , ["/bootstrap#checkSignature" , vars [5]  , vars [6]     ] , ["," , ["/bootstrap#definitionOf" , vars [5]  , vars [3]  , ["/bootstrap#typeSignature"  ] , vars [7]  , vars [4]        ] , ["/Test#namespace" , vars [5]  , vars [1]     ]    ]    ] , vars [2]       ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Test#namespace" , vars [0]  , vars [1]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , ["/Test#numbered" , vars [3]    ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , vars [3]    ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , vars [2]    ]    ] , ["/Test#numbered" , vars [5]    ]    ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#succ" , vars [3]  , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/Test#splitStatementList"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/Test#splitStatementList" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#doAll" , ["." , ["/bootstrap#doProc" , ["cpi#edit" , vars [2]  , ["::" , ["[]"  ] , ["/bootstrap#list" , vars [3]    ]    ] , ["[]"  ]     ]   ] , ["." , ["/bootstrap#doProc" , ["/bootstrap#insertStatement" , ["/Test#statements" , vars [0]    ] , vars [2]  , vars [1]      ]   ] , ["[]"  ]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#p"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Test#p" , vars [0]  , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#t"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test#t" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Test#t" , vars [3]  , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Test#subState" , vars [0]  , vars [3]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#localName"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test#localName" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#localString" , vars [2]  , vars [1]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#safeParseTerm" , vars [0]  , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/Test#changeState"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/Test#changeState" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#doProc" , ["cpi#edit" , vars [3]  , ["::" , vars [4]  , ["/Test#state"  ]    ] , vars [2]      ]   ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#aliasString" , ["::" , vars [5]  , ["/Test#event"  ]    ] , vars [1]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Test#t" , vars [0]  , vars [5]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , vars [0]  , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#errorSolution" , "/bootstrap#typeMimatch"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#errorSolution" , ["/bootstrap#typeMimatch" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , vars [4]  , vars [1]     ] , vars [5]      ]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#checkAdapter" , ["::" , vars [6]  , vars [0]     ] , ["::" , vars [4]  , vars [1]     ]    ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [2]  , ["::" , vars [6]  , vars [7]     ] , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#setAtPathAndNotify"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#setAtPathAndNotify" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#doAll" , ["." , ["/bootstrap#doProc" , ["cpi#setAtPath" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["." , ["/bootstrap#notify" , ["::" , vars [3]  , ["cpi#path"  ]    ]   ] , ["[]"  ]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#containingStatementPath" , vars [0]  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#autoFix" , "/bootstrap#typeMimatch"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#autoFix" , ["/bootstrap#typeMimatch" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , ["/bootstrap#setAtPathAndNotify" , vars [2]  , ["::" , vars [4]  , vars [1]     ] , vars [5]      ]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#checkAdapter" , ["::" , vars [6]  , vars [0]     ] , ["::" , vars [4]  , vars [1]     ]    ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [2]  , ["::" , vars [6]  , vars [7]     ] , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#localString"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#localString" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["builtin#charCodes" , vars [1]  , vars [5]     ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["/bootstrap#append" , vars [4]  , ["." , vars [2]  , vars [5]     ] , vars [3]  , ["/bootstrap#number"  ]      ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["builtin#charCodes" , vars [0]  , vars [3]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#charCodes" , "#" , ["." , vars [2]  , ["[]"  ]    ]    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#localString" , vars [2]  , vars [1]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#parseTerm" , vars [0]  , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "annotation#changeMode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["annotation#changeMode" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , ["[]"  ] , ["/bootstrap#horiz" , ["." , ["/bootstrap#color" , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ]   ]   ] , ["cpi#rgb" , 192 , 192 , 192     ]    ] , ["." , ["cpi#vis" , ["::" , vars [0]  , vars [2]     ] , vars [4]     ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#descriptorContentWithDefault" , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["::" , ["cpi#default"  ] , ["/bootstrap#mode"  ]    ] , ["::" , vars [4]  , ["/bootstrap#mode"  ]    ] , vars [5]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , ["::" , ["/bootstrap#signature" , vars [1]  , ["[]"  ]    ] , ["/bootstrap#statement"  ]    ] , vars [2]  , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#error" , ["/bootstrap#wrongAtomicSignature" , vars [1]  , vars [0]  , vars [2]      ] , vars [2]     ]    ]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#statementPath" , vars [0]    ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["\\+" , ["builtin#var" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#autoFix" , "/bootstrap#wrongAtomicSignature"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#autoFix" , ["/bootstrap#wrongAtomicSignature" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , ["cpi#edit" , vars [1]  , ["::" , ["/bootstrap#defAtom" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#autocomplete"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#autocomplete" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g5   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
var g4   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#defaultRepresentation" , ["::" , vars [4]  , vars [5]     ]   ] , ["builtin#true"  ] , ["builtin#true"  ]     ] , g5     )  ;  


}
 ; 

var g3   = function () { 
     logic . call  (["builtin#strcat" , vars [1]  , vars [7]  , vars [3]      ] , g4     )  ;  


}
 ; 

var g2   = function () { 
     logic . call  (["/bootstrap#aliasString" , ["::" , vars [4]  , vars [5]     ] , vars [3]     ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/bootstrap#checkAdapter" , ["::" , vars [4]  , vars [5]     ] , ["::" , vars [2]  , vars [0]     ]    ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#checkSignature" , ["::" , vars [4]  , vars [5]     ] , vars [6]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#autocomplete" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["cpi#autocomplete" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g6   = function () { 
     logic . call  (["builtin#termToString" , ["::" , vars [6]  , vars [5]     ] , vars [8]  , 5 , ["[]"  ] , vars [3]        ] , next   )  ;  


}
 ; 
var g5   = function () { 
     logic . call  (["/bootstrap#defaultRepresentationForAll" , vars [10]    ] , g6     )  ;  


}
 ; 

var g4   = function () { 
     logic . call  (["/bootstrap#safeParseTerm" , ["::" , vars [6]  , vars [5]     ] , vars [9]  , vars [10]      ] , g5     )  ;  


}
 ; 

var g3   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#injectContent" , vars [6]  , vars [7]  , vars [5]  , vars [8]       ] , ["builtin#true"  ] , ["builtin#true"  ]     ] , g4     )  ;  


}
 ; 

var g2   = function () { 
     logic . call  (["/bootstrap#descriptorContent" , ["::" , vars [0]  , vars [5]     ] , ["::" , vars [7]  , vars [5]     ] , vars [8]      ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/bootstrap#autocomplete" , vars [5]  , vars [2]  , vars [6]  , vars [4]       ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#fixType" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["::" , vars [5]  , ["/bootstrap#type"  ]    ]    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#validateVarNames"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#validateVarNames" , vars [0]  , ["[]"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#validateVarNames"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#validateVarNames" , vars [0]  , ["." , ["builtin#varName" , vars [1]  , vars [2]     ] , vars [3]     ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#validateVarNames" , vars [0]  , vars [3]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#safeVarIn" , vars [1]  , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#safeVarIn" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#safeVarIn" , ["::" , vars [0]  , vars [1]     ] , ["::" , vars [2]  , vars [3]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#var" , ["::" , vars [2]  , vars [3]     ]   ] , ["," , ["builtin#equals" , ["::" , vars [0]  , vars [1]     ] , ["::" , vars [2]  , vars [3]     ]    ] , ["=" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["::" , vars [3]  , ["/bootstrap#type"  ]    ]    ]    ] , ["," , ["/bootstrap#safeParseTerm" , ["::" , vars [2]  , vars [3]     ] , vars [4]  , vars [5]      ] , ["/bootstrap#safeVarInList" , ["::" , vars [0]  , vars [1]     ] , vars [5]     ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#safeVarInList"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#safeVarInList" , vars [0]  , ["." , vars [1]  , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#safeVarIn" , vars [0]  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#safeVarInList"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#safeVarInList" , vars [0]  , ["." , vars [1]  , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#safeVarInList" , vars [0]  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#injectContent"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#injectContent" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/bootstrap#checkAdapter" , ["::" , vars [1]  , vars [2]     ] , ["::" , vars [4]  , vars [5]     ]    ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/bootstrap#checkSignature" , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [4]  , vars [5]     ] , vars [6]     ]    ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["\\+" , ["," , ["builtin#var" , ["::" , vars [1]  , vars [2]     ]   ] , ["\\+" , ["/bootstrap#varInVarNames" , ["::" , vars [1]  , vars [2]     ] , vars [3]     ]   ]    ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#defaultRepresentationForAll" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#defaultRepresentationForAll" , ["[]"  ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#defaultRepresentationForAll" , "." , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#defaultRepresentationForAll" , ["." , ["::" , vars [0]  , vars [1]     ] , vars [2]     ]   ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#defaultRepresentationForAll" , vars [2]    ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#if" , ["," , ["\\+" , ["builtin#var" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ]   ] , ["/bootstrap#defaultRepresentation" , ["::" , vars [0]  , vars [1]     ]   ]    ] , ["builtin#true"  ] , ["builtin#true"  ]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#or"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#or" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (vars [0]  , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#or"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#or" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (vars [1]  , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkClosure"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkClosure" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#fail"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkClosure"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkClosure" , vars [0]  , vars [1]  , vars [2]  , ["/bootstrap#error" , ["/bootstrap#missing" , vars [3]    ] , vars [2]     ]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#member" , vars [3]  , ["/bootstrap#closure"  ] , ["/bootstrap#statement"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/bootstrap#saturate" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , 0 , vars [4]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#member" , ["/bootstrap#requires" , vars [0]  , vars [3]     ] , ["/bootstrap#statements"  ] , ["/bootstrap#statement"  ]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#saturate"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#saturate" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#var" , vars [0]    ] , ["," , ["=" , vars [0]  , ["::" , ["/bootstrap#$SAT$" , vars [1]    ] , vars [3]     ]    ] , ["builtin#succ" , vars [1]  , vars [2]     ]    ] , ["builtin#if" , ["builtin#compound" , vars [0]    ] , ["," , ["builtin#parseTerm" , vars [0]  , vars [4]  , vars [5]      ] , ["/bootstrap#saturateList" , vars [5]  , vars [1]  , vars [2]      ]    ] , ["=" , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]    ]     ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#saturateList" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#saturateList" , ["[]"  ] , vars [0]  , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#saturateList" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#saturateList" , ["." , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#saturateList" , vars [1]  , vars [4]  , vars [3]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#saturate" , vars [0]  , vars [2]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkContext"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkContext" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#fail"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#subTerm"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#subTerm" , vars [0]  , vars [1]  , vars [0]  , vars [1]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#subElement" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#subElement" , ["." , vars [0]  , vars [1]     ] , ["cpi#path" , vars [2]  , vars [3]     ] , vars [0]  , ["cpi#path" , vars [2]  , ["." , 1 , vars [3]     ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#subElement" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#subElement" , ["." , vars [0]  , vars [1]     ] , ["cpi#path" , vars [2]  , vars [3]     ] , vars [4]  , ["cpi#path" , vars [2]  , ["." , vars [5]  , vars [3]     ]    ]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#succ" , vars [6]  , vars [5]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#subElement" , vars [1]  , ["cpi#path" , vars [2]  , vars [3]     ] , vars [4]  , ["cpi#path" , vars [2]  , ["." , vars [6]  , vars [3]     ]    ]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#subTerm" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#subTerm" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["/bootstrap#subTerm" , vars [7]  , vars [8]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["/bootstrap#subElement" , vars [6]  , vars [2]  , vars [7]  , vars [8]       ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/bootstrap#safeParseTerm" , ["::" , vars [0]  , vars [1]     ] , vars [5]  , vars [6]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#compound" , ["::" , vars [0]  , vars [1]     ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkWithContext"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkWithContext" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#fail"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , vars [1]  , vars [2]  , ["/bootstrap#marker" , vars [3]  , vars [4]     ]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/bootstrap#checkWithContext" , vars [5]  , vars [6]  , vars [2]  , vars [4]       ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/bootstrap#subTerm" , vars [1]  , vars [0]  , vars [6]  , vars [3]       ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#checkContext" , vars [1]  , vars [5]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#menuItem"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#menuItem" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#menuEntry"  ]    ] , "net.nansore.cedalion.eclipse.CedalionMenuItem"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#calculatePasteItems" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#calculatePasteItems" , ["[]"  ] , vars [0]  , vars [1]  , vars [2]  , vars [1]  , vars [2]         ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#calculatePasteItems" , "." , "/bootstrap#pair"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#calculatePasteItems" , ["." , ["/bootstrap#pair" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]  , vars [5]  , ["." , vars [0]  , vars [6]     ] , vars [7]         ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#calculatePasteItems" , vars [2]  , vars [3]  , vars [4]  , vars [8]  , vars [6]  , vars [7]         ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#mergeVarNames" , vars [5]  , vars [1]  , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#definitionOf"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#definitionOf" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , term   )  ) { 
     var g4   = function () { 
     logic . call  (["builtin#removeAnnotations" , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["::" , vars [5]  , ["/bootstrap#statement"  ]    ]    ] , next   )  ;  


}
 ; 
var g3   = function () { 
     logic . call  (["builtin#loadedStatement" , vars [3]  , vars [1]  , vars [4]      ] , g4     )  ;  


}
 ; 

var g2   = function () { 
     logic . call  (["/bootstrap#checkSignature" , vars [0]  , vars [6]     ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/bootstrap#canDefine" , vars [5]  , vars [0]  , vars [2]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["\\+" , ["builtin#var" , vars [0]    ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#definitionsVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#definitionsVisualization" , vars [0]  , vars [1]  , ["/bootstrap#raised" , ["/bootstrap#lineBorder" , ["/bootstrap#background" , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , "Aliases:"   ]   ] , ["." , ["cpi#vis" , ["::" , ["cpi#immediateDescriptor" , vars [2]  , ["[]"  ]    ] , ["/bootstrap#list" , ["/bootstrap#string"  ]   ]    ] , ["/bootstrap#vert"  ]    ] , ["[]"  ]    ]    ]   ] , vars [3]     ]   ] , ["cpi#rgb" , 192 , 255 , 192     ]    ] , 5 , ["cpi#rgb" , 192 , 255 , 192     ]     ]   ]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#findall" , vars [6]  , ["/bootstrap#string"  ] , ["/bootstrap#aliasString" , vars [0]  , vars [6]     ] , vars [2]       ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#findall" , ["/bootstrap#vert" , ["." , ["/bootstrap#bold" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [4]  , vars [1]     ] , ["/bootstrap#definitionType"  ]    ]   ]   ] , ["." , ["/bootstrap#lineBorder" , ["/bootstrap#lowered" , ["/bootstrap#background" , ["/bootstrap#vert" , vars [5]    ] , ["cpi#rgb" , 255 , 255 , 255     ]    ]   ] , 5 , ["cpi#rgb" , 192 , 255 , 192     ]     ] , ["[]"  ]    ]    ]   ] , ["/bootstrap#visualization"  ] , ["/bootstrap#definitionCategory" , vars [0]  , vars [4]  , vars [5]      ] , vars [3]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#definitionCategory"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#definitionCategory" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#findall" , ["/bootstrap#link" , ["/bootstrap#vert" , ["." , ["/bootstrap#italic" , ["/bootstrap#label" , vars [3]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [4]  , vars [5]     ] , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]   ] , vars [3]     ] , ["/bootstrap#visualization"  ] , ["/bootstrap#definitionOf" , vars [0]  , vars [4]  , vars [1]  , vars [3]  , vars [5]        ] , vars [2]       ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#checkSignature" , ["::" , vars [1]  , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#blankList" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#blankList" , ["[]"  ] , ["[]"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#blankList" , "." , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#blankList" , ["." , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , ["." , ["::" , vars [3]  , vars [1]     ] , vars [4]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#blankList" , vars [2]  , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#canDefine" , vars [4]  , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#loadedStatement" , vars [3]  , ["~>" , vars [0]  , vars [4]     ] , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , vars [1]  , vars [2]  , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#error" , vars [3]  , vars [2]     ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#catch" , ["/bootstrap#error" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]  , ["=" , ["::" , vars [3]  , ["/bootstrap#error"  ]    ] , ["::" , ["/bootstrap#exceptionThrown" , vars [4]    ] , ["/bootstrap#error"  ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#error"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#error" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#fail"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , vars [1]  , vars [2]  , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#error" , ["/bootstrap#conceptIsDeprecated" , vars [1]  , vars [0]     ] , vars [2]     ]    ]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#isDeprecated" , vars [1]    ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["\\+" , ["builtin#var" , vars [1]    ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#descriptorContent" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#descriptorContent" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["::" , vars [4]  , vars [3]     ] , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [4]  , vars [3]     ] , vars [5]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#descriptorContent" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#descriptorContent" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , ["::" , vars [0]  , vars [2]     ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#descriptorContentWithDefault"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#descriptorContentWithDefault" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#if" , ["builtin#var" , vars [4]    ] , ["=" , vars [2]  , vars [1]     ] , ["=" , vars [2]  , vars [4]     ]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#descriptorContent" , vars [0]  , vars [4]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termAtPath" , "cpi#path"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["cpi#termAtPath" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/bootstrap#selectVarNamesFor" , vars [2]  , vars [6]  , vars [3]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/bootstrap#subTerm" , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [1]  , vars [2]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#fileIsLoaded" , vars [0]  , vars [4]  , ["/bootstrap#model" , vars [5]  , vars [6]  , vars [7]      ]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#subTerm"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#subTerm" , vars [0]  , ["[]"  ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#subTerm"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#subTerm" , vars [0]  , ["." , vars [1]  , vars [2]     ] , vars [3]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/bootstrap#subTerm" , vars [6]  , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/bootstrap#element" , vars [6]  , vars [1]  , vars [5]  , ["/bootstrap#typedTerm"  ]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#safeParseTerm" , vars [0]  , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#safeParseTerm" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#safeParseTerm" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#if" , ["," , ["builtin#compound" , ["::" , vars [0]  , vars [1]     ]   ] , ["," , ["/bootstrap#checkSignature" , ["::" , vars [0]  , vars [1]     ] , vars [3]     ] , ["," , ["\\+" , ["/bootstrap#checkSignature" , vars [4]  , vars [3]  , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , ["\\+" , ["/bootstrap#checkSignature" , vars [4]  , vars [3]  , ["/bootstrap#signatureSizeMismatch"  ]     ]   ]    ]    ]    ] , ["/bootstrap#checkSignature" , ["::" , vars [0]  , vars [1]     ] , vars [3]     ] , ["=" , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ]    ]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#element"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#element" , vars [0]  , 1 , ["." , vars [0]  , vars [1]     ] , vars [2]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#element"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#element" , vars [0]  , vars [1]  , ["." , vars [2]  , vars [3]     ] , vars [4]       ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#element" , vars [0]  , vars [5]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#succ" , vars [5]  , vars [1]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#setElement"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#setElement" , 1 , ["." , vars [0]  , vars [1]     ] , vars [2]  , ["." , vars [2]  , vars [1]     ] , vars [3]        ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#setElement"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#setElement" , vars [0]  , ["." , vars [1]  , vars [2]     ] , vars [3]  , ["." , vars [1]  , vars [4]     ] , vars [5]        ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#setElement" , vars [6]  , vars [2]  , vars [3]  , vars [4]  , vars [5]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#succ" , vars [6]  , vars [0]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "cpi#setAtPath" , "cpi#path"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (12  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["cpi#setAtPath" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , ["/bootstrap#doAll" , ["." , ["/bootstrap#dbRemove" , ["/bootstrap#loadedFile" , vars [0]  , vars [4]  , vars [5]      ]   ] , ["." , ["/bootstrap#dbInsert" , ["/bootstrap#loadedFile" , vars [0]  , vars [6]  , ["/bootstrap#model" , vars [7]  , vars [8]  , vars [9]      ]     ]   ] , ["[]"  ]    ]    ]   ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/bootstrap#mergeVarNames" , vars [11]  , vars [3]  , vars [8]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/bootstrap#replaceSubterm" , ["::" , vars [10]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [1]  , vars [2]  , ["::" , vars [7]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#fileIsLoaded" , vars [0]  , vars [6]  , ["/bootstrap#model" , vars [10]  , vars [11]  , vars [9]      ]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#replaceSubterm"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#replaceSubterm" , vars [0]  , ["[]"  ] , vars [1]  , vars [1]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#replaceSubterm"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#replaceSubterm" , vars [0]  , ["." , vars [1]  , vars [2]     ] , vars [3]  , vars [4]       ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#parseTerm" , vars [4]  , vars [5]  , vars [7]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/bootstrap#replaceNthSubterm" , vars [6]  , vars [1]  , vars [2]  , vars [3]  , vars [7]        ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , vars [0]  , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#replaceNthSubterm" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#replaceNthSubterm" , ["." , vars [0]  , vars [1]     ] , 1 , vars [2]  , vars [3]  , ["." , vars [4]  , vars [1]     ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#replaceSubterm" , vars [0]  , vars [2]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#replaceNthSubterm" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#replaceNthSubterm" , ["." , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , vars [4]  , ["." , vars [0]  , vars [5]     ]       ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/bootstrap#replaceNthSubterm" , vars [1]  , vars [6]  , vars [3]  , vars [4]  , vars [5]        ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#succ" , vars [6]  , vars [2]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  ([">" , vars [2]  , 1    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "cpi#edit" , "cpi#path"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["cpi#edit" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , ["/bootstrap#doAll" , ["." , ["/bootstrap#doProc" , ["cpi#setAtPath" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , vars [4]      ]   ] , ["." , ["/bootstrap#dbRemove" , ["/bootstrap#editState" , vars [0]  , vars [5]  , vars [6]  , vars [7]       ]   ] , ["." , ["/bootstrap#dbInsert" , ["/bootstrap#editState" , vars [0]  , ["." , ["/bootstrap#editOp" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [8]  , vars [9]      ] , vars [10]     ] , ["[]"  ] , vars [11]       ]   ] , ["." , ["/bootstrap#notify" , ["::" , ["cpi#path" , vars [0]  , vars [12]     ] , ["cpi#path"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]    ] , term   )  ) { 
     var g4   = function () { 
     logic . call  (["/bootstrap#sanitizeVarNames" , vars [3]  , vars [4]     ] , next   )  ;  


}
 ; 
var g3   = function () { 
     logic . call  (["/bootstrap#containingStatementPath" , ["cpi#path" , vars [0]  , vars [1]     ] , ["cpi#path" , vars [0]  , vars [12]     ]    ] , g4     )  ;  


}
 ; 

var g2   = function () { 
     logic . call  (["builtin#if" , [">" , 0 , vars [14]     ] , ["=" , ["::" , vars [11]  , ["/bootstrap#number"  ]    ] , ["::" , 99999 , ["/bootstrap#number"  ]    ]    ] , ["builtin#succ" , vars [14]  , vars [11]     ]     ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["cpi#termAtPath" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [8]  , vars [9]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#editStateIs" , vars [0]  , vars [10]  , vars [13]  , vars [14]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "cpi#undo"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["cpi#undo" , vars [0]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#undo" , vars [0]    ] , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#undo"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#undo" , vars [0]    ] , ["/bootstrap#doAll" , ["." , ["/bootstrap#doProc" , ["cpi#setAtPath" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ]   ] , ["." , ["/bootstrap#assignFinal" , vars [4]  , ["-" , ["cpi#constExpr" , vars [5]    ] , ["cpi#constExpr" , 1   ]    ] , ["/bootstrap#number"  ]     ] , ["." , ["/bootstrap#dbRemove" , ["/bootstrap#editState" , vars [0]  , vars [6]  , vars [7]  , vars [8]       ]   ] , ["." , ["/bootstrap#dbInsert" , ["/bootstrap#editState" , vars [0]  , vars [9]  , ["." , ["/bootstrap#editOp" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [10]  , vars [11]      ] , vars [12]     ] , vars [4]       ]   ] , ["." , ["/bootstrap#notify" , ["::" , ["cpi#path" , vars [0]  , vars [13]     ] , ["cpi#path"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/bootstrap#containingStatementPath" , ["cpi#path" , vars [0]  , vars [1]     ] , ["cpi#path" , vars [0]  , vars [13]     ]    ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["cpi#termAtPath" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [10]  , vars [11]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#editStateIs" , vars [0]  , ["." , ["/bootstrap#editOp" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , vars [9]     ] , vars [12]  , vars [5]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#redo"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#redo" , vars [0]    ] , ["/bootstrap#doAll" , ["." , ["/bootstrap#doProc" , ["cpi#setAtPath" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ]   ] , ["." , ["/bootstrap#assignFinal" , vars [4]  , ["-" , ["cpi#constExpr" , vars [5]    ] , ["cpi#constExpr" , 1   ]    ] , ["/bootstrap#number"  ]     ] , ["." , ["/bootstrap#dbRemove" , ["/bootstrap#editState" , vars [0]  , vars [6]  , vars [7]  , vars [8]       ]   ] , ["." , ["/bootstrap#dbInsert" , ["/bootstrap#editState" , vars [0]  , ["." , ["/bootstrap#editOp" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [9]  , vars [10]      ] , vars [11]     ] , vars [12]  , vars [4]       ]   ] , ["." , ["/bootstrap#notify" , ["::" , ["cpi#path" , vars [0]  , vars [13]     ] , ["cpi#path"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/bootstrap#containingStatementPath" , ["cpi#path" , vars [0]  , vars [1]     ] , ["cpi#path" , vars [0]  , vars [13]     ]    ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["cpi#termAtPath" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [9]  , vars [10]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#editStateIs" , vars [0]  , vars [11]  , ["." , ["/bootstrap#editOp" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , vars [12]     ] , vars [5]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#isModified"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#isModified" , vars [0]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["\\+" , ["builtin#equals" , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["::" , 0 , ["/bootstrap#number"  ]    ]    ]   ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#editStateIs" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "cpi#func" , "cpi#termAsString" , "cpi#path"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["cpi#func" , ["cpi#termAsString" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , ["/bootstrap#string"  ]     ] , ["/bootstrap#termToString" , vars [4]  , vars [5]  , vars [2]  , vars [6]  , vars [3]        ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#fileIsLoaded" , vars [0]  , vars [7]  , ["/bootstrap#model" , vars [8]  , vars [9]  , vars [6]      ]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "cpi#editFromString" , "cpi#path"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["cpi#editFromString" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#doAll" , ["." , ["/bootstrap#stringToTerm" , vars [2]  , vars [3]  , vars [4]  , vars [5]       ] , ["." , ["/bootstrap#doProc" , ["cpi#edit" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [4]  , vars [5]      ]   ] , ["[]"  ]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#fileIsLoaded" , vars [0]  , vars [6]  , ["/bootstrap#model" , vars [7]  , vars [8]  , vars [3]      ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "cpi#func" , "/bootstrap#fileToModel" , "builtin#fileContent"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["cpi#func" , ["/bootstrap#fileToModel" , ["builtin#fileContent" , vars [0]  , vars [1]     ]   ] , vars [2]  , ["/bootstrap#model"  ]     ] , ["/bootstrap#assign" , vars [2]  , ["cpi#constExpr" , ["/bootstrap#model" , vars [3]  , vars [4]  , vars [1]      ]   ] , ["/bootstrap#model"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#fileModel" , vars [0]  , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#fileModel" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#fileModel" , ["[]"  ] , ["[]"  ] , ["[]"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#fileModel" , "." , "builtin#statement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#fileModel" , ["." , ["builtin#statement" , vars [0]  , vars [1]     ] , vars [2]     ] , ["." , vars [0]  , vars [3]     ] , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#mergeVarNames" , vars [1]  , vars [5]  , vars [4]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#fileModel" , vars [2]  , vars [3]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#mergeVarNames" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#mergeVarNames" , ["[]"  ] , vars [0]  , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#mergeVarNames" , "." , "builtin#varName" , "::"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#mergeVarNames" , ["." , ["builtin#varName" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#listMember" , ["builtin#varName" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#varName"  ] , vars [4]      ] , ["/bootstrap#mergeVarNames" , vars [3]  , vars [4]  , vars [5]      ] , ["/bootstrap#mergeVarNames" , vars [3]  , ["." , ["builtin#varName" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [4]     ] , vars [5]      ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varInVarNames" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#varInVarNames" , ["::" , vars [0]  , vars [1]     ] , ["." , ["builtin#varName" , ["::" , vars [2]  , vars [1]     ] , vars [3]     ] , vars [4]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#equals" , ["::" , vars [2]  , vars [1]     ] , ["::" , vars [0]  , vars [1]     ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varInVarNames" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#varInVarNames" , ["::" , vars [0]  , vars [1]     ] , ["." , vars [2]  , vars [3]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#varInVarNames" , ["::" , vars [0]  , vars [1]     ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "cpi#saveFile"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["cpi#saveFile" , vars [0]  , vars [1]     ] , ["/bootstrap#doAll" , ["." , ["/bootstrap#writeFile" , vars [1]  , vars [2]     ] , ["." , ["/bootstrap#dbRemove" , ["/bootstrap#editState" , vars [0]  , vars [3]  , vars [4]  , vars [5]       ]   ] , ["." , ["/bootstrap#dbInsert" , ["/bootstrap#editState" , vars [0]  , vars [6]  , vars [7]  , 0      ]   ] , ["[]"  ]    ]    ]    ]   ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/bootstrap#editStateIs" , vars [0]  , vars [6]  , vars [7]  , vars [10]       ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/bootstrap#modelToContent" , vars [9]  , vars [2]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#fileIsLoaded" , vars [0]  , vars [8]  , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#modelToContent" , "/bootstrap#model"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#modelToContent" , ["/bootstrap#model" , vars [0]  , vars [1]  , vars [2]      ] , ["builtin#fileContent" , vars [3]  , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#annotateStatements" , vars [0]  , vars [1]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#annotateStatements" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#annotateStatements" , ["[]"  ] , vars [0]  , ["[]"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#annotateStatements" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#annotateStatements" , ["." , vars [0]  , vars [1]     ] , vars [2]  , ["." , ["builtin#statement" , vars [0]  , vars [3]     ] , vars [4]     ]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#annotateStatements" , vars [1]  , vars [2]  , vars [4]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#selectVarNamesFor" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#selectVarNamesFor"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#selectVarNamesFor" , vars [0]  , ["[]"  ] , ["[]"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#selectVarNamesFor"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#selectVarNamesFor" , vars [0]  , ["." , ["builtin#varName" , ["::" , vars [1]  , vars [2]     ] , vars [3]     ] , vars [4]     ] , vars [5]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#varIn" , ["::" , vars [1]  , vars [2]     ] , vars [0]     ] , ["=" , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["::" , ["." , ["builtin#varName" , ["::" , vars [1]  , vars [2]     ] , vars [3]     ] , vars [6]     ] , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["::" , vars [6]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]    ]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#selectVarNamesFor" , vars [0]  , vars [4]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varIn" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#varIn" , ["::" , vars [0]  , vars [1]     ] , ["::" , vars [2]  , vars [3]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#var" , ["::" , vars [2]  , vars [3]     ]   ] , ["builtin#equals" , ["::" , vars [0]  , vars [1]     ] , ["::" , vars [2]  , vars [3]     ]    ] , ["," , ["builtin#compound" , ["::" , vars [2]  , vars [3]     ]   ] , ["," , ["builtin#parseTerm" , ["::" , vars [2]  , vars [3]     ] , vars [4]  , vars [5]      ] , ["/bootstrap#varInList" , ["::" , vars [0]  , vars [1]     ] , vars [5]     ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varInList" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#varInList" , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [2]  , vars [3]     ] , vars [4]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#varIn" , ["::" , vars [0]  , vars [1]     ] , ["::" , vars [2]  , vars [3]     ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varInList" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#varInList" , ["::" , vars [0]  , vars [1]     ] , ["." , vars [2]  , vars [3]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#varInList" , ["::" , vars [0]  , vars [1]     ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#rootType" , "/bootstrap#list" , "/bootstrap#statement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["cpi#rootType" , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#rootMode" , "/bootstrap#vert"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["cpi#rootMode" , ["/bootstrap#vert"  ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#forall"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#forall" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["," , vars [0]  , ["\\+" , vars [1]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , vars [2]  , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#topLevel"  ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check" , "cpi#path"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#check" , ["cpi#path" , vars [0]  , vars [1]     ] , ["::" , vars [2]  , vars [3]     ] , vars [4]  , ["/bootstrap#marker" , ["cpi#path" , vars [0]  , vars [1]     ] , ["/bootstrap#notTopLevel"  ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , vars [3]  , ["/bootstrap#type"  ]    ] , ["::" , ["/bootstrap#statement"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , ["::" , vars [1]  , vars [2]     ] , ["[]"  ] , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#imageMarker" , vars [3]    ]    ]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["=" , ["::" , vars [3]  , ["/bootstrap#image"  ]    ] , ["::" , vars [1]  , vars [2]     ]    ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#equals" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["::" , ["/bootstrap#image"  ] , ["/bootstrap#type"  ]    ]    ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["\\+" , ["builtin#var" , ["::" , vars [1]  , vars [2]     ]   ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#listMember"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#listMember" , vars [0]  , vars [1]  , ["." , vars [0]  , vars [2]     ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#listMember"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#listMember" , vars [0]  , vars [1]  , ["." , vars [2]  , vars [3]     ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#listMember" , vars [0]  , vars [1]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , vars [0]  , ["/bootstrap#horiz"  ] , vars [1]  , vars [2]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#userVisualization" , vars [0]  , ["/bootstrap#horizontal" , 91 , 93 , ["/bootstrap#label" , ","   ] , ["/bootstrap#label" , "[]"   ]      ] , vars [1]  , vars [2]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , vars [0]  , ["/bootstrap#vert"  ] , vars [1]  , vars [2]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#userVisualization" , vars [0]  , ["/bootstrap#vertical" , ["/bootstrap#symbol" , 8729   ] , ["/bootstrap#label" , "[]"   ] , ["/bootstrap#horiz" , ["[]"  ]   ]     ] , vars [1]  , vars [2]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , vars [0]  , ["cpi#default"  ] , vars [1]  , vars [2]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#userVisualization" , vars [0]  , ["/bootstrap#horiz"  ] , vars [1]  , vars [2]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#markersForPath" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#markersForPath" , ["[]"  ] , vars [0]  , ["[]"  ] , ["[]"  ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#markersForPath" , "." , "/bootstrap#marker"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#markersForPath" , ["." , ["/bootstrap#marker" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]  , vars [5]       ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#pathIsPrefix" , vars [3]  , vars [0]     ] , ["," , ["=" , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["::" , ["." , ["/bootstrap#marker" , vars [0]  , vars [1]     ] , vars [6]     ] , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["::" , vars [7]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ]    ]    ] , ["," , ["=" , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["::" , vars [6]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["::" , ["." , ["/bootstrap#marker" , vars [0]  , vars [1]     ] , vars [7]     ] , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ]    ]    ]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#markersForPath" , vars [2]  , vars [3]  , vars [6]  , vars [7]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#applyMarkers" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#applyMarkers" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , ["[]"  ]     ] , vars [2]     ] , vars [3]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#applyMarkers" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#applyMarkers" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , ["." , ["/bootstrap#marker" , vars [2]  , vars [3]     ] , vars [4]     ]     ] , vars [5]     ] , vars [6]  , vars [7]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#applyMarkers" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [4]      ] , vars [5]     ] , vars [8]  , vars [7]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#if" , ["=" , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["::" , vars [0]  , ["cpi#path"  ]    ]    ] , ["/bootstrap#applyMarker" , vars [3]  , vars [6]  , vars [8]      ] , ["=" , ["::" , vars [8]  , ["/bootstrap#visualization"  ]    ] , ["::" , vars [6]  , ["/bootstrap#visualization"  ]    ]    ]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#applyMarker"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#applyMarker" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#markerVisualization" , vars [0]  , vars [1]  , vars [2]      ] , ["builtin#true"  ] , ["=" , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , vars [1]  , vars [2]  , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#error" , vars [3]  , vars [2]     ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#checkError" , vars [1]  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkError"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkError" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#fail"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#if"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#if" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , vars [0]  , ["=" , ["::" , vars [3]  , ["/bootstrap#command"  ]    ] , ["::" , vars [1]  , ["/bootstrap#command"  ]    ]    ] , ["=" , ["::" , vars [3]  , ["/bootstrap#command"  ]    ] , ["::" , vars [2]  , ["/bootstrap#command"  ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#where"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#where" , vars [0]  , vars [1]     ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (vars [1]  , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , vars [3]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#visualizeDescriptor" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["cpi#visualizeDescriptor" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]  , vars [5]      ] , term   )  ) { 
     var g4   = function () { 
     logic . call  (["/bootstrap#true" , ["/bootstrap#applyMarkers" , vars [8]  , vars [9]  , vars [5]      ]   ] , next   )  ;  


}
 ; 
var g3   = function () { 
     logic . call  (["builtin#if" , ["builtin#var" , ["::" , vars [1]  , vars [6]     ]   ] , ["/bootstrap#visualizeVar" , ["::" , vars [1]  , vars [6]     ] , vars [7]  , vars [9]      ] , ["builtin#if" , ["builtin#number" , ["::" , vars [1]  , vars [6]     ]   ] , ["/bootstrap#visualizeNumber" , ["::" , vars [1]  , vars [6]     ] , vars [9]     ] , ["builtin#if" , ["builtin#string" , ["::" , vars [1]  , vars [6]     ]   ] , ["/bootstrap#visualizeString" , ["::" , vars [1]  , vars [6]     ] , vars [9]     ] , ["/bootstrap#visualizeCompound" , vars [8]  , ["::" , vars [1]  , vars [6]     ] , vars [4]  , vars [9]       ]     ]     ]     ] , g4     )  ;  


}
 ; 

var g2   = function () { 
     logic . call  (["/bootstrap#true" , ["/bootstrap#applyCheckers" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [6]     ] , ["::" , vars [1]  , vars [6]     ] , vars [7]  , vars [8]       ]   ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [1]  , vars [6]     ] , vars [7]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#fixType" , ["::" , vars [3]  , ["/bootstrap#type"  ]    ] , ["::" , vars [6]  , ["/bootstrap#type"  ]    ]    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#visualizeNumber" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#visualizeNumber" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#label" , vars [0]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#visualizeString" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#visualizeString" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#color" , ["/bootstrap#label" , vars [0]    ] , ["cpi#rgb" , 255 , 0 , 128     ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#visualizeCompound"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#visualizeCompound" , vars [0]  , ["::" , vars [1]  , vars [2]     ] , vars [3]  , vars [4]       ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["/bootstrap#true" , ["/bootstrap#visualizeTerm" , ["::" , vars [8]  , vars [2]     ] , vars [3]  , vars [4]      ]   ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["/bootstrap#true" , ["builtin#parseTerm" , ["::" , vars [8]  , vars [2]     ] , vars [5]  , vars [7]      ]   ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/bootstrap#true" , ["/bootstrap#subDescriptors" , vars [0]  , 0 , vars [6]  , vars [7]       ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#true" , ["builtin#parseTerm" , ["::" , vars [1]  , vars [2]     ] , vars [5]  , vars [6]      ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#applyCheckers" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#applyCheckers" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]  , vars [5]  , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [6]      ] , vars [3]     ]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#append" , vars [2]  , vars [8]  , vars [6]  , ["/bootstrap#locMarker"  ]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#findall" , vars [7]  , ["/bootstrap#locMarker"  ] , ["/bootstrap#check" , vars [0]  , vars [4]  , vars [5]  , vars [7]       ] , vars [8]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#subDescriptors"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#subDescriptors" , vars [0]  , vars [1]  , ["[]"  ] , ["[]"  ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#subDescriptors" , "::" , "cpi#descriptor" , "cpi#path"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["/bootstrap#subDescriptors" , ["::" , ["cpi#descriptor" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , vars [4]     ] , vars [5]  , ["." , ["::" , vars [6]  , vars [7]     ] , vars [8]     ] , ["." , ["::" , ["cpi#descriptor" , ["cpi#path" , vars [0]  , vars [9]     ] , vars [10]  , vars [11]      ] , vars [7]     ] , vars [12]     ]      ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["/bootstrap#subDescriptors" , ["::" , ["cpi#descriptor" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , vars [15]      ] , vars [4]     ] , vars [13]  , vars [8]  , vars [12]       ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["/bootstrap#markersForPath" , vars [3]  , ["cpi#path" , vars [0]  , vars [9]     ] , vars [11]  , vars [15]       ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/bootstrap#append" , vars [1]  , ["." , vars [13]  , ["[]"  ]    ] , vars [9]  , vars [14]       ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#succ" , vars [5]  , vars [13]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#pathIsPrefix" , "cpi#path"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#pathIsPrefix" , ["cpi#path" , vars [0]  , ["[]"  ]    ] , ["cpi#path" , vars [0]  , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#pathIsPrefix" , "cpi#path"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#pathIsPrefix" , ["cpi#path" , vars [0]  , ["." , vars [1]  , vars [2]     ]    ] , ["cpi#path" , vars [0]  , ["." , vars [1]  , vars [3]     ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#pathIsPrefix" , ["cpi#path" , vars [0]  , vars [2]     ] , ["cpi#path" , vars [0]  , vars [3]     ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#visualizeTerm"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#visualizeTerm" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#userVisualization" , vars [0]  , vars [1]  , ["[]"  ] , vars [2]       ] , ["builtin#true"  ] , ["builtin#if" , ["/bootstrap#userVisualization" , vars [0]  , vars [3]  , ["[]"  ] , vars [2]       ] , ["builtin#true"  ] , ["/bootstrap#defaultVisualization" , vars [0]  , vars [2]     ]     ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#defaultVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#defaultVisualization" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["=" , ["::" , vars [3]  , ["/bootstrap#list" , ["cpi#path"  ]   ]    ] , ["::" , ["[]"  ] , ["/bootstrap#list" , ["cpi#path"  ]   ]    ]    ] , ["=" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["::" , ["/bootstrap#label" , vars [4]    ] , ["/bootstrap#visualization"  ]    ]    ] , ["," , ["/bootstrap#argListForPathList" , vars [3]  , vars [5]     ] , ["=" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["::" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , vars [4]    ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#horiz" , vars [5]    ] , 40 , 41     ] , ["[]"  ]    ]    ]   ] , ["/bootstrap#visualization"  ]    ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#localName" , vars [2]  , vars [4]     ] , ["builtin#true"  ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [2]  , ["/bootstrap#string"  ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , vars [0]  , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#argListForPathList" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#argListForPathList" , ["." , vars [0]  , ["[]"  ]    ] , ["." , ["/bootstrap#vis" , vars [0]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#argListForPathList" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#argListForPathList" , ["." , vars [0]  , vars [1]     ] , ["." , ["/bootstrap#vis" , vars [0]    ] , ["." , ["/bootstrap#label" , ","   ] , vars [2]     ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#argListForPathList" , vars [1]  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#localName"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#localName" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#charCodes" , vars [1]  , vars [4]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/bootstrap#append" , vars [3]  , ["." , 35 , vars [4]     ] , vars [2]  , vars [5]       ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#charCodes" , vars [0]  , vars [2]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#append" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#append" , ["[]"  ] , vars [0]  , vars [0]  , vars [1]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#append" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#append" , ["." , vars [0]  , vars [1]     ] , vars [2]  , ["." , vars [0]  , vars [3]     ] , vars [4]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#append" , vars [1]  , vars [2]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#visualizeDescriptor" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#visualizeDescriptor" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#if" , ["builtin#var" , ["::" , vars [0]  , vars [5]     ]   ] , ["/bootstrap#true" , ["/bootstrap#visualizeVar" , ["::" , vars [0]  , vars [5]     ] , vars [1]  , vars [4]      ]   ] , ["builtin#if" , ["builtin#number" , ["::" , vars [0]  , vars [5]     ]   ] , ["/bootstrap#true" , ["/bootstrap#visualizeNumber" , ["::" , vars [0]  , vars [5]     ] , vars [4]     ]   ] , ["builtin#if" , ["builtin#string" , ["::" , vars [0]  , vars [5]     ]   ] , ["/bootstrap#true" , ["/bootstrap#visualizeString" , ["::" , vars [0]  , vars [5]     ] , vars [4]     ]   ] , ["/bootstrap#true" , ["/bootstrap#visualizeCompound" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [5]     ] , ["::" , vars [0]  , vars [5]     ] , vars [3]  , vars [4]       ]   ]     ]     ]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#fixType" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["::" , vars [5]  , ["/bootstrap#type"  ]    ]    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#subDescriptors" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#subDescriptors" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , ["." , ["::" , vars [4]  , vars [5]     ] , vars [6]     ] , ["." , ["::" , ["cpi#immediateDescriptor" , vars [4]  , vars [7]     ] , vars [5]     ] , vars [8]     ]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/bootstrap#true" , ["/bootstrap#subDescriptors" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [9]  , vars [6]  , vars [8]       ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/bootstrap#true" , ["/bootstrap#selectVarNamesFor" , ["::" , vars [4]  , vars [5]     ] , vars [1]  , vars [7]      ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#true" , ["builtin#succ" , vars [3]  , vars [9]     ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isDescriptor" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#isDescriptor" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isDescriptor" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#isDescriptor" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#fixType"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#fixType" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#compound" , vars [0]    ] , ["builtin#if" , ["/bootstrap#isDescriptor" , vars [0]    ] , ["/bootstrap#descriptorContent" , vars [0]  , vars [1]  , vars [2]      ] , ["," , ["builtin#parseTerm" , vars [0]  , vars [3]  , vars [4]      ] , ["," , ["/bootstrap#fixTypes" , vars [4]  , vars [5]     ] , ["builtin#parseTerm" , vars [1]  , vars [3]  , vars [5]      ]    ]    ]     ] , ["builtin#true"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#fixTypes" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#fixTypes" , ["[]"  ] , ["[]"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#fixTypes" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#fixTypes" , ["." , vars [0]  , vars [1]     ] , ["." , vars [2]  , vars [3]     ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#fixTypes" , vars [1]  , vars [3]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#fixType" , vars [0]  , vars [2]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/bootstrap#set" , vars [0]  , vars [1]     ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (vars [1]  , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , vars [0]    ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/bootstrap#listSet" , vars [1]    ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#listMember" , vars [0]  , vars [2]  , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#notMember"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#notMember" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["/bootstrap#member" , vars [0]  , vars [1]  , vars [2]      ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#fail"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["." , vars [0]  , vars [1]     ] , ["." , vars [2]  , vars [3]     ] , ["/bootstrap#signaturePlaceMismatch" , vars [0]  , vars [2]     ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["builtin#equals" , vars [0]  , vars [2]     ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["." , vars [0]  , vars [1]     ] , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["[]"  ] , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#signatureSizeMismatch"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["." , vars [0]  , vars [1]     ] , ["." , vars [2]  , vars [3]     ] , ["/bootstrap#nonVarInSignature" , vars [0]    ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["builtin#var" , vars [0]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , ["::" , ["/bootstrap#signature" , vars [1]  , vars [2]     ] , ["/bootstrap#statement"  ]    ] , vars [3]  , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#error" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [4]    ] , vars [3]     ]    ]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#varInVarNamesAndNotInTTerm" , vars [3]  , vars [1]  , vars [4]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["\\+" , ["builtin#var" , vars [1]    ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varInVarNamesAndNotInTTerm" , "." , "builtin#varName"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#varInVarNamesAndNotInTTerm" , ["." , ["builtin#varName" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["/bootstrap#safeVarIn" , vars [0]  , ["::" , vars [3]  , ["/bootstrap#typedTerm"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varInVarNamesAndNotInTTerm" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#varInVarNamesAndNotInTTerm" , ["." , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#varInVarNamesAndNotInTTerm" , vars [1]  , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["." , vars [0]  , vars [1]     ] , ["." , vars [2]  , vars [3]     ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#checkSignature" , vars [1]  , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkError" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkError" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , vars [1]     ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["/bootstrap#checkSignature" , vars [5]  , vars [3]  , vars [1]      ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["builtin#parseTerm" , vars [2]  , vars [4]  , vars [5]      ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["\\+" , ["builtin#var" , vars [2]    ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#removeAnnotations" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["::" , ["/bootstrap#signature" , vars [2]  , vars [3]     ] , ["/bootstrap#statement"  ]    ]    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , ["::" , ["/bootstrap#sigProj" , vars [1]  , vars [2]  , vars [3]      ] , ["/bootstrap#statement"  ]    ] , vars [4]  , vars [5]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#check" , vars [0]  , ["::" , ["/bootstrap#signature" , vars [1]  , vars [2]     ] , ["/bootstrap#statement"  ]    ] , vars [4]  , vars [5]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#symbolsMenu"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#symbolsMenu" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , [">" , vars [1]  , vars [0]     ] , ["," , ["builtin#succ" , vars [0]  , vars [4]     ] , ["," , ["/bootstrap#symbolsMenu" , vars [4]  , vars [1]  , vars [2]  , vars [5]       ] , ["=" , ["::" , vars [3]  , ["/bootstrap#visualization"  ]    ] , ["::" , ["/bootstrap#horiz" , ["." , ["/bootstrap#action" , ["/bootstrap#symbol" , vars [0]    ] , ["cpi#edit" , vars [2]  , ["::" , ["/bootstrap#symbol" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["[]"  ]     ]    ] , ["." , vars [5]  , ["[]"  ]    ]    ]   ] , ["/bootstrap#visualization"  ]    ]    ]    ]    ] , ["=" , ["::" , vars [3]  , ["/bootstrap#visualization"  ]    ] , ["::" , ["/bootstrap#action" , ["/bootstrap#symbol" , vars [0]    ] , ["cpi#edit" , vars [2]  , ["::" , ["/bootstrap#symbol" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["[]"  ]     ]    ] , ["/bootstrap#visualization"  ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#treeElement" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#treeElement" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#loadedStatement" , vars [2]  , ["~>" , vars [0]  , vars [1]     ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#treeElementVis"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#treeElementVis" , vars [0]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8729   ] , ["." , ["/bootstrap#expand" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [1]  , ["[]"  ]    ] , vars [2]     ]   ] , ["/bootstrap#vert" , ["." , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [1]  , ["[]"  ]    ] , vars [2]     ]   ] , ["." , ["/bootstrap#dynamicList" , vars [3]  , ["/bootstrap#treeElementVis" , ["::" , vars [1]  , vars [2]     ] , vars [3]     ]    ] , ["[]"  ]    ]    ]   ]    ] , ["[]"  ]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#treeElement" , vars [0]  , ["::" , vars [1]  , vars [2]     ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#definitionToSignature" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#definitionToSignature" , ["::" , vars [0]  , vars [1]     ] , ["::" , vars [2]  , vars [1]     ] , vars [3]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/bootstrap#safeParseTerm" , ["::" , vars [2]  , vars [1]     ] , vars [4]  , vars [3]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/bootstrap#defArgsToArgs" , vars [5]  , vars [3]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#safeParseTerm" , ["::" , vars [0]  , vars [1]     ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#defArgsToArgs" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#defArgsToArgs" , ["[]"  ] , ["[]"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#defArgsToArgs" , "." , "::" , "/bootstrap#ofType"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#defArgsToArgs" , ["." , ["::" , ["/bootstrap#ofType" , vars [0]  , vars [1]     ] , vars [1]     ] , vars [2]     ] , ["." , ["::" , vars [0]  , vars [1]     ] , vars [3]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#defArgsToArgs" , vars [2]  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]       ] , term   )  ) { 
     var g4   = function () { 
     logic . call  (["/bootstrap#listMember" , vars [3]  , ["/bootstrap#locMarker"  ] , vars [6]      ] , next   )  ;  


}
 ; 
var g3   = function () { 
     logic . call  (["/bootstrap#checkTypeConsistency" , vars [1]  , vars [4]  , vars [5]  , vars [6]  , vars [0]  , vars [2]         ] , g4     )  ;  


}
 ; 

var g2   = function () { 
     logic . call  (["/bootstrap#true" , ["/bootstrap#checkTypes" , vars [0]  , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , vars [2]  , ["[]"  ] , vars [5]        ]   ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["builtin#copyTerm" , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["::" , vars [4]  , ["/bootstrap#statement"  ]    ]    ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#statementPath" , vars [0]    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkTypeConsistency"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkTypeConsistency" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#structurallyEqual" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ]    ] , ["=" , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ]    ] , ["=" , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["::" , ["." , ["/bootstrap#marker" , vars [4]  , ["/bootstrap#error" , ["/bootstrap#typesNotFullyInstantiated" , vars [0]  , vars [4]     ] , vars [5]     ]    ] , vars [2]     ] , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#statementPath" , "cpi#path"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#statementPath" , ["cpi#path" , vars [0]  , ["." , 1 , ["[]"  ]    ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#statementPath" , "cpi#path"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#statementPath" , ["cpi#path" , vars [0]  , ["." , 2 , vars [1]     ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#statementPath" , ["cpi#path" , vars [0]  , vars [1]     ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkTypes"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkTypes" , vars [0]  , ["::" , vars [1]  , vars [2]     ] , vars [3]  , vars [4]  , vars [5]        ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#var" , ["::" , vars [1]  , vars [2]     ]   ] , ["/bootstrap#checkVarType" , vars [0]  , ["::" , vars [1]  , vars [2]     ] , vars [4]  , vars [5]       ] , ["builtin#if" , ["builtin#string" , ["::" , vars [1]  , vars [2]     ]   ] , ["/bootstrap#true" , ["/bootstrap#validateType" , vars [0]  , ["/bootstrap#string"  ] , vars [2]  , vars [0]  , vars [4]  , vars [5]         ]   ] , ["builtin#if" , ["builtin#number" , ["::" , vars [1]  , vars [2]     ]   ] , ["/bootstrap#true" , ["/bootstrap#validateType" , vars [0]  , ["/bootstrap#number"  ] , vars [2]  , vars [0]  , vars [4]  , vars [5]         ]   ] , ["/bootstrap#true" , ["/bootstrap#checkCompoundType" , vars [0]  , ["::" , vars [1]  , vars [2]     ] , vars [3]  , vars [4]  , vars [5]        ]   ]     ]     ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#validateType"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#validateType" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#safeUnify" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["::" , ["." , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#error" , ["/bootstrap#typeMimatch" , vars [1]  , vars [2]  , vars [0]      ] , ["[]"  ]    ]    ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkVarType"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkVarType" , vars [0]  , ["::" , vars [1]  , vars [2]     ] , vars [3]  , ["." , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#typeOf" , ["::" , vars [1]  , vars [2]     ] , vars [4]     ]    ] , vars [5]     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#findVarType" , vars [3]  , ["::" , vars [1]  , vars [2]     ] , vars [6]  , vars [7]       ] , ["/bootstrap#validateType" , vars [0]  , vars [6]  , vars [2]  , vars [7]  , vars [3]  , vars [5]         ] , ["=" , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["::" , ["." , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#varType" , ["::" , vars [1]  , vars [2]     ]   ]    ] , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#findVarType" , "." , "/bootstrap#marker"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#findVarType" , ["." , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#varType" , ["::" , vars [1]  , vars [2]     ]   ]    ] , vars [3]     ] , vars [4]  , vars [2]  , vars [0]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#equals" , ["::" , vars [1]  , vars [2]     ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#findVarType" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#findVarType" , ["." , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#findVarType" , vars [1]  , vars [2]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkCompoundType"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#checkCompoundType" , vars [0]  , ["::" , vars [1]  , vars [2]     ] , vars [3]  , vars [4]  , vars [5]        ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#true" , ["/bootstrap#checkArgTypes" , vars [0]  , 1 , vars [7]  , vars [3]  , vars [8]  , vars [5]         ]   ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#checkSignature" , ["::" , vars [1]  , vars [6]     ] , vars [7]     ] , ["/bootstrap#true" , ["/bootstrap#validateType" , vars [0]  , vars [6]  , vars [2]  , vars [0]  , vars [4]  , vars [8]         ]   ] , ["," , ["/bootstrap#true" , ["builtin#parseTerm" , ["::" , vars [1]  , vars [2]     ] , vars [9]  , vars [7]      ]   ] , ["/bootstrap#true" , ["=" , ["::" , vars [8]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["::" , ["." , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#error" , ["/bootstrap#missingSignature" , ["::" , vars [1]  , vars [2]     ] , vars [7]  , vars [0]      ] , vars [3]     ]    ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ]    ]   ]    ]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkArgTypes"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkArgTypes" , vars [0]  , vars [1]  , ["[]"  ] , vars [2]  , vars [3]  , vars [3]         ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkArgTypes" , "cpi#path"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["/bootstrap#checkArgTypes" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , ["." , vars [3]  , vars [4]     ] , vars [5]  , vars [6]  , vars [7]         ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["/bootstrap#checkArgTypes" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [10]  , vars [4]  , vars [5]  , vars [9]  , vars [7]         ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["builtin#succ" , vars [2]  , vars [10]     ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/bootstrap#true" , ["/bootstrap#checkTypes" , ["cpi#path" , vars [0]  , vars [8]     ] , vars [3]  , vars [5]  , vars [6]  , vars [9]        ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#append" , vars [1]  , ["." , vars [2]  , ["[]"  ]    ] , vars [8]  , ["/bootstrap#number"  ]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#true"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#true" , vars [0]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , vars [0]  , ["builtin#true"  ] , ["builtin#throw" , ["/bootstrap#false" , vars [0]    ]   ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#containingStatementPath" , "cpi#path"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#containingStatementPath" , ["cpi#path" , vars [0]  , ["[]"  ]    ] , ["cpi#path" , vars [0]  , ["[]"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#containingStatementPath" , "cpi#path"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#containingStatementPath" , ["cpi#path" , vars [0]  , ["." , 2 , vars [1]     ]    ] , ["cpi#path" , vars [0]  , ["." , 2 , vars [2]     ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#containingStatementPath" , ["cpi#path" , vars [0]  , vars [1]     ] , ["cpi#path" , vars [0]  , vars [2]     ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#containingStatementPath" , "cpi#path"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#containingStatementPath" , ["cpi#path" , vars [0]  , ["." , 1 , vars [1]     ]    ] , ["cpi#path" , vars [0]  , ["." , 1 , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , ["::" , ["/bootstrap#unitTest" , vars [1]    ] , ["/bootstrap#statement"  ]    ] , vars [2]  , ["/bootstrap#marker" , vars [0]  , vars [3]     ]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#catch" , ["builtin#if" , vars [1]  , ["builtin#if" , ["builtin#structurallyEqual" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["::" , vars [4]  , ["/bootstrap#pred"  ]    ]    ] , ["builtin#fail"  ] , ["=" , ["::" , vars [3]  , ["/bootstrap#marker"  ]    ] , ["::" , ["/bootstrap#tip" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#unitTest" , vars [1]    ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]   ] , ["/bootstrap#marker"  ]    ]    ]     ] , ["=" , ["::" , vars [3]  , ["/bootstrap#marker"  ]    ] , ["::" , ["/bootstrap#error" , ["/bootstrap#failedTest" , vars [1]    ] , vars [2]     ] , ["/bootstrap#marker"  ]    ]    ]     ] , vars [5]  , ["=" , ["::" , vars [3]  , ["/bootstrap#marker"  ]    ] , ["::" , ["/bootstrap#error" , ["/bootstrap#exceptionThrown" , vars [5]    ] , vars [2]     ] , ["/bootstrap#marker"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#copyTerm" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["::" , vars [4]  , ["/bootstrap#pred"  ]    ]    ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["\\+" , ["builtin#var" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showFailedTests"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showFailedTests"  ] , ["/bootstrap#showView" , ["/bootstrap#vert" , vars [0]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#findall" , ["/bootstrap#vert" , ["." , ["/bootstrap#italic" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [1]  , vars [2]     ] , ["/bootstrap#string"  ]    ]   ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [3]  , vars [2]     ] , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , ":"   ] , ["." , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [4]  , vars [2]     ] , ["/bootstrap#error"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["/bootstrap#visualization"  ] , ["/bootstrap#testHasFailed" , vars [3]  , vars [2]  , vars [1]  , vars [4]       ] , vars [0]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#testHasFailed"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#testHasFailed" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#check" , ["/bootstrap#noPath"  ] , ["::" , ["/bootstrap#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["[]"  ] , ["/bootstrap#marker" , ["/bootstrap#noPath"  ] , ["/bootstrap#error" , vars [3]  , ["[]"  ]    ]    ]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#loadedStatement" , vars [2]  , ["/bootstrap#unitTest" , vars [0]    ] , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#sanitizeVarNames" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#sanitizeVarNames" , ["[]"  ] , ["[]"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#sanitizeVarNames" , "." , "builtin#varName"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#sanitizeVarNames" , ["." , ["builtin#varName" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#if" , ["builtin#var" , vars [0]    ] , ["=" , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["::" , ["." , ["builtin#varName" , vars [0]  , vars [1]     ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]    ] , ["=" , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]    ]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#sanitizeVarNames" , vars [2]  , vars [4]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#autoFix"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#autoFix" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#fail"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#visualizeSolutions" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#visualizeSolutions" , ["[]"  ] , vars [0]  , ["[]"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#visualizeSolutions" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#visualizeSolutions" , ["." , vars [0]  , vars [1]     ] , vars [2]  , ["." , ["/bootstrap#lineBorder" , ["/bootstrap#action" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , ">"   ] , ["." , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [2]     ] , ["/bootstrap#procedure"  ]    ]   ] , ["[]"  ]    ]    ]   ] , vars [0]     ] , 1 , ["cpi#rgb" , 0 , 0 , 0     ]     ] , vars [3]     ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#visualizeSolutions" , vars [1]  , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#insertStatement"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#insertStatement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#doProc" , ["cpi#edit" , vars [3]  , ["::" , ["." , vars [0]  , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [5]      ]   ]    ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["/bootstrap#true" , ["/bootstrap#mergeVarNames" , vars [2]  , vars [7]  , vars [5]      ]   ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["/bootstrap#true" , ["cpi#termAtPath" , vars [3]  , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [7]      ]   ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/bootstrap#true" , ["/bootstrap#parentPath" , vars [6]  , vars [3]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#true" , ["/bootstrap#containingStatementPath" , vars [1]  , vars [6]     ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#parentPath" , "cpi#path"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#parentPath" , ["cpi#path" , vars [0]  , vars [1]     ] , ["cpi#path" , vars [0]  , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#append" , vars [2]  , ["." , vars [3]  , ["[]"  ]    ] , vars [1]  , ["/bootstrap#number"  ]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#color"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#color" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#raised" , ["/bootstrap#tooltip" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#color"  ]    ]   ] , ["." , ["/bootstrap#color" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , vars [3]     ] , ["[]"  ]    ]    ]   ] , ["/bootstrap#label" , "color"   ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#descriptorContentWithDefault" , ["::" , vars [1]  , ["/bootstrap#color"  ]    ] , ["::" , ["cpi#rgb" , 0 , 0 , 0     ] , ["/bootstrap#color"  ]    ] , ["::" , vars [3]  , ["/bootstrap#color"  ]    ] , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#lineBorder"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#lineBorder" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#raised" , ["/bootstrap#tooltip" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#color"  ]    ]   ] , ["." , ["/bootstrap#label" , ","   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#lowered" , ["/bootstrap#lineBorder" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , vars [4]  , vars [5]      ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["/bootstrap#label" , "lineBorder"   ]    ]   ]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#descriptorContentWithDefault" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["::" , 3 , ["/bootstrap#number"  ]    ] , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , vars [7]       ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#descriptorContentWithDefault" , ["::" , vars [2]  , ["/bootstrap#color"  ]    ] , ["::" , ["cpi#rgb" , 0 , 0 , 0     ] , ["/bootstrap#color"  ]    ] , ["::" , vars [5]  , ["/bootstrap#color"  ]    ] , vars [6]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#symbol"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#symbol" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#symbol" , vars [2]    ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#descriptorContentWithDefault" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["::" , 63 , ["/bootstrap#number"  ]    ] , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#background"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#background" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#tooltip" , ["/bootstrap#lineBorder" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#color"  ]    ]   ] , ["." , ["/bootstrap#lowered" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , vars [3]     ]   ] , ["[]"  ]    ]    ]   ] , 1 , ["cpi#rgb" , 0 , 0 , 0     ]     ] , ["/bootstrap#label" , "background"   ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#descriptorContentWithDefault" , ["::" , vars [1]  , ["/bootstrap#color"  ]    ] , ["::" , ["cpi#rgb" , 220 , 220 , 220     ] , ["/bootstrap#color"  ]    ] , ["::" , vars [3]  , ["/bootstrap#color"  ]    ] , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#brackets"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#brackets" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , vars [4]  , vars [5]      ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , ":"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#descriptorContentWithDefault" , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["::" , 41 , ["/bootstrap#number"  ]    ] , ["::" , vars [5]  , ["/bootstrap#number"  ]    ] , vars [7]       ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/bootstrap#descriptorContentWithDefault" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["::" , 40 , ["/bootstrap#number"  ]    ] , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , vars [6]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#box"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#box" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#box" , vars [2]    ] , ["." , ["/bootstrap#pivot" , ["/bootstrap#horiz" , ["." , ["/bootstrap#box" , vars [2]    ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#box" , vars [2]    ] , ["[]"  ]    ]    ]    ]   ]   ] , ["." , ["/bootstrap#box" , vars [2]    ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#descriptorContentWithDefault" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["::" , 1 , ["/bootstrap#number"  ]    ] , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varNameMacro"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#varNameMacro" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#fail"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#visualizeVar"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#visualizeVar" , vars [0]  , ["." , ["builtin#varName" , vars [1]  , vars [2]     ] , vars [3]     ] , ["/bootstrap#italic" , ["/bootstrap#color" , vars [4]  , ["cpi#rgb" , 0 , 128 , 0     ]    ]   ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#varNameMacro" , vars [2]  , vars [4]     ] , ["builtin#true"  ] , ["=" , ["::" , vars [4]  , ["/bootstrap#visualization"  ]    ] , ["::" , ["/bootstrap#label" , vars [2]    ] , ["/bootstrap#visualization"  ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#visualizeVar"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#visualizeVar" , vars [0]  , ["[]"  ] , ["/bootstrap#italic" , ["/bootstrap#color" , ["/bootstrap#label" , "_"   ] , ["cpi#rgb" , 0 , 128 , 0     ]    ]   ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/cedalionWeb/crud#update" , "/cedalionWeb/crud#myModel"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/cedalionWeb/crud#update" , ["/cedalionWeb/crud#myModel"  ] , vars [0]  , ["/bootstrap#number"  ] , vars [1]  , ["/bootstrap#number"  ]       ] , vars [2]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (((("Updating: " + logic . concreteTerm  (terms [0]  , []   )  ) + "to" ) + logic . concreteTerm  (terms [1]  , []   )  )  )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  



}
  , "terms" : [vars [0]  , vars [1]  , vars [2]     ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/cedalionWeb/crud#delete" , "/cedalionWeb/crud#myModel"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/cedalionWeb/crud#delete" , ["/cedalionWeb/crud#myModel"  ] , vars [0]  , ["/bootstrap#number"  ]     ] , vars [1]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (("Deleting: " + logic . concreteTerm  (terms [0]  , []   )  )  )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  



}
  , "terms" : [vars [0]  , vars [1]    ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/cedalionWeb/jquery#onServer"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/cedalionWeb/jquery#onServer" , vars [0]    ] , vars [1]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 0   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )    ]   )   )  ;  


}
  , "terms" : [vars [1]  , ["/javascript/statepred#whenever" , ["/cedalionWeb/jquery#ajaxQuery" , ["/javascript/asyncproc#doProc" , vars [0]    ]   ] , {"expr" : 0   } , {"expr" : 1   }     ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/jquery#animate"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , vars [4]  , ["." , ["/cedalionWeb/jquery#runAfterGen" , vars [5]    ] , vars [6]     ]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  ($ (("#" + logic . concreteTerm  (terms [1]  , []   )  )  )   )  ;  


}
  , "terms" : [vars [2]  , vars [0]    ]    }  )  , vars [5]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , vars [1]  , vars [3]  , vars [4]  , vars [6]       ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["=" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["::" , (Math . floor  ((Math . random  ()  * 1000000000 )  )  + "" ) , ["/bootstrap#string"  ]    ]    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/jquery#animate"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]  , vars [5]  , vars [6]       ] , term   )  ) { 
     var g4   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , vars [1]  , vars [4]  , ["." , ["/cedalionWeb/jquery#runAfterGen" , vars [9]    ] , vars [5]     ] , vars [6]       ] , next   )  ;  


}
 ; 
var g3   = function () { 
     logic . call  (["builtin#copyTerm" , ["::" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [$ (("#" + logic . concreteTerm  (terms [0]  , []   )  )  )   ]   )   )  ;  


}
  , "terms" : [vars [0]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [2]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["::" , {"expr" : 0   } , ["/cedalionWeb/visualization#jQueryElem"  ]    ]    ] , vars [3]     ]   ]    }  )  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["::" , vars [9]  , ["/javascript/jsLogic#jsCommand"  ]    ]    ] , g4     )  ;  


}
 ; 

var g2   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#const" , vars [7]    ] , ["/Functional#concat"  ] , ["/Functional#num2str" , ["/Functional#const" , vars [8]    ]   ]     ] , ["/bootstrap#string"  ] , vars [0]      ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/javascript/jsLogic#length" , vars [5]  , vars [8]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#listMember" , ["/cedalionWeb/jquery#uniqueName" , vars [7]    ] , ["/cedalionWeb/xml#annotation"  ] , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb#implies"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/cedalionWeb#implies" , vars [0]  , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isDescriptor" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#isDescriptor" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#descriptorContent" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#descriptorContent" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["::" , vars [0]  , vars [3]     ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#propagateEditableDescriptors" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#propagateEditableDescriptors" , ["[]"  ] , vars [0]  , ["[]"  ] , vars [1]  , vars [2]        ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#propagateEditableDescriptors" , "." , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#propagateEditableDescriptors" , ["." , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , ["." , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [3]  , vars [4]      ] , vars [1]     ] , vars [5]     ] , vars [6]  , vars [7]        ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["=" , ["::" , vars [4]  , ["/cedalionWeb/visualization#handle"  ]    ] , ["::" , {"parent" : logic . concreteValue  (vars [6]   )   , "index" : logic . concreteValue  (vars [8]   )   , "notify" : function () { 
     this . parent  . notify  ()  ;  


}
  , "get" : function () { 
     return this . parent  . get  ()  [this . index ]  ;  


}
  , "set" : function (__symbol9  ) { 
     this . parent  . get  ()  [this . index ]  = __symbol9 ;  
     var __symbol10 = this . replaceFunc  ;  
     setTimeout (function () { 
     __symbol10 (__symbol9  )  ;  


}
 , 0   )  ;  
     this . notify  ()  ;  





}
       } , ["/cedalionWeb/visualization#handle"  ]    ]    ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/cedalionWeb/visualization#propagateEditableDescriptors" , vars [2]  , vars [3]  , vars [5]  , vars [6]  , vars [8]        ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#succ" , vars [7]  , vars [8]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#propagateDescriptor" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#propagateDescriptor" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["::" , vars [4]  , vars [3]     ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#compound" , ["::" , vars [0]  , vars [3]     ]   ] , ["," , ["builtin#parseTerm" , ["::" , vars [0]  , vars [3]     ] , vars [5]  , vars [6]      ] , ["," , ["/cedalionWeb/visualization#propagateEditableDescriptors" , vars [6]  , vars [1]  , vars [7]  , vars [2]  , 0       ] , ["builtin#parseTerm" , ["::" , vars [4]  , vars [3]     ] , vars [5]  , vars [7]      ]    ]    ] , ["=" , ["::" , vars [4]  , vars [3]     ] , ["::" , vars [0]  , vars [3]     ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isDescriptor" , "::" , "/cedalionWeb/visualization#fastEdit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#isDescriptor" , ["::" , ["/cedalionWeb/visualization#fastEdit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#descriptorContent" , "::" , "/cedalionWeb/visualization#fastEdit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#descriptorContent" , ["::" , ["/cedalionWeb/visualization#fastEdit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["::" , vars [0]  , vars [4]     ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#propagateFastEditDescriptor" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#propagateFastEditDescriptor" , ["[]"  ] , vars [0]  , vars [1]  , vars [2]  , vars [3]  , ["[]"  ]        ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#propagateFastEditDescriptor" , "." , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#propagateFastEditDescriptor" , ["." , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]  , vars [5]  , vars [6]  , ["." , ["::" , ["/cedalionWeb/visualization#fastEdit" , vars [0]  , vars [7]  , vars [5]  , vars [6]       ] , vars [1]     ] , vars [8]     ]        ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["/cedalionWeb/visualization#propagateFastEditDescriptor" , vars [2]  , vars [3]  , vars [10]  , vars [5]  , vars [6]  , vars [8]         ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["builtin#succ" , vars [4]  , vars [10]     ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["builtin#charCodes" , vars [7]  , vars [9]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/bootstrap#append" , vars [3]  , ["." , vars [4]  , ["[]"  ]    ] , vars [9]  , ["/bootstrap#number"  ]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#propagateDescriptor" , "::" , "/cedalionWeb/visualization#fastEdit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#propagateDescriptor" , ["::" , ["/cedalionWeb/visualization#fastEdit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["::" , vars [5]  , vars [4]     ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#compound" , ["::" , vars [0]  , vars [4]     ]   ] , ["," , ["/bootstrap#safeParseTerm" , ["::" , vars [0]  , vars [4]     ] , vars [6]  , vars [7]      ] , ["," , ["builtin#charCodes" , vars [1]  , vars [8]     ] , ["," , ["/cedalionWeb/visualization#propagateFastEditDescriptor" , vars [7]  , vars [8]  , 65 , vars [2]  , vars [3]  , vars [9]         ] , ["builtin#parseTerm" , ["::" , vars [5]  , vars [4]     ] , vars [6]  , vars [9]      ]    ]    ]    ] , ["=" , ["::" , vars [5]  , vars [4]     ] , ["::" , vars [0]  , vars [4]     ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#removeDescriptorsFromType" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#removeDescriptorsFromType" , ["::" , vars [0]  , vars [1]     ] , ["::" , vars [0]  , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#fixType" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#visualizeNumber" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#visualizeNumber" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["/bootstrap#label" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#num2str" , ["/Functional#const" , vars [0]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#visualizeString" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#visualizeString" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["/bootstrap#label" , vars [0]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#propagateImmediateDescriptors" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#propagateImmediateDescriptors" , ["[]"  ] , vars [0]  , ["[]"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#propagateImmediateDescriptors" , "." , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#propagateImmediateDescriptors" , ["." , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , ["." , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [3]     ] , vars [1]     ] , vars [4]     ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/visualization#propagateImmediateDescriptors" , vars [2]  , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#propagateDescriptor" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#propagateDescriptor" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , ["::" , vars [3]  , vars [2]     ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#compound" , ["::" , vars [0]  , vars [2]     ]   ] , ["," , ["builtin#parseTerm" , ["::" , vars [0]  , vars [2]     ] , vars [4]  , vars [5]      ] , ["," , ["/cedalionWeb/visualization#propagateImmediateDescriptors" , vars [5]  , vars [1]  , vars [6]      ] , ["builtin#parseTerm" , ["::" , vars [3]  , vars [2]     ] , vars [4]  , vars [6]      ]    ]    ] , ["=" , ["::" , vars [3]  , vars [2]     ] , ["::" , vars [0]  , vars [2]     ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#visualizeCompound"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#visualizeCompound" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#visualizeTerm" , vars [3]  , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/cedalionWeb/visualization#propagateDescriptor" , vars [0]  , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#visualizeDescriptor"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#visualizeDescriptor" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["builtin#var" , vars [5]    ] , ["/cedalionWeb/visualization#visualizeVar" , vars [5]  , vars [4]  , vars [2]      ] , ["builtin#if" , ["builtin#number" , vars [5]    ] , ["/cedalionWeb/visualization#visualizeNumber" , vars [5]  , vars [2]     ] , ["builtin#if" , ["builtin#string" , vars [5]    ] , ["/cedalionWeb/visualization#visualizeString" , vars [5]  , vars [2]     ] , ["/bootstrap#visualizeTerm" , vars [5]  , vars [1]  , vars [2]      ]     ]     ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/cedalionWeb/visualization#removeDescriptorsFromType" , vars [3]  , vars [5]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/cedalionWeb/visualization#propagateDescriptor" , vars [0]  , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "cpi#vis" , "::"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["cpi#vis" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ]   ] , vars [3]  , vars [4]  , vars [5]       ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/jquery#animate" , vars [8]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-term"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [8]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [6]    ]     ] , vars [9]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/cedalionWeb/visualization#bind" , vars [7]  , vars [9]  , vars [2]      ]  ]    }  )       ] , vars [3]  , vars [4]  , vars [5]       ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/cedalionWeb/visualization#removeDescriptorsFromType" , ["::" , vars [0]  , vars [1]     ] , vars [7]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/cedalionWeb/visualization#visualizeDescriptor" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#varName"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#varName" , vars [0]  , ["." , ["builtin#varName" , vars [1]  , vars [2]     ] , vars [3]     ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#equals" , vars [0]  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#varName"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#varName" , vars [0]  , ["." , vars [1]  , vars [2]     ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/visualization#varName" , vars [0]  , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#varNameVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#varNameVisualization" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["/cedalionWeb/visualization#specialVarNameVisualization" , vars [0]  , vars [1]     ] , ["builtin#true"  ] , ["=" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["::" , ["/bootstrap#label" , vars [0]    ] , ["/bootstrap#visualization"  ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#visualizeVar"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#visualizeVar" , vars [0]  , vars [1]  , ["/bootstrap#italic" , ["/bootstrap#color" , vars [2]  , ["cpi#rgb" , 0 , 128 , 0     ]    ]   ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["," , ["\\+" , ["builtin#var" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ]   ] , ["/cedalionWeb/visualization#varName" , vars [0]  , vars [1]  , vars [3]      ]    ] , ["/cedalionWeb/visualization#varNameVisualization" , vars [3]  , vars [2]     ] , ["=" , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["::" , ["/bootstrap#label" , "_"   ] , ["/bootstrap#visualization"  ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/xml#for"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#for" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#xmlList" , vars [5]    ] , vars [2]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#findall" , vars [1]  , ["/cedalionWeb/xml#xml"  ] , vars [0]  , vars [5]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/xml#list"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#list" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#applyBinOp" , ["/cedalionWeb/xml#gen2" , vars [0]  , vars [3]  , vars [5]      ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#gen2" , vars [1]  , vars [5]  , vars [4]      ]     ] , ["/bootstrap#string"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/xml#elem"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , vars [4]  , vars [5]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#const" , "<"   ] , ["/Functional#concat"  ] , vars [0]      ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#genAttrTrans" , vars [1]    ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , ">"   ]     ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#gen2" , vars [2]  , vars [4]  , vars [5]      ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , "</"   ]     ] , ["/Functional#concat"  ] , vars [0]      ] , ["/Functional#concat"  ] , ["/Functional#const" , ">"   ]     ] , ["/bootstrap#string"  ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#elemToElem2" , "/cedalionWeb/xml#elem"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#elemToElem2" , ["/cedalionWeb/xml#elem" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#elem2" , vars [0]  , vars [3]  , vars [2]      ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/cedalionWeb/xml#transformAttrs" , vars [1]  , vars [3]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["\\+" , ["builtin#var" , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ]   ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#transformAttrs" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#transformAttrs" , ["[]"  ] , ["[]"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#transformAttrs" , "." , "/cedalionWeb/xml#attr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#transformAttrs" , ["." , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , vars [2]     ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , vars [0]    ] , vars [3]     ] , vars [4]     ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/cedalionWeb/xml#transformAttrs" , vars [2]  , vars [4]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#if" , ["=" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["::" , ["/javascript/statepred#expr" , vars [3]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]    ] , ["builtin#true"  ] , ["=" , ["::" , vars [3]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["::" , ["/Functional#const" , "?"   ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]    ]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]  , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#tip" , ["cpi#edit" , vars [0]  , ["::" , vars [3]  , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]      ]   ]    ]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/cedalionWeb/xml#elemToElem2" , vars [1]  , vars [3]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["\\+" , ["builtin#var" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/xml#elem2"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , vars [4]  , vars [5]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#const" , "<"   ] , ["/Functional#concat"  ] , vars [0]      ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#genAttr2" , vars [1]    ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , ">"   ]     ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#gen2" , vars [2]  , vars [4]  , vars [5]      ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , "</"   ]     ] , ["/Functional#concat"  ] , vars [0]      ] , ["/Functional#concat"  ] , ["/Functional#const" , ">"   ]     ] , ["/bootstrap#string"  ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/xml#empty"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#empty"  ] , "" , vars [0]  , vars [0]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/cedalionWeb/xml#xmlEncode"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/cedalionWeb/xml#xmlEncode" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/xml#str"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#str" , vars [0]    ] , vars [1]  , vars [2]  , vars [2]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/cedalionWeb/xml#xmlEncode" , ["/Functional#const" , vars [0]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/xml#entity"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#entity" , vars [0]    ] , vars [1]  , vars [2]  , vars [2]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#const" , "&#"   ] , ["/Functional#concat"  ] , ["/Functional#num2str" , vars [0]    ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , ";"   ]     ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/debugging#generateVarNames"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/debugging#generateVarNames" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#var" , vars [0]    ] , ["," , ["/Functional#eval" , ["/Functional#concat" , ["/Functional#wrap" , "V"   ] , ["/Functional#num2str" , ["/Functional#wrap" , vars [3]    ]   ]    ] , ["/bootstrap#string"  ] , vars [5]      ] , ["," , ["builtin#succ" , vars [3]  , vars [4]     ] , ["builtin#if" , ["\\+" , ["/bootstrap#varInVarNames" , vars [0]  , vars [1]     ]   ] , ["=" , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["::" , ["." , ["builtin#varName" , vars [0]  , vars [5]     ] , vars [1]     ] , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]    ] , ["=" , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]    ]     ]    ]    ] , ["," , ["/bootstrap#safeParseTerm" , vars [0]  , vars [6]  , vars [7]      ] , ["/debugging#generateVarNamesList" , vars [7]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/debugging#generateVarNamesList" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/debugging#generateVarNamesList" , ["[]"  ] , vars [0]  , vars [0]  , vars [1]  , vars [1]        ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/debugging#generateVarNamesList" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/debugging#generateVarNamesList" , ["." , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , vars [4]  , vars [5]        ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/debugging#generateVarNamesList" , vars [1]  , vars [6]  , vars [3]  , vars [7]  , vars [5]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/debugging#generateVarNames" , vars [0]  , vars [2]  , vars [6]  , vars [4]  , vars [7]        ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/debugging#completeVarNames"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/debugging#completeVarNames" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/debugging#generateVarNames" , vars [0]  , vars [1]  , vars [2]  , 0 , vars [3]        ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/html#showXml"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/html#showXml" , vars [0]    ] , ["/bootstrap#showView" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [1]  , ["[]"  ]    ] , ["/html#xml"  ]    ]   ]   ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#ground" , ["::" , vars [0]  , ["/Functional#expr" , ["/html#xml"  ]   ]    ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#xmlEncode"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#xmlEncode" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/html#encodeCharCodes" , vars [3]  , vars [1]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#charCodes" , vars [2]  , vars [3]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , ["/bootstrap#string"  ] , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/html#encodeCharCodes" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/html#encodeCharCodes" , ["[]"  ] , ""    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/html#encodeCharCodes" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/html#encodeCharCodes" , ["." , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["builtin#strcat" , vars [5]  , vars [6]  , vars [2]      ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["/html#encodeCharCodes" , vars [1]  , vars [6]     ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["builtin#if" , ["/html#isEntity" , vars [3]  , vars [4]     ] , ["/Functional#eval" , ["/Functional#concat" , ["/Functional#wrap" , "&"   ] , ["/Functional#concat" , ["/Functional#wrap" , vars [4]    ] , ["/Functional#wrap" , ";"   ]    ]    ] , ["/bootstrap#string"  ] , vars [5]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#string"  ]    ] , ["::" , vars [3]  , ["/bootstrap#string"  ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#charCodes" , vars [3]  , ["." , vars [0]  , ["[]"  ]    ]    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/html#person"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/html#person" , "mike"   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/html#person"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/html#person" , "aaron"   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/html#person"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/html#person" , "william"   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#listComp"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#listComp" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , vars [1]    ] , vars [3]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#evalList" , vars [4]    ] , ["/bootstrap#list" , vars [1]    ] , vars [3]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#findall" , vars [0]  , ["/Functional#expr" , vars [1]    ] , vars [2]  , vars [4]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "cpi#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["cpi#vis" , vars [0]  , vars [1]     ]   ] , ["/html#xml"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#var" , vars [0]    ] , ["=" , ["::" , vars [2]  , ["/html#xml"  ]    ] , ["::" , ["xml#element" , "span" , ["[]"  ] , ["." , ["xml#string" , "_"   ] , ["[]"  ]    ]     ] , ["/html#xml"  ]    ]    ] , ["builtin#if" , ["builtin#string" , vars [0]    ] , ["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "span" , ["[]"  ] , ["." , ["xml#string" , ["/Functional#unwrap" , ["/html#asString" , vars [0]    ]   ]   ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [2]      ] , ["," , ["/bootstrap#visualizeTerm" , vars [0]  , vars [1]  , vars [3]      ] , ["/Functional#eval" , ["/html#vis2html" , vars [3]    ] , ["/html#xml"  ] , vars [2]      ]    ]     ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/html#writeHtmlFor"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/html#writeHtmlFor" , vars [0]  , vars [1]     ] , ["/bootstrap#doProc" , ["/Functional#generateXMLFile" , vars [1]  , vars [2]     ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#vis" , vars [0]    ]   ] , ["/html#xml"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#ajaxEval" , "/javascript/ajax#ajaxExpr"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cjs#ajaxEval" , ["/javascript/ajax#ajaxExpr" , vars [0]  , vars [1]     ] , vars [2]  , vars [0]  , vars [1]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#ajaxEval" , "/javascript/ajax#applyBinOp"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["cjs#ajaxEval" , ["/javascript/ajax#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , ["/Functional#applyBinOp" , vars [4]  , vars [1]  , vars [5]      ] , vars [6]       ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/bootstrap#append" , vars [7]  , vars [8]  , vars [6]  , ["/javascript/ajax#request"  ]      ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["cjs#ajaxEval" , vars [2]  , vars [3]  , vars [5]  , vars [8]       ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cjs#ajaxEval" , vars [0]  , vars [3]  , vars [4]  , vars [7]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/asyncproc#wait"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#wait" , vars [0]    ] , vars [1]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     setTimeout (function (terms  ) { 
     return logic . preserveContext  (function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  )  ;  


}
 (logic . zeros  (0  )  . concat  (logic . concreteValue  (terms . slice  (0 , 1   )   )   )   )  , logic . concreteTerm  (terms [1]  , []   )    )  ;  


}
  , "terms" : [vars [1]  , vars [0]    ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/asyncproc#sync"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#sync" , vars [0]    ] , vars [1]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  



}
  , "terms" : [vars [0]  , vars [1]    ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/asyncproc#catch"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#catch" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol4 = logic . ctx  ("exceptionHandler"  )  . getValue  (logic  )  ;  
     var __symbol5 = function (__symbol6  ) { 
     var __symbol7 = false ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [__symbol6 , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     __symbol7 = true ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )    ]   )   )  ;  
     if ( (__symbol7 == false ) ) { 
     if ( (typeof (__symbol4)  == "function" ) ) { 
     __symbol4 (__symbol6  )  ;  


} else {
    // Empty
}
 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  



} else {
    // Empty
}
 




}
 ;  
     logic . ctx  ("exceptionHandler"  )  . bind  (__symbol5 , logic   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , []   )   )  ;  





}
  , "terms" : [["/javascript/asyncproc#andThen" , vars [2]  , vars [3]     ] , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [1]  , ["/javascript/jsLogic#exception"  ]    ] , ["::" , {"expr" : 0   } , ["/javascript/jsLogic#exception"  ]    ]    ] , {"expr" : 1   }    ] , vars [3]  , ["/javascript/asyncproc#andThen" , vars [0]  , vars [3]     ]     ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/asyncproc#throw"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#throw" , vars [0]    ] , vars [1]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol2 = logic . ctx  ("exceptionHandler"  )  . getValue  (logic  )  ;  
     if ( (typeof (__symbol2)  == "function" ) ) { 
     __symbol2 (logic . concreteTerm  (terms [0]  , []   )   )  ;  


} else {
    // Empty
}
 



}
  , "terms" : [vars [0]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/asyncproc#block" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#block" , ["[]"  ]   ] , vars [0]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [vars [0]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/asyncproc#block" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#block" , ["." , vars [0]  , vars [1]     ]   ] , vars [2]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/javascript/asyncproc#andThen" , vars [0]  , ["/javascript/asyncproc#andThen" , ["/javascript/asyncproc#block" , vars [1]    ] , vars [2]     ]    ]  ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#hasSpecialRendering" , "::" , "/javascript#new"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript#hasSpecialRendering" , ["::" , ["/javascript#new" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#plus" , ["/Functional#applyBinOp" , ["/Functional#const" , "(new "   ] , ["/Functional#concat"  ] , ["/javascript#toString" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ]     ] , ["/Functional#const" , ")"   ]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#hasSpecialRendering" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript#hasSpecialRendering" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#hasSpecialRendering" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript#hasSpecialRendering" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#num2str" , ["/Functional#const" , vars [0]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#hasSpecialRendering" , "::" , "/bootstrap#$SAT$"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript#hasSpecialRendering" , ["::" , ["/bootstrap#$SAT$" , vars [0]    ] , ["/javascript#symbol"  ]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#concat" , ["/Functional#const" , "__symbol"   ] , ["/Functional#num2str" , ["/Functional#const" , vars [0]    ]   ]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["builtin#debug"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["builtin#debug" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#statementsWoAnnotations"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#statementsWoAnnotations" , vars [0]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#findall" , vars [1]  , ["/bootstrap#statement"  ] , ["," , ["builtin#loadedStatement" , vars [2]  , vars [3]  , vars [4]      ] , ["builtin#removeAnnotations" , ["::" , vars [3]  , ["/bootstrap#statement"  ]    ] , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ]    ]    ] , vars [0]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#statement"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#statement" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/javascript/jsLogic#statement" , vars [0]  , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/javascript/jsLogic#statementsWoAnnotations" , vars [2]    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#statement"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#statement" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#listMember" , vars [0]  , ["/bootstrap#statement"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#statement"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#statement" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["/javascript/jsLogic#statement" , vars [4]  , vars [3]  , vars [2]      ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["/javascript/jsLogic#statement" , ["~>" , vars [4]  , vars [0]     ] , vars [3]  , vars [2]      ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["builtin#succ" , vars [3]  , vars [1]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  ([">" , vars [1]  , 0    ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#deepIndex"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#deepIndex" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["builtin#compound" , vars [0]    ] , ["," , ["builtin#parseTerm" , vars [0]  , vars [2]  , vars [3]      ] , ["," , ["/Functional#eval" , ["/javascript/jsLogic#length" , vars [3]    ] , ["/bootstrap#number"  ] , vars [4]      ] , ["," , ["builtin#if" , ["=" , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["::" , ["." , vars [5]  , vars [6]     ] , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ]    ] , ["/javascript/jsLogic#deepIndex" , vars [5]  , vars [7]     ] , ["=" , ["::" , vars [7]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["::" , ["[]"  ] , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ]    ]     ] , ["=" , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["::" , ["." , ["/javascript#str" , vars [2]    ] , vars [7]     ] , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ]    ]    ]    ]    ] , ["=" , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["::" , ["[]"  ] , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#hasSpecialRendering" , "::" , "/javascript/jsLogic#inlineTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript#hasSpecialRendering" , ["::" , ["/javascript/jsLogic#inlineTerm" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript#toString" , ["::" , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "concreteValue"    ] , ["." , vars [2]  , ["[]"  ]    ]    ] , ["/javascript#expr"  ]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript/jsLogic#jsTerm" , vars [0]    ] , ["/javascript#expr"  ] , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#length" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#length" , ["[]"  ] , 0    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#length" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#length" , ["." , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#succ" , vars [3]  , vars [2]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/javascript/jsLogic#length" , vars [1]  , vars [3]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#specialExtractTerms" , "::" , "/javascript/jsLogic#inlineTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#specialExtractTerms" , ["::" , ["/javascript/jsLogic#inlineTerm" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["::" , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "concreteTerm"    ] , ["." , ["/javascript#arrayElement" , ["/javascript#varExpr" , ["/javascript/jsLogic#terms"  ]   ] , ["/javascript#const" , vars [1]    ]    ] , ["." , ["/javascript#array" , vars [2]    ] , ["[]"  ]    ]    ]    ] , ["/javascript#expr"  ]    ] , vars [3]  , vars [4]       ] , term   )  ) { 
     var g4   = function () { 
     logic . call  (["/bootstrap#append" , vars [6]  , ["." , vars [8]  , ["[]"  ]    ] , vars [4]  , ["/javascript#expr"  ]      ] , next   )  ;  


}
 ; 
var g3   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript/jsLogic#jsTerm" , vars [5]    ] , ["/javascript#expr"  ] , vars [8]      ] , g4     )  ;  


}
 ; 

var g2   = function () { 
     logic . call  (["/javascript/jsLogic#length" , vars [2]  , vars [7]     ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/javascript/jsLogic#length" , vars [6]  , vars [1]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/javascript/jsLogic#extractJsExpr" , vars [0]  , vars [5]  , ["[]"  ] , vars [2]  , vars [3]  , vars [6]         ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#specialExtractTerms" , "::" , "/javascript/jsLogic#runProcedure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#specialExtractTerms" , ["::" , ["/javascript/jsLogic#runProcedure" , vars [0]    ] , ["/javascript#statement"  ]    ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/jsLogic#extractTerms" , ["::" , ["/javascript#exprStatement" , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "runProcedure"    ] , ["." , ["/javascript/jsLogic#inlineTerm" , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["/javascript#statement"  ]    ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#extractTerms"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#extractTerms" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["/javascript/jsLogic#specialExtractTerms" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["builtin#true"  ] , ["builtin#if" , ["builtin#compound" , vars [0]    ] , ["," , ["/bootstrap#safeParseTerm" , vars [0]  , vars [4]  , vars [5]      ] , ["," , ["/javascript/jsLogic#extractTermsList" , vars [5]  , vars [6]  , vars [2]  , vars [3]       ] , ["builtin#parseTerm" , vars [1]  , vars [4]  , vars [6]      ]    ]    ] , ["," , ["=" , vars [1]  , vars [0]     ] , ["=" , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ]    ]    ]     ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#extractTermsList" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#extractTermsList" , ["[]"  ] , ["[]"  ] , vars [0]  , vars [0]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#extractTermsList" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#extractTermsList" , ["." , vars [0]  , vars [1]     ] , ["." , vars [2]  , vars [3]     ] , vars [4]  , vars [5]       ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/javascript/jsLogic#extractTermsList" , vars [1]  , vars [3]  , vars [6]  , vars [5]       ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/javascript/jsLogic#extractTerms" , vars [0]  , vars [2]  , vars [4]  , vars [6]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#extractJsExpr"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#extractJsExpr" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["/javascript/jsLogic#specialExtractJsExpr" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["builtin#true"  ] , ["builtin#if" , ["builtin#compound" , vars [0]    ] , ["," , ["/bootstrap#safeParseTerm" , vars [0]  , vars [6]  , vars [7]      ] , ["," , ["/javascript/jsLogic#extractJsExprList" , vars [7]  , vars [8]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["builtin#parseTerm" , vars [1]  , vars [6]  , vars [8]      ]    ]    ] , ["," , ["=" , vars [1]  , vars [0]     ] , ["," , ["=" , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["::" , vars [4]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ]    ]    ]    ]     ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#extractJsExprList" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#extractJsExprList" , ["[]"  ] , ["[]"  ] , vars [0]  , vars [0]  , vars [1]  , vars [1]         ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#extractJsExprList" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#extractJsExprList" , ["." , vars [0]  , vars [1]     ] , ["." , vars [2]  , vars [3]     ] , vars [4]  , vars [5]  , vars [6]  , vars [7]         ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/javascript/jsLogic#extractJsExprList" , vars [1]  , vars [3]  , vars [8]  , vars [5]  , vars [9]  , vars [7]         ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/javascript/jsLogic#extractJsExpr" , vars [0]  , vars [2]  , vars [4]  , vars [8]  , vars [6]  , vars [9]         ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/CCS#edge"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/CCS#edge" , vars [0]  , ["/javascript/jsLogic#predicateID"  ] , ["/javascript/jsLogic#t"  ] , ["/javascript/jsLogic#transition"  ] , vars [1]        ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/javascript/jsLogic#statement" , [":-" , vars [2]  , vars [3]     ]   ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#bodyIncludesGoal" , "\\+"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#bodyIncludesGoal" , ["\\+" , vars [0]    ] , ["/Functional#wrap" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/jsLogic#bodyIncludesGoal" , vars [0]  , ["/Functional#wrap" , vars [1]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#hasSpecialRendering" , "::" , "/javascript/jsLogic#runProcedure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript#hasSpecialRendering" , ["::" , ["/javascript/jsLogic#runProcedure" , vars [0]    ] , ["/javascript#statement"  ]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript#toString" , ["::" , ["/javascript#exprStatement" , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "runProcedure"    ] , ["." , ["/javascript/jsLogic#inlineTerm" , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["/javascript#statement"  ]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/jsLogic#foreach"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#concreteCommand" , vars [1]  , vars [2]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (vars [0]  , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/jsLogic#do"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/jsLogic#do" , vars [0]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , vars [0]  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#specialTermConversion" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#specialTermConversion" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["/Functional#wrap" , ["/javascript#const" , vars [0]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#number" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#specialTermConversion" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#specialTermConversion" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["/Functional#wrap" , ["/javascript#str" , vars [0]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#string" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#specialTermConversion" , "::" , "/bootstrap#$SAT$"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#specialTermConversion" , ["::" , ["/bootstrap#$SAT$" , vars [0]    ] , vars [1]     ] , ["/Functional#wrap" , ["/javascript#arrayElement" , ["/javascript#varExpr" , ["/javascript/jsLogic#vars"  ]   ] , ["/javascript#const" , vars [0]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#number" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#hasSpecialRendering" , "::" , "/javascript#op"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript#hasSpecialRendering" , ["::" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript#expr"  ]    ] , vars [3]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#concat" , ["/Functional#const" , "("   ] , ["/Functional#concat" , ["/Functional#const" , vars [5]    ] , ["/Functional#const" , ")"   ]    ]    ] , ["/bootstrap#string"  ] , vars [3]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/javascript#visToString" , vars [4]    ] , ["/bootstrap#visualizeTerm" , ["::" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [4]      ]    ] , ["/bootstrap#string"  ] , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/optimization#concatGoals"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/optimization#concatGoals" , vars [0]  , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["," , ["\\+" , ["builtin#var" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ]   ] , ["=" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , vars [3]  , vars [4]     ] , ["/bootstrap#pred"  ]    ]    ]    ] , ["," , ["/javascript/optimization#concatGoals" , vars [4]  , vars [1]  , vars [5]      ] , ["=" , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , vars [3]  , vars [5]     ] , ["/bootstrap#pred"  ]    ]    ]    ] , ["=" , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/optimization#removeTrivial"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/optimization#removeTrivial" , vars [0]  , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["," , ["\\+" , ["builtin#var" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ]   ] , ["=" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , vars [2]  , vars [3]     ] , ["/bootstrap#pred"  ]    ]    ]    ] , ["," , ["/javascript/optimization#removeTrivial" , vars [3]  , vars [4]     ] , ["builtin#if" , ["," , ["\\+" , ["builtin#var" , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ]   ]   ] , ["=" , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["::" , ["builtin#true"  ] , ["/bootstrap#pred"  ]    ]    ]    ] , ["=" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["::" , vars [4]  , ["/bootstrap#pred"  ]    ]    ] , ["=" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , vars [2]  , vars [4]     ] , ["/bootstrap#pred"  ]    ]    ]     ]    ] , ["=" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/optimization#partialEval"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/optimization#partialEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#if" , ["=" , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["::" , 0 , ["/bootstrap#number"  ]    ]    ] , ["=" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]    ] , ["," , ["builtin#succ" , vars [4]  , vars [3]     ] , ["builtin#if" , ["builtin#var" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["=" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]    ] , ["builtin#if" , ["/javascript/optimization#specialPartial" , vars [0]  , vars [1]  , vars [2]  , vars [4]       ] , ["builtin#true"  ] , ["builtin#if" , ["/javascript/optimization#isBuiltin" , vars [0]    ] , ["=" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]    ] , ["," , ["builtin#findall" , vars [5]  , ["/bootstrap#pred"  ] , ["/bootstrap#member" , [":-" , vars [0]  , vars [5]     ] , vars [2]  , ["/bootstrap#statement"  ]     ] , ["." , vars [6]  , vars [7]     ]      ] , ["builtin#if" , ["=" , ["::" , vars [7]  , ["/bootstrap#list" , ["/bootstrap#pred"  ]   ]    ] , ["::" , ["[]"  ] , ["/bootstrap#list" , ["/bootstrap#pred"  ]   ]    ]    ] , ["," , ["/bootstrap#member" , [":-" , vars [0]  , vars [6]     ] , vars [2]  , ["/bootstrap#statement"  ]     ] , ["/javascript/optimization#partialEval" , vars [6]  , vars [1]  , vars [2]  , vars [4]       ]    ] , ["=" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]    ]     ]    ]     ]     ]     ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/optimization#specialPartial" , ","   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/optimization#specialPartial" , ["," , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["/javascript/optimization#removeTrivial" , vars [7]  , vars [2]     ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["/javascript/optimization#concatGoals" , vars [5]  , vars [6]  , vars [7]      ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/javascript/optimization#partialEval" , vars [1]  , vars [6]  , vars [3]  , vars [4]       ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/javascript/optimization#partialEval" , vars [0]  , vars [5]  , vars [3]  , vars [4]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/optimization#isBuiltin"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/optimization#isBuiltin" , vars [0]    ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#append" , vars [5]  , ["." , vars [4]  , vars [6]     ] , vars [3]  , ["/bootstrap#number"  ]      ] , ["builtin#charCodes" , "builtin" , vars [5]     ] , ["builtin#true"  ]     ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["builtin#charCodes" , "#" , ["." , vars [4]  , ["[]"  ]    ]    ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["builtin#charCodes" , vars [1]  , vars [3]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/jsLogic#specialExtractTerms" , "::" , "/javascript/statepred#async"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/jsLogic#specialExtractTerms" , ["::" , ["/javascript/statepred#async" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["::" , ["/javascript#call" , ["/javascript#function" , ["." , ["/javascript/jsLogic#terms"  ] , ["[]"  ]    ] , ["." , ["/javascript#return" , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "preserveContext"    ] , ["." , vars [1]  , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ] , ["." , ["/javascript#call" , ["/javascript#dot" , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "zeros"    ] , ["." , ["/javascript#const" , vars [2]    ] , ["[]"  ]    ]    ] , "concat"    ] , ["." , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "concreteValue"    ] , ["." , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#terms"  ]   ] , "slice"    ] , ["." , ["/javascript#const" , vars [2]    ] , ["." , ["/javascript#const" , vars [3]    ] , ["[]"  ]    ]    ]    ] , ["[]"  ]    ]    ] , ["[]"  ]    ]    ] , ["[]"  ]    ]    ] , ["/javascript#expr"  ]    ] , vars [4]  , vars [5]       ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["/javascript/jsLogic#length" , vars [5]  , vars [3]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["/javascript/jsLogic#length" , vars [4]  , vars [2]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["/javascript/jsLogic#extractTerms" , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , vars [4]  , vars [5]       ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/statepred#whenever"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cjs#procedureCommand" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : []    }  )      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#runAllTests" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#runAllTests" , ["." , vars [0]  , vars [1]     ]   ] , vars [2]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (("Running: \"" + logic . concreteTerm  (terms [0]  , []   )  )  )  ;  
     var __symbol3 = "FAIL" ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol3 = "PASS" ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (("* " + (logic . concreteTerm  (terms [1]  , []   )  + (" [\"" + (__symbol3 + "]" ) ) ) )  )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  




}
  , "terms" : [vars [0]  , vars [0]  , ["/javascript/asyncproc#andThen" , ["/javascript/statepred#for (s)" , vars [0]  , {"expr" : 0   }    ] , ["/javascript/asyncproc#andThen" , ["/javascript/asyncproc#sync" , ["/javascript/jsLogic#do" , {"expr" : 1   }   ]   ] , ["/javascript/asyncproc#andThen" , ["/javascript/statepred#runAllTests" , vars [1]    ] , vars [2]     ]    ]    ]    ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#hasSpecialRendering" , "::" , "/javascript#str"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript#hasSpecialRendering" , ["::" , ["/javascript#str" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#concat" , ["/Functional#wrap" , "\""   ] , ["/Functional#concat" , ["/javascript#encodeString" , vars [0]    ] , ["/Functional#wrap" , "\""   ]    ]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#encodeCodes" , "[]"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/javascript#encodeCodes" , ["[]"  ] , ["[]"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#encodeCodes" , "."   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript#encodeCodes" , ["." , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["builtin#if" , ["/javascript#specialChar" , vars [0]  , vars [4]     ] , ["=" , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["::" , ["." , 92 , ["." , vars [4]  , vars [3]     ]    ] , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ]    ] , ["=" , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["::" , ["." , vars [0]  , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ]    ]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["/javascript#encodeCodes" , vars [1]  , vars [3]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#specialChar"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/javascript#specialChar" , 34 , 34    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#specialChar"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/javascript#specialChar" , 92 , 92    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#specialChar"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/javascript#specialChar" , 10 , 110    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#applyBinOp"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#applyBinOp" , vars [0]  , ["/Functional#numPlus"  ] , vars [1]      ] , ["/bootstrap#number"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#const" , vars [3]    ] , ["," , ["/Functional#eval" , vars [0]  , ["/bootstrap#number"  ] , vars [4]      ] , ["," , ["/Functional#eval" , vars [1]  , ["/bootstrap#number"  ] , vars [5]      ] , ["builtin#plus" , vars [4]  , vars [5]  , vars [3]      ]    ]    ]    ] , ["/bootstrap#number"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#applyBinOpList"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#applyBinOpList" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , vars [3]    ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#const" , ["." , vars [5]  , vars [6]     ]   ] , ["," , ["/Functional#eval" , vars [0]  , ["/bootstrap#list" , vars [3]    ] , ["." , vars [7]  , vars [8]     ]     ] , ["," , ["/Functional#eval" , vars [2]  , ["/bootstrap#list" , vars [3]    ] , ["." , vars [9]  , vars [10]     ]     ] , ["," , ["/Functional#eval" , ["/Functional#applyBinOpList" , ["/Functional#const" , vars [8]    ] , vars [1]  , ["/Functional#const" , vars [10]    ]     ] , ["/bootstrap#list" , vars [3]    ] , vars [6]      ] , ["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#const" , vars [7]    ] , vars [1]  , ["/Functional#const" , vars [9]    ]     ] , vars [3]  , vars [5]      ]    ]    ]    ]    ] , ["/bootstrap#list" , vars [3]    ] , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#applyBinOpList"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#applyBinOpList" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , vars [3]    ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#const" , ["[]"  ]   ] , ["," , ["/Functional#eval" , vars [0]  , ["/bootstrap#list" , vars [3]    ] , ["[]"  ]     ] , ["/Functional#eval" , vars [2]  , ["/bootstrap#list" , vars [3]    ] , ["[]"  ]     ]    ]    ] , ["/bootstrap#list" , vars [3]    ] , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#applyBinOpListScalar"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#applyBinOpListScalar" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , vars [3]    ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#const" , ["." , vars [5]  , vars [6]     ]   ] , ["," , ["/Functional#eval" , vars [0]  , ["/bootstrap#list" , vars [3]    ] , ["." , vars [7]  , vars [8]     ]     ] , ["," , ["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#const" , vars [7]    ] , vars [1]  , vars [2]      ] , vars [3]  , vars [5]      ] , ["/Functional#eval" , ["/Functional#applyBinOpListScalar" , ["/Functional#const" , vars [8]    ] , vars [1]  , vars [2]      ] , ["/bootstrap#list" , vars [3]    ] , vars [6]      ]    ]    ]    ] , ["/bootstrap#list" , vars [3]    ] , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#applyBinOpListScalar"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#applyBinOpListScalar" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , vars [3]    ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#const" , ["[]"  ]   ] , ["/Functional#eval" , vars [0]  , ["/bootstrap#list" , vars [3]    ] , ["[]"  ]     ]    ] , ["/bootstrap#list" , vars [3]    ] , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#reduce"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#reduce" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#applyBinOp" , ["/Functional#const" , vars [4]    ] , vars [0]  , ["/Functional#reduce" , vars [0]  , ["/Functional#const" , ["." , vars [5]  , vars [6]     ]   ]    ]     ] , ["/Functional#eval" , vars [1]  , ["/bootstrap#list" , vars [2]    ] , ["." , vars [4]  , ["." , vars [5]  , vars [6]     ]    ]     ]    ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#reduce"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#reduce" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#const" , vars [4]    ] , ["/Functional#eval" , vars [1]  , ["/bootstrap#list" , vars [2]    ] , ["." , vars [4]  , ["[]"  ]    ]     ]    ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#applyBinOp"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#applyBinOp" , vars [0]  , ["/Functional#minus"  ] , vars [1]      ] , ["/bootstrap#number"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#minus" , vars [0]  , vars [1]     ] , ["/bootstrap#number"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#applyBinOp"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#applyBinOp" , vars [0]  , ["/Functional#times"  ] , vars [1]      ] , ["/bootstrap#number"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#mult" , vars [0]  , vars [1]     ] , ["/bootstrap#number"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#applyBinOp"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#applyBinOp" , vars [0]  , ["/Functional#divBy"  ] , vars [1]      ] , ["/bootstrap#number"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#div" , vars [0]  , vars [1]     ] , ["/bootstrap#number"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#max"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#max" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#if" , ["/Functional#gt" , vars [0]  , vars [1]  , vars [2]      ] , vars [0]  , vars [1]      ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#f"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#f" , vars [0]    ] , ["/bootstrap#number"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#div" , ["/Functional#plus" , vars [0]  , ["/Functional#wrap" , 2   ]    ] , ["/Functional#wrap" , 4   ]    ] , ["/bootstrap#number"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#parentheses"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#parentheses" , vars [0]    ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#g"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#g" , vars [0]    ] , ["/Functional#func" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["/Functional#lambda" , vars [2]  , ["/Functional#plus" , vars [0]  , vars [2]     ]    ]   ] , ["/Functional#func" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#plus"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#plus" , vars [0]  , vars [1]     ] , ["/Functional#func" , vars [2]  , vars [3]     ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["/Functional#lambda" , vars [5]  , ["/Functional#plus" , ["/Functional#apply" , vars [0]  , vars [2]  , vars [5]      ] , ["/Functional#apply" , vars [1]  , vars [2]  , vars [5]      ]    ]    ]   ] , ["/Functional#func" , vars [2]  , vars [3]     ] , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#minus"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#minus" , vars [0]  , vars [1]     ] , ["/Functional#func" , vars [2]  , vars [3]     ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["/Functional#lambda" , vars [5]  , ["/Functional#minus" , ["/Functional#apply" , vars [0]  , vars [2]  , vars [5]      ] , ["/Functional#apply" , vars [1]  , vars [2]  , vars [5]      ]    ]    ]   ] , ["/Functional#func" , vars [2]  , vars [3]     ] , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#mult"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#mult" , vars [0]  , vars [1]     ] , ["/Functional#func" , vars [2]  , vars [3]     ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["/Functional#lambda" , vars [5]  , ["/Functional#mult" , ["/Functional#apply" , vars [0]  , vars [2]  , vars [5]      ] , ["/Functional#apply" , vars [1]  , vars [2]  , vars [5]      ]    ]    ]   ] , ["/Functional#func" , vars [2]  , vars [3]     ] , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#div"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#div" , vars [0]  , vars [1]     ] , ["/Functional#func" , vars [2]  , vars [3]     ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["/Functional#lambda" , vars [5]  , ["/Functional#div" , ["/Functional#apply" , vars [0]  , vars [2]  , vars [5]      ] , ["/Functional#apply" , vars [1]  , vars [2]  , vars [5]      ]    ]    ]   ] , ["/Functional#func" , vars [2]  , vars [3]     ] , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#plus"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#plus" , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#switch" , vars [0]  , ["/bootstrap#list" , vars [2]    ] , ["/Functional#case" , ["." , vars [4]  , vars [5]     ] , ["/Functional#wrap" , ["." , vars [4]  , ["/Functional#unwrap" , ["/Functional#plus" , ["/Functional#wrap" , vars [5]    ] , vars [1]     ]   ]    ]   ] , ["/Functional#otherwise" , vars [1]    ]     ]     ] , ["/bootstrap#list" , vars [2]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#map"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#map" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , vars [3]    ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#switch" , vars [0]  , ["/bootstrap#list" , vars [2]    ] , ["/Functional#case" , ["." , vars [5]  , vars [6]     ] , ["/Functional#where" , ["/Functional#const" , ["." , vars [7]  , vars [8]     ]   ] , ["," , ["/Functional#eval" , ["/Functional#map" , ["/Functional#const" , vars [6]    ] , vars [1]  , vars [2]      ] , ["/bootstrap#list" , vars [3]    ] , vars [8]      ] , ["," , ["/Functional#eval" , ["/Functional#apply" , ["/Functional#const" , vars [1]    ] , vars [2]  , ["/Functional#const" , vars [5]    ]     ] , vars [3]  , vars [7]      ] , ["builtin#true"  ]    ]    ]    ] , ["/Functional#case" , ["[]"  ] , ["/Functional#wrap" , ["[]"  ]   ] , ["/Functional#otherwise" , ["/Functional#failedToCompute" , vars [0]    ]   ]     ]     ]     ] , ["/bootstrap#list" , vars [3]    ] , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#element"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#element" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#if" , ["/Functional#gt" , vars [1]  , ["/Functional#wrap" , 0   ] , ["/bootstrap#number"  ]     ] , ["/Functional#element" , ["/Functional#next" , vars [0]    ] , ["/Functional#minus" , vars [1]  , ["/Functional#wrap" , 1   ]    ]    ] , ["/Functional#first" , vars [0]    ]     ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#fib"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#fib"  ] , ["/Functional#seq" , ["/bootstrap#number"  ]   ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#fib" , ["/Functional#const" , 1   ] , ["/Functional#const" , 1   ]    ] , ["/Functional#seq" , ["/bootstrap#number"  ]   ] , vars [0]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#fib"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#fib" , vars [0]  , vars [1]     ] , ["/Functional#seq" , ["/bootstrap#number"  ]   ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#const" , ["/Functional#seq" , vars [0]  , ["/Functional#fib" , vars [1]  , ["/Functional#plus" , vars [0]  , vars [1]     ]    ]    ]   ] , ["/Functional#seq" , ["/bootstrap#number"  ]   ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#plus"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#plus" , vars [0]  , vars [1]     ] , ["/Functional#seq" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["/Functional#seq" , ["/Functional#plus" , ["/Functional#first" , vars [0]    ] , ["/Functional#first" , vars [1]    ]    ] , ["/Functional#plus" , ["/Functional#next" , vars [0]    ] , ["/Functional#next" , vars [1]    ]    ]    ]   ] , ["/Functional#seq" , vars [2]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#minus"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#minus" , vars [0]  , vars [1]     ] , ["/Functional#seq" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["/Functional#seq" , ["/Functional#minus" , ["/Functional#first" , vars [0]    ] , ["/Functional#first" , vars [1]    ]    ] , ["/Functional#minus" , ["/Functional#next" , vars [0]    ] , ["/Functional#next" , vars [1]    ]    ]    ]   ] , ["/Functional#seq" , vars [2]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#mult"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#mult" , vars [0]  , vars [1]     ] , ["/Functional#seq" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["/Functional#seq" , ["/Functional#mult" , ["/Functional#first" , vars [0]    ] , ["/Functional#first" , vars [1]    ]    ] , ["/Functional#mult" , ["/Functional#next" , vars [0]    ] , ["/Functional#next" , vars [1]    ]    ]    ]   ] , ["/Functional#seq" , vars [2]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#div"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#div" , vars [0]  , vars [1]     ] , ["/Functional#seq" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["/Functional#seq" , ["/Functional#div" , ["/Functional#first" , vars [0]    ] , ["/Functional#first" , vars [1]    ]    ] , ["/Functional#div" , ["/Functional#next" , vars [0]    ] , ["/Functional#next" , vars [1]    ]    ]    ]   ] , ["/Functional#seq" , vars [2]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#constSeq"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#constSeq" , vars [0]    ] , ["/Functional#seq" , vars [1]    ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["/Functional#seq" , vars [0]  , ["/Functional#constSeq" , vars [0]    ]    ]   ] , ["/Functional#seq" , vars [1]    ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#plus"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#plus" , vars [0]  , vars [1]     ] , ["/bootstrap#string"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#concat" , vars [0]  , vars [1]     ] , ["/bootstrap#string"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#applyBinOp"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#applyBinOp" , vars [0]  , ["/Functional#concat"  ] , vars [1]      ] , ["/bootstrap#string"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#concat" , vars [0]  , vars [1]     ] , ["/bootstrap#string"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#sumList" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#sumList" , ["[]"  ]   ] , vars [0]  , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#zero"  ] , vars [0]  , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#sumList" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#sumList" , ["." , vars [0]  , vars [1]     ]   ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#plus" , ["/Functional#wrap" , vars [0]    ] , ["/Functional#sumList" , vars [1]    ]    ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#zero"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#zero"  ] , ["/bootstrap#number"  ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , 0   ] , ["/bootstrap#number"  ] , vars [0]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Functional#range"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Functional#range" , vars [0]  , vars [1]     ] , ["/bootstrap#list" , ["/bootstrap#number"  ]   ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#if" , ["/Functional#gt" , vars [1]  , vars [0]  , ["/bootstrap#number"  ]     ] , ["/Functional#wrap" , ["." , ["/Functional#unwrap" , vars [0]    ] , ["/Functional#unwrap" , ["/Functional#range" , ["/Functional#plus" , vars [0]  , ["/Functional#wrap" , 1   ]    ] , vars [1]     ]   ]    ]   ] , ["/Functional#wrap" , ["[]"  ]   ]     ] , ["/bootstrap#list" , ["/bootstrap#number"  ]   ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/Test#f"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/Test#f" , vars [0]    ] , ["/bootstrap#number"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#plus" , vars [0]  , ["/Functional#plus" , ["/Functional#wrap" , 2   ] , vars [0]     ]    ] , ["/bootstrap#number"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/cedalionWeb/visualization#rgbToText" , "cpi#rgb"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/cedalionWeb/visualization#rgbToText" , ["cpi#rgb" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#const" , "rgb("   ] , ["/Functional#concat"  ] , ["/Functional#num2str" , ["/Functional#const" , vars [0]    ]   ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , ", "   ]     ] , ["/Functional#concat"  ] , ["/Functional#num2str" , ["/Functional#const" , vars [1]    ]   ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , ", "   ]     ] , ["/Functional#concat"  ] , ["/Functional#num2str" , ["/Functional#const" , vars [2]    ]   ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , ")"   ]     ] , ["/bootstrap#string"  ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/cedalionWeb/xml#genAttrTrans" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/cedalionWeb/xml#genAttrTrans" , ["[]"  ]   ] , ["/bootstrap#string"  ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#const" , ""   ] , ["/bootstrap#string"  ] , vars [0]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/cedalionWeb/xml#genAttrTrans" , "." , "/cedalionWeb/xml#attr"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/cedalionWeb/xml#genAttrTrans" , ["." , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , vars [2]     ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#const" , " "   ] , ["/Functional#concat"  ] , ["/Functional#const" , vars [0]    ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , "=\""   ]     ] , ["/Functional#concat"  ] , ["/Functional#if" , ["=" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["::" , ["/javascript/statepred#expr" , vars [4]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]    ] , vars [4]  , ["/Functional#const" , "?"   ]     ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , "\""   ]     ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#genAttrTrans" , vars [2]    ]     ] , ["/bootstrap#string"  ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/cedalionWeb/xml#genAttr2" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/cedalionWeb/xml#genAttr2" , ["[]"  ]   ] , ["/bootstrap#string"  ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#const" , ""   ] , ["/bootstrap#string"  ] , vars [0]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/cedalionWeb/xml#genAttr2" , "." , "/cedalionWeb/xml#attr2"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/cedalionWeb/xml#genAttr2" , ["." , ["/cedalionWeb/xml#attr2" , vars [0]  , vars [1]     ] , vars [2]     ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#const" , " "   ] , ["/Functional#concat"  ] , vars [0]      ] , ["/Functional#concat"  ] , ["/Functional#const" , "=\""   ]     ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#xmlEncode" , vars [1]    ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , "\""   ]     ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#genAttr2" , vars [2]    ]     ] , ["/bootstrap#string"  ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/cedalionWeb/xml#gen2"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/cedalionWeb/xml#gen2" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#string"  ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#const" , vars [4]    ] , ["/cedalionWeb/xml#generates2" , vars [0]  , vars [4]  , vars [1]  , vars [2]       ]    ] , ["/bootstrap#string"  ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#asHexString"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#asHexString" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#if" , ["/Functional#gt" , vars [0]  , ["/Functional#wrap" , 0   ] , ["/bootstrap#number"  ]     ] , ["/Functional#concat" , ["/html#asHexString" , ["/Functional#idiv" , vars [0]  , ["/Functional#wrap" , 16   ]    ]   ] , ["/html#hexDigit" , ["/Functional#modulus" , vars [0]  , ["/Functional#wrap" , 16   ]    ]   ]    ] , ["/Functional#wrap" , ""   ]     ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#hexDigit"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#hexDigit" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#switch" , vars [0]  , ["/bootstrap#number"  ] , ["/Functional#case" , 10 , ["/Functional#wrap" , "A"   ] , ["/Functional#case" , 11 , ["/Functional#wrap" , "B"   ] , ["/Functional#case" , 12 , ["/Functional#wrap" , "C"   ] , ["/Functional#case" , 13 , ["/Functional#wrap" , "D"   ] , ["/Functional#case" , 14 , ["/Functional#wrap" , "E"   ] , ["/Functional#case" , 15 , ["/Functional#wrap" , "F"   ] , ["/Functional#otherwise" , ["/Functional#num2str" , vars [0]    ]   ]     ]     ]     ]     ]     ]     ]     ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#simplePage"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#simplePage" , vars [0]  , vars [1]     ] , ["/html#xml"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "html" , ["[]"  ] , ["." , ["xml#element" , "head" , ["[]"  ] , ["." , ["xml#element" , "title" , ["[]"  ] , ["." , ["xml#string" , ["/Functional#unwrap" , vars [0]    ]   ] , ["[]"  ]    ]     ] , ["[]"  ]    ]     ] , ["." , ["xml#element" , "body" , ["[]"  ] , ["/Functional#unwrap" , ["/Functional#evalList" , vars [1]    ]   ]     ] , ["[]"  ]    ]    ]     ]   ] , ["/html#xml"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#head"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#head" , vars [0]  , vars [1]     ] , ["/html#xml"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , ["/Functional#unwrap" , ["/Functional#concat" , ["/Functional#wrap" , "h"   ] , ["/Functional#num2str" , vars [0]    ]    ]   ] , ["[]"  ] , ["." , ["xml#string" , ["/Functional#unwrap" , vars [1]    ]   ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#paragraph"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#paragraph" , vars [0]    ] , ["/html#xml"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "p" , ["[]"  ] , ["." , ["xml#string" , ["/Functional#unwrap" , vars [0]    ]   ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#myPage"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#myPage"  ] , ["/html#xml"  ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/html#simplePage" , ["/Functional#wrap" , "My Page"   ] , ["." , ["/html#head" , ["/Functional#wrap" , 1   ] , ["/Functional#wrap" , "My Page"   ]    ] , ["." , ["/html#paragraph" , ["/Functional#wrap" , "Hi there..."   ]   ] , ["." , ["/Functional#wrap" , ["xml#element" , "span" , ["[]"  ] , ["/Functional#unwrap" , ["/html#listComp" , ["/html#paragraph" , ["/Functional#concat" , ["/Functional#wrap" , "Hello, "   ] , ["/Functional#wrap" , vars [1]    ]    ]   ] , ["/html#xml"  ] , ["/html#person" , vars [1]    ]     ]   ]     ]   ] , ["[]"  ]    ]    ]    ]    ] , ["/html#xml"  ] , vars [0]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#toText" , "::" , "xml#element"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#toText" , ["::" , ["xml#element" , vars [0]  , vars [1]  , vars [2]      ] , ["/html#xml"  ]    ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#concat" , ["/Functional#const" , "<"   ] , ["/Functional#concat" , ["/Functional#const" , vars [0]    ] , ["/Functional#concat" , ["/Functional#const" , " "   ] , ["/Functional#concat" , ["/html#toText" , ["::" , vars [1]  , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ]   ] , ["/Functional#concat" , ["/Functional#const" , ">"   ] , ["/Functional#concat" , ["/html#toText" , ["::" , vars [2]  , ["/bootstrap#list" , ["/html#xml"  ]   ]    ]   ] , ["/Functional#concat" , ["/Functional#const" , "</"   ] , ["/Functional#concat" , ["/Functional#const" , vars [0]    ] , ["/Functional#const" , ">"   ]    ]    ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#string"  ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#toText" , "::" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#toText" , ["::" , ["[]"  ] , ["/bootstrap#list" , ["/html#xml"  ]   ]    ]   ] , ["/bootstrap#string"  ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#const" , ""   ] , ["/bootstrap#string"  ] , vars [0]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#toText" , "::" , "."     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#toText" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , ["/html#xml"  ]   ]    ]   ] , ["/bootstrap#string"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#concat" , ["/html#toText" , ["::" , vars [0]  , ["/html#xml"  ]    ]   ] , ["/html#toText" , ["::" , vars [1]  , ["/bootstrap#list" , ["/html#xml"  ]   ]    ]   ]    ] , ["/bootstrap#string"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#toText" , "::" , "xml#string"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#toText" , ["::" , ["xml#string" , vars [0]    ] , ["/html#xml"  ]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/html#xmlEncode" , ["/Functional#const" , vars [0]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#toText" , "::" , "/html#unicode"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#toText" , ["::" , ["/html#unicode" , vars [0]    ] , ["/html#xml"  ]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#plus" , ["/Functional#const" , "&#"   ] , ["/Functional#plus" , ["/Functional#num2str" , ["/Functional#const" , vars [0]    ]   ] , ["/Functional#const" , ";"   ]    ]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#toText" , "::" , "." , "xml#attribute"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#toText" , ["::" , ["." , ["xml#attribute" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ]   ] , ["/bootstrap#string"  ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#concat" , ["/Functional#const" , vars [0]    ] , ["/Functional#concat" , ["/Functional#const" , "=\""   ] , ["/Functional#concat" , ["/html#xmlEncode" , ["/html#toText" , ["::" , vars [2]  , vars [1]     ]   ]   ] , ["/Functional#concat" , ["/Functional#const" , "\" "   ] , ["/html#toText" , ["::" , vars [3]  , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ]   ]    ]    ]    ]    ] , ["/bootstrap#string"  ] , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#toText" , "::" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#toText" , ["::" , ["[]"  ] , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ]   ] , ["/bootstrap#string"  ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#const" , ""   ] , ["/bootstrap#string"  ] , vars [0]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#toText" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#toText" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#const" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#toText" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#toText" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#num2str" , ["/Functional#const" , vars [0]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#horiz"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#horiz" , vars [0]    ]   ] , ["/html#xml"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "table" , ["[]"  ] , ["." , ["xml#element" , "tr" , ["." , ["xml#attribute" , "style" , ["/bootstrap#string"  ] , "vertical-align: top"     ] , ["[]"  ]    ] , ["/Functional#unwrap" , ["/html#listComp" , ["/Functional#wrap" , ["xml#element" , "td" , ["[]"  ] , ["." , ["/Functional#unwrap" , ["/html#vis2html" , vars [2]    ]   ] , ["[]"  ]    ]     ]   ] , vars [3]  , ["/bootstrap#listMember" , vars [2]  , ["/bootstrap#visualization"  ] , vars [0]      ]     ]   ]     ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#vert"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#vert" , vars [0]    ]   ] , ["/html#xml"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "table" , ["[]"  ] , ["/Functional#unwrap" , ["/html#listComp" , ["/Functional#wrap" , ["xml#element" , "tr" , ["[]"  ] , ["." , ["xml#element" , "td" , ["[]"  ] , ["." , ["/Functional#unwrap" , ["/html#vis2html" , vars [2]    ]   ] , ["[]"  ]    ]     ] , ["[]"  ]    ]     ]   ] , vars [3]  , ["/bootstrap#listMember" , vars [2]  , ["/bootstrap#visualization"  ] , vars [0]      ]     ]   ]     ]   ] , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#label"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#label" , vars [0]    ]   ] , ["/html#xml"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "span" , ["." , ["xml#attribute" , "style" , ["/bootstrap#string"  ] , "white-space: pre-line"     ] , ["[]"  ]    ] , ["." , ["xml#string" , vars [0]    ] , ["." , ["xml#string" , " "   ] , ["[]"  ]    ]    ]     ]   ] , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#symbol"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#symbol" , vars [0]    ]   ] , ["/html#xml"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["/html#unicode" , vars [0]    ]   ] , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#bold"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#bold" , vars [0]    ]   ] , ["/html#xml"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "span" , ["." , ["xml#attribute" , "style" , ["/bootstrap#string"  ] , "font-weight: bold"     ] , ["[]"  ]    ] , ["." , ["/Functional#unwrap" , ["/html#vis2html" , vars [0]    ]   ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#italic"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#italic" , vars [0]    ]   ] , ["/html#xml"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "span" , ["." , ["xml#attribute" , "style" , ["/bootstrap#string"  ] , "font-style: italic"     ] , ["[]"  ]    ] , ["." , ["/Functional#unwrap" , ["/html#vis2html" , vars [0]    ]   ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#colorString" , "cpi#rgb"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#colorString" , ["cpi#rgb" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#plus" , ["/Functional#wrap" , "#"   ] , ["/html#asHexString" , ["/Functional#plus" , ["/Functional#mult" , ["/Functional#parentheses" , ["/Functional#plus" , ["/Functional#mult" , ["/Functional#wrap" , vars [0]    ] , ["/Functional#wrap" , 256   ]    ] , ["/Functional#wrap" , vars [1]    ]    ]   ] , ["/Functional#wrap" , 256   ]    ] , ["/Functional#wrap" , vars [2]    ]    ]   ]    ] , ["/bootstrap#string"  ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#lineBorder"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#lineBorder" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/html#xml"  ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "span" , ["." , ["xml#attribute" , "style" , ["/bootstrap#string"  ] , ["/Functional#unwrap" , ["/Functional#plus" , ["/Functional#wrap" , "outline-style: solid; outline-width: "   ] , ["/Functional#plus" , ["/Functional#num2str" , ["/Functional#wrap" , vars [1]    ]   ] , ["/Functional#plus" , ["/Functional#wrap" , "; outline-color: "   ] , ["/html#colorString" , vars [2]    ]    ]    ]    ]   ]     ] , ["[]"  ]    ] , ["." , ["/Functional#unwrap" , ["/html#vis2html" , vars [0]    ]   ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#color"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#color" , vars [0]  , vars [1]     ]   ] , ["/html#xml"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "span" , ["." , ["xml#attribute" , "style" , ["/bootstrap#string"  ] , ["/Functional#unwrap" , ["/Functional#plus" , ["/Functional#wrap" , "color:"   ] , ["/html#colorString" , vars [1]    ]    ]   ]     ] , ["[]"  ]    ] , ["." , ["/Functional#unwrap" , ["/html#vis2html" , vars [0]    ]   ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#background"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#background" , vars [0]  , vars [1]     ]   ] , ["/html#xml"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "span" , ["." , ["xml#attribute" , "style" , ["/bootstrap#string"  ] , ["/Functional#unwrap" , ["/Functional#plus" , ["/Functional#wrap" , "background-color"   ] , ["/html#colorString" , vars [1]    ]    ]   ]     ] , ["[]"  ]    ] , ["." , ["/Functional#unwrap" , ["/html#vis2html" , vars [0]    ]   ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#tooltip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#tooltip" , vars [0]  , vars [1]     ]   ] , ["/html#xml"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/html#vis2html" , vars [0]    ] , ["/html#xml"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#halfSize"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#halfSize" , vars [0]    ]   ] , ["/html#xml"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "span" , ["." , ["xml#attribute" , "style" , ["/bootstrap#string"  ] , "font-size: 50%; vertical-align:top"     ] , ["[]"  ]    ] , ["." , ["/Functional#unwrap" , ["/html#vis2html" , vars [0]    ]   ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#smaller"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#smaller" , vars [0]    ]   ] , ["/html#xml"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "span" , ["." , ["xml#attribute" , "style" , ["/bootstrap#string"  ] , "font-size: 90%; vertical-align:top"     ] , ["[]"  ]    ] , ["." , ["/Functional#unwrap" , ["/html#vis2html" , vars [0]    ]   ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#action"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#action" , vars [0]  , vars [1]     ]   ] , ["/html#xml"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/html#vis2html" , vars [0]    ] , ["/html#xml"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#expand"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#expand" , vars [0]  , vars [1]     ]   ] , ["/html#xml"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/html#vis2html" , vars [1]    ] , ["/html#xml"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#raised"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#raised" , vars [0]    ]   ] , ["/html#xml"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "span" , ["." , ["xml#attribute" , "style" , ["/bootstrap#string"  ] , "outline-style: outset; outline-width: 1; outline-color: black"     ] , ["[]"  ]    ] , ["." , ["/Functional#unwrap" , ["/html#vis2html" , vars [0]    ]   ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#lowered"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#lowered" , vars [0]    ]   ] , ["/html#xml"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["xml#element" , "span" , ["." , ["xml#attribute" , "style" , ["/bootstrap#string"  ] , "outline-style: inset; outline-width: 1; outline-color: black"     ] , ["[]"  ]    ] , ["." , ["/Functional#unwrap" , ["/html#vis2html" , vars [0]    ]   ] , ["[]"  ]    ]     ]   ] , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2html" , "/bootstrap#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2html" , ["/bootstrap#vis" , vars [0]    ]   ] , ["/html#xml"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/html#vis2html" , ["cpi#vis" , vars [0]  , ["cpi#default"  ]    ]   ] , ["/html#xml"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#asString" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#asString" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2htmlList" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2htmlList" , ["[]"  ]   ] , ["/bootstrap#list" , ["/html#xml"  ]   ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["[]"  ]   ] , ["/bootstrap#list" , ["/html#xml"  ]   ] , vars [0]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/html#vis2htmlList" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/html#vis2htmlList" , ["." , vars [0]  , vars [1]     ]   ] , ["/bootstrap#list" , ["/html#xml"  ]   ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , ["." , ["/Functional#unwrap" , ["/html#vis2html" , vars [0]    ]   ] , ["/Functional#unwrap" , ["/html#vis2htmlList" , vars [1]    ]   ]    ]   ] , ["/bootstrap#list" , ["/html#xml"  ]   ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#toString"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#toString" , vars [0]  , vars [1]     ] , ["/bootstrap#string"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#if" , ["/javascript#hasSpecialRendering" , vars [0]  , vars [3]     ] , ["/Functional#const" , vars [3]    ] , ["/Functional#where" , ["/javascript#visToString" , vars [4]    ] , ["/bootstrap#visualizeTerm" , vars [0]  , vars [1]  , vars [4]      ]    ]     ] , ["/bootstrap#string"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#toString"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#toString" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript#toString" , vars [0]  , ["cpi#default"  ]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#horiz" , "."     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#horiz" , ["." , vars [0]  , vars [1]     ]   ]   ] , ["/bootstrap#string"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#concat" , ["/javascript#visToString" , vars [0]    ] , ["/Functional#concat" , ["/Functional#const" , " "   ] , ["/javascript#visToString" , ["/bootstrap#horiz" , vars [1]    ]   ]    ]    ] , ["/bootstrap#string"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#horiz" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#horiz" , ["[]"  ]   ]   ] , ["/bootstrap#string"  ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#const" , ""   ] , ["/bootstrap#string"  ] , vars [0]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#horiz"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#horiz" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#string"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#horiz" , vars [0]    ]   ] , ["/bootstrap#string"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#label"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#label" , vars [0]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#const" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#vert" , "."     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#vert" , ["." , vars [0]  , vars [1]     ]   ]   ] , ["/bootstrap#string"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#concat" , ["/javascript#visToString" , vars [0]    ] , ["/Functional#concat" , ["/Functional#const" , "\n"   ] , ["/javascript#visToString" , ["/bootstrap#vert" , vars [1]    ]   ]    ]    ] , ["/bootstrap#string"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#vert" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#vert" , ["[]"  ]   ]   ] , ["/bootstrap#string"  ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#const" , ""   ] , ["/bootstrap#string"  ] , vars [0]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#vis" , vars [0]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript#toString" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "cpi#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["cpi#vis" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#string"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/javascript#visToString" , vars [3]    ] , ["/bootstrap#visualizeTerm" , vars [0]  , vars [1]  , vars [3]      ]    ] , ["/bootstrap#string"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#halfSize"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#halfSize" , vars [0]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript#visToString" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#brackets"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#brackets" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#concat" , ["/Functional#const" , vars [4]    ] , ["/Functional#concat" , ["/javascript#visToString" , vars [0]    ] , ["/Functional#const" , vars [5]    ]    ]    ] , ["," , ["builtin#charCodes" , vars [4]  , ["." , vars [1]  , ["[]"  ]    ]    ] , ["builtin#charCodes" , vars [5]  , ["." , vars [2]  , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#string"  ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#lineBorder"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#lineBorder" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript#visToString" , vars [0]    ] , ["/bootstrap#string"  ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#background"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#background" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#string"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript#visToString" , vars [0]    ] , ["/bootstrap#string"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#italic"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#italic" , vars [0]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript#visToString" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#bold"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#bold" , vars [0]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript#visToString" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#visToString" , "/bootstrap#color"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#visToString" , ["/bootstrap#color" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#string"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript#visToString" , vars [0]    ] , ["/bootstrap#string"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript/jsLogic#headPredicate"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript/jsLogic#headPredicate" , vars [0]    ] , ["/javascript/jsLogic#predicateID"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/javascript/jsLogic#predicateID" , ["/Functional#const" , vars [2]    ]   ] , ["/Functional#eval" , vars [0]  , ["/bootstrap#statement"  ] , [":-" , vars [2]  , vars [3]     ]     ]    ] , ["/javascript/jsLogic#predicateID"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript/jsLogic#predicateID"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript/jsLogic#predicateID" , vars [0]    ] , ["/javascript/jsLogic#predicateID"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#const" , ["/javascript/jsLogic#pred" , vars [2]  , vars [3]     ]   ] , ["," , ["/Functional#eval" , vars [0]  , ["/bootstrap#pred"  ] , vars [4]      ] , ["," , ["builtin#parseTerm" , ["::" , vars [4]  , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [5]      ] , ["/Functional#eval" , ["/javascript/jsLogic#length" , vars [5]    ] , ["/bootstrap#number"  ] , vars [3]      ]    ]    ]    ] , ["/javascript/jsLogic#predicateID"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript/jsLogic#length" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript/jsLogic#length" , ["[]"  ]   ] , ["/bootstrap#number"  ] , vars [0]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#wrap" , 0   ] , ["/bootstrap#number"  ] , vars [0]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript/jsLogic#length" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript/jsLogic#length" , ["." , vars [0]  , vars [1]     ]   ] , ["/bootstrap#number"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#wrap" , 1   ] , ["/Functional#numPlus"  ] , ["/javascript/jsLogic#length" , vars [1]    ]     ] , ["/bootstrap#number"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript/jsLogic#clauseFunction"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript/jsLogic#clauseFunction" , vars [0]    ] , ["/javascript#expr"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#wrap" , ["/javascript#function" , ["." , ["/javascript/jsLogic#logic"  ] , ["." , ["/javascript/jsLogic#term"  ] , ["." , ["/javascript/jsLogic#next"  ] , ["[]"  ]    ]    ]    ] , ["." , ["/javascript#var" , ["/javascript/jsLogic#vars"  ] , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#Variable"  ]   ] , "variables"    ] , ["." , ["/javascript#const" , vars [2]    ] , ["[]"  ]    ]    ]    ] , ["." , ["/javascript#if" , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "unify"    ] , ["." , ["/Functional#unwrap" , ["/javascript/jsLogic#jsTerm" , ["::" , vars [3]  , ["/bootstrap#pred"  ]    ]   ]   ] , ["." , ["/javascript#varExpr" , ["/javascript/jsLogic#term"  ]   ] , ["[]"  ]    ]    ]    ] , ["." , ["/javascript#twoStatements" , ["/Functional#unwrap" , ["/javascript/jsLogic#goalFunction" , vars [4]  , ["/Functional#wrap" , 0   ]    ]   ] , ["/javascript#exprStatement" , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "push"    ] , ["." , ["/javascript#varExpr" , ["/javascript/jsLogic#g" , 0   ]   ] , ["[]"  ]    ]    ]   ]    ] , ["[]"  ]    ] , ["[]"  ]     ] , ["[]"  ]    ]    ]    ]   ] , ["," , ["builtin#copyTerm" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["::" , [":-" , vars [3]  , vars [4]     ] , ["/bootstrap#statement"  ]    ]    ] , ["/bootstrap#saturate" , ["::" , [":-" , vars [3]  , vars [4]     ] , ["/bootstrap#statement"  ]    ] , 0 , vars [2]      ]    ]    ] , ["/javascript#expr"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript/jsLogic#goalFunction"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript/jsLogic#goalFunction" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#if" , ["=" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , vars [3]  , vars [4]     ] , ["/bootstrap#pred"  ]    ]    ] , ["/Functional#wrap" , ["/javascript#twoStatements" , ["/Functional#unwrap" , ["/javascript/jsLogic#goalFunction" , vars [4]  , ["/Functional#applyBinOp" , vars [1]  , ["/Functional#numPlus"  ] , ["/Functional#wrap" , 1   ]     ]    ]   ] , ["/javascript#var" , ["/javascript/jsLogic#g" , ["/Functional#unwrap" , vars [1]    ]   ] , ["/javascript#function" , ["[]"  ] , ["." , ["/javascript#exprStatement" , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "call"    ] , ["." , ["/Functional#unwrap" , ["/javascript/jsLogic#jsTerm" , ["::" , vars [3]  , ["/bootstrap#pred"  ]    ]   ]   ] , ["." , ["/javascript#varExpr" , ["/javascript/jsLogic#g" , ["/Functional#unwrap" , ["/Functional#applyBinOp" , vars [1]  , ["/Functional#numPlus"  ] , ["/Functional#wrap" , 1   ]     ]   ]   ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["/Functional#wrap" , ["/javascript#var" , ["/javascript/jsLogic#g" , ["/Functional#unwrap" , vars [1]    ]   ] , ["/javascript#function" , ["[]"  ] , ["." , ["/javascript#exprStatement" , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "call"    ] , ["." , ["/Functional#unwrap" , ["/javascript/jsLogic#jsTerm" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ]   ] , ["." , ["/javascript#varExpr" , ["/javascript/jsLogic#next"  ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]     ] , ["/javascript#statement"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript/jsLogic#firstArgName" , ":-"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript/jsLogic#firstArgName" , [":-" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#const" , ["/javascript#array" , vars [3]    ]   ] , ["/javascript/jsLogic#deepIndex" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , vars [3]     ]    ] , ["/javascript#expr"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript/jsLogic#reachableFrom"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript/jsLogic#reachableFrom" , vars [0]    ] , ["/bootstrap#list" , ["/javascript/jsLogic#predicateID"  ]   ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#wrap" , vars [2]    ] , ["builtin#findall" , vars [3]  , ["/javascript/jsLogic#predicateID"  ] , ["/CCS#path" , vars [0]  , ["/javascript/jsLogic#predicateID"  ] , vars [4]  , ["/javascript/jsLogic#transition"  ] , vars [5]        ] , vars [2]       ]    ] , ["/bootstrap#list" , ["/javascript/jsLogic#predicateID"  ]   ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript/jsLogic#jsTerm"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript/jsLogic#jsTerm" , vars [0]    ] , ["/javascript#expr"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#if" , ["/javascript/jsLogic#specialTermConversion" , vars [0]  , vars [2]     ] , vars [2]  , ["/Functional#where" , ["/Functional#wrap" , ["/javascript#array" , ["." , ["/javascript#str" , vars [3]    ] , ["/Functional#unwrap" , ["/Functional#map" , ["/Functional#const" , vars [4]    ] , ["/Functional#lambda" , vars [5]  , ["/Functional#where" , ["/javascript/jsLogic#jsTerm" , vars [6]    ] , ["/Functional#eval" , vars [5]  , ["/bootstrap#typedTerm"  ] , vars [6]      ]    ]    ] , ["/bootstrap#typedTerm"  ]     ]   ]    ]   ]   ] , ["builtin#parseTerm" , vars [0]  , vars [3]  , vars [4]      ]    ]     ] , ["/javascript#expr"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Functional#eval" , "/javascript#encodeString"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Functional#eval" , ["/javascript#encodeString" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/Functional#where" , ["/Functional#const" , vars [2]    ] , ["," , ["builtin#charCodes" , vars [0]  , vars [3]     ] , ["," , ["/javascript#encodeCodes" , vars [3]  , vars [4]     ] , ["builtin#charCodes" , vars [2]  , vars [4]     ]    ]    ]    ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#s"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#a"  ]   ] , ["/Test/bnf#concat" , ["/Test/bnf#s"  ] , ["/Test/bnf#token" , ["/Test/bnf#b"  ]   ]    ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#s"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#empty"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#or" , vars [1]  , vars [2]     ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , vars [1]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#or" , vars [1]  , vars [2]     ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#repeat" , vars [1]    ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#or" , ["/Test/bnf#concat" , vars [1]  , ["/Test/bnf#repeat" , vars [1]    ]    ] , ["/Test/bnf#empty"  ]    ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#sumExpr" , vars [1]    ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#multExpr" , vars [3]    ] , ["/Test/bnf#sumSuffix" , vars [3]  , vars [1]     ]    ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#sumSuffix" , vars [1]  , vars [1]     ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#empty"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#sumSuffix" , vars [1]  , ["/Functional#plus" , vars [1]  , vars [2]     ]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#symbol" , "+"   ]   ] , ["/Test/bnf#sumExpr" , vars [2]    ]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#sumSuffix" , vars [1]  , ["/Functional#minus" , vars [1]  , vars [2]     ]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#symbol" , "-"   ]   ] , ["/Test/bnf#sumExpr" , vars [2]    ]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#multExpr" , vars [1]    ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#atomicExpr" , vars [3]    ] , ["/Test/bnf#multSuffix" , vars [3]  , vars [1]     ]    ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#multSuffix" , vars [1]  , vars [1]     ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#empty"  ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#multSuffix" , vars [1]  , ["/Functional#mult" , vars [1]  , vars [2]     ]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#symbol" , "*"   ]   ] , ["/Test/bnf#multExpr" , vars [2]    ]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#multSuffix" , vars [1]  , ["/Functional#div" , vars [1]  , vars [2]     ]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#symbol" , "/"   ]   ] , ["/Test/bnf#multExpr" , vars [2]    ]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#atomicExpr" , ["/Functional#wrap" , vars [1]    ]   ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#token" , ["/Test/bnf#number" , vars [1]    ]   ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#atomicExpr" , vars [1]    ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#symbol" , "("   ]   ] , ["/Test/bnf#concat" , ["/Test/bnf#sumExpr" , vars [1]    ] , ["/Test/bnf#token" , ["/Test/bnf#symbol" , ")"   ]   ]    ]    ] , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#query"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#routeQuery"  ] , ["/Test/bnf#timeQuery"  ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#query"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#timeQuery"  ] , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#word" , ","   ]   ] , ["/Test/bnf#routeQuery"  ]    ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#query"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#routeQuery"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#routeQuery"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#word" , "from"   ]   ] , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#location" , vars [2]    ]   ] , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#word" , "to"   ]   ] , ["/Test/bnf#token" , ["/Test/bnf#location" , vars [3]    ]   ]    ]    ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#routeQuery"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#word" , "to"   ]   ] , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#location" , vars [2]    ]   ] , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#word" , "from"   ]   ] , ["/Test/bnf#token" , ["/Test/bnf#location" , vars [3]    ]   ]    ]    ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#timeQuery"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#token" , ["/Test/bnf#word" , "today"   ]   ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#timeQuery"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#token" , ["/Test/bnf#word" , "tomorrow"   ]   ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#timeQuery"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#word" , "on"   ]   ] , ["/Test/bnf#token" , ["/Test/bnf#date" , vars [2]  , vars [3]  , vars [4]      ]   ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#query" , ["/Test/bnf#trainQuery" , vars [1]  , vars [2]     ]   ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#routeQuery" , vars [1]    ] , ["/Test/bnf#timeQuery" , vars [2]    ]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#query" , ["/Test/bnf#trainQuery" , vars [1]  , vars [2]     ]   ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#timeQuery" , vars [2]    ] , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#word" , ","   ]   ] , ["/Test/bnf#routeQuery" , vars [1]    ]    ]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#query"  ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#routeQuery"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#routeQuery" , ["/Test/bnf#fromTo" , vars [1]  , vars [2]     ]   ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#word" , "from"   ]   ] , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#location" , vars [1]    ]   ] , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#word" , "to"   ]   ] , ["/Test/bnf#token" , ["/Test/bnf#location" , vars [2]    ]   ]    ]    ]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#routeQuery" , ["/Test/bnf#fromTo" , vars [1]  , vars [2]     ]   ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#word" , "to"   ]   ] , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#location" , vars [2]    ]   ] , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#word" , "from"   ]   ] , ["/Test/bnf#token" , ["/Test/bnf#location" , vars [1]    ]   ]    ]    ]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#timeQuery" , ["/Test/bnf#today"  ]   ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#token" , ["/Test/bnf#word" , "today"   ]   ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#timeQuery" , ["/Test/bnf#tomorrow"  ]   ] , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#token" , ["/Test/bnf#word" , "tomorrow"   ]   ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test/bnf#parse"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#timeQuery" , ["/Test/bnf#onDate" , vars [1]  , vars [2]  , vars [3]      ]   ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test/bnf#parse" , vars [0]  , ["/Test/bnf#concat" , ["/Test/bnf#token" , ["/Test/bnf#word" , "on"   ]   ] , ["/Test/bnf#token" , ["/Test/bnf#date" , vars [1]  , vars [2]  , vars [3]      ]   ]    ] , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#finallyEvaluatesTo" , "/Test#true"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/Test#finallyEvaluatesTo" , ["/Test#true"  ] , ["/Test#true"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#finallyEvaluatesTo" , "/Test#false"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/Test#finallyEvaluatesTo" , ["/Test#false"  ] , ["/Test#false"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#trans" , "/Test#parentheses"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test#trans" , ["/Test#parentheses" , vars [0]    ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#trans" , vars [0]  , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#trans" , "/Test#coffeeTeaMachine"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test#trans" , ["/Test#coffeeTeaMachine"  ] , vars [0]  , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#trans" , ["/Test#prefix" , ["/Test#parentheses" , ["/Test#alt" , ["/Test#prefix" , ["/Test#coffeeTeaMachine"  ] , ["/Test#tea"  ]    ] , ["/Test#prefix" , ["/Test#prefix" , ["/Test#coffeeTeaMachine"  ] , ["/Test#coffee"  ]    ] , ["/Test#quarter"  ]    ]    ]   ] , ["/Test#quarter"  ]    ] , vars [0]  , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#trans" , "/Test#vendingMachine"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/Test#trans" , ["/Test#vendingMachine"  ] , vars [0]  , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#trans" , ["/Test#vendingMachine" , ["/Functional#wrap" , 0   ]   ] , vars [0]  , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#trans" , "/Test#vendingMachine"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test#trans" , ["/Test#vendingMachine" , vars [0]    ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#trans" , ["/Test#prefix" , ["/Test#vendingMachine" , ["/Functional#plus" , vars [0]  , ["/Functional#wrap" , 0.25   ]    ]   ] , ["/Test#quarter"  ]    ] , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#trans" , "/Test#vendingMachine"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test#trans" , ["/Test#vendingMachine" , vars [0]    ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#trans" , ["/Test#cond" , ["/Test#prefix" , ["/Test#vendingMachine" , ["/Functional#minus" , vars [0]  , ["/Functional#wrap" , 0.5   ]    ]   ] , ["/Test#coffee"  ]    ] , ["/Functional#ge" , vars [0]  , ["/Functional#wrap" , 0.5   ] , ["/bootstrap#number"  ]     ]    ] , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#trans" , "/Test#vendingMachine"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test#trans" , ["/Test#vendingMachine" , vars [0]    ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#trans" , ["/Test#cond" , ["/Test#prefix" , ["/Test#vendingMachine" , ["/Functional#minus" , vars [0]  , ["/Functional#wrap" , 0.25   ]    ]   ] , ["/Test#tea"  ]    ] , ["/Functional#ge" , vars [0]  , ["/Functional#wrap" , 0.25   ] , ["/bootstrap#number"  ]     ]    ] , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#trans" , "/Test#vendingMachine"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test#trans" , ["/Test#vendingMachine" , vars [0]    ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#trans" , ["/Test#cond" , ["/Test#prefix" , ["/Test#vendingMachine" , ["/Functional#minus" , vars [0]  , ["/Functional#wrap" , 0.75   ]    ]   ] , ["/Test#soda"  ]    ] , ["/Functional#ge" , vars [0]  , ["/Functional#wrap" , 0.75   ] , ["/bootstrap#number"  ]     ]    ] , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#trans" , "/Test#vendingMachine"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test#trans" , ["/Test#vendingMachine" , vars [0]    ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#trans" , ["/Test#prefix" , ["/Test#vendingMachine" , ["/Functional#plus" , vars [0]  , ["/Functional#wrap" , 0.25   ]    ]   ] , ["/Test#quarter"  ]    ] , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#trans" , "/Test#vendingMachine"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/Test#trans" , ["/Test#vendingMachine" , vars [0]    ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Test#trans" , ["/Test#prefix" , ["/Test#vendingMachine" , ["/Functional#plus" , vars [0]  , ["/Functional#wrap" , 0.1   ]    ]   ] , ["/Test#dime"  ]    ] , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#subState"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/Test#subState" , vars [0]  , ["/Test#ready"  ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#listMember" , vars [0]  , ["/Test#state"  ] , ["." , ["/Test#waiting"  ] , ["." , ["/Test#cycling"  ] , ["[]"  ]    ]    ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#t" , "/Test#waiting"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/Test#t" , ["/Test#waiting"  ] , ["/Test#startCycling"  ] , ["/Test#cycling"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#t" , "/Test#cycling"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/Test#t" , ["/Test#cycling"  ] , ["/Test#stopCycling"  ] , ["/Test#waiting"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#t" , "/Test#idle"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/Test#t" , ["/Test#idle"  ] , ["/Test#powerUp"  ] , ["/Test#poweringUp"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#t" , "/Test#poweringUp"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/Test#t" , ["/Test#poweringUp"  ] , ["/Test#powerUpComplete"  ] , ["/Test#ready"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#t" , "/Test#ready"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/Test#t" , ["/Test#ready"  ] , ["/Test#print"  ] , ["/Test#printing"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#t" , "/Test#printing"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/Test#t" , ["/Test#printing"  ] , ["/Test#printingDone"  ] , ["/Test#ready"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#t" , "/Test#ready"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/Test#t" , ["/Test#ready"  ] , ["/Test#powerDown"  ] , ["/Test#idle"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/Test#t" , "/Test#ready"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/Test#t" , ["/Test#ready"  ] , ["/Test#default"  ] , ["/Test#waiting"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/Functional#binOp" , vars [1]    ]    ] , ["::" , ["/Functional#applyBinOp" , vars [2]  , vars [0]  , vars [3]      ] , ["/Functional#expr" , vars [1]    ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/Functional#binOp" , vars [1]    ] , ["/bootstrap#type"  ]    ] , ["::" , ["/Functional#expr" , vars [1]    ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/Functional#binOp" , vars [1]    ]    ] , ["::" , ["/Functional#applyBinOpList" , vars [2]  , vars [0]  , vars [3]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [1]    ]   ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/Functional#binOp" , vars [1]    ] , ["/bootstrap#type"  ]    ] , ["::" , ["/Functional#expr" , ["/bootstrap#list" , vars [1]    ]   ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/Functional#binOp" , vars [1]    ]    ] , ["::" , ["/Functional#applyBinOpListScalar" , vars [2]  , vars [0]  , vars [3]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [1]    ]   ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/Functional#binOp" , vars [1]    ] , ["/bootstrap#type"  ]    ] , ["::" , ["/Functional#expr" , ["/bootstrap#list" , vars [1]    ]   ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/Functional#binOp" , vars [1]    ]    ] , ["::" , ["/Functional#applyBinOpSet" , vars [2]  , vars [0]  , vars [3]      ] , ["/bootstrap#set" , vars [1]    ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/Functional#binOp" , vars [1]    ] , ["/bootstrap#type"  ]    ] , ["::" , ["/bootstrap#set" , vars [1]    ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , vars [1]     ] , ["::" , ["/Functional#const" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["::" , ["/Functional#expr" , vars [1]    ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/Test/bnf#token"  ]    ] , ["::" , ["/Test/bnf#token" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/Test/bnf#token"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/Test/bnf#pattern"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["::" , ["/Test/bnf#word" , vars [0]    ] , ["/Test/bnf#token"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#string"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/Test/bnf#token"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["::" , ["/Test/bnf#token" , ["/Test/bnf#word" , vars [0]    ]   ] , ["/Test/bnf#pattern"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#string"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/Test/bnf#pattern"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["::" , ["/Test#goal" , vars [0]    ] , ["/Test#boolean"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#pred"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/Test#boolean"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , vars [1]     ] , ["::" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#typedTerm"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["::" , ["/bootstrap#typedTerm"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["::" , [":-" , vars [0]  , ["builtin#true"  ]    ] , ["/bootstrap#statement"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#pred"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/bootstrap#statement"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#doProc" , vars [0]    ] , ["/bootstrap#command"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#procedure"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/bootstrap#command"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["::" , ["/bootstrap#vis" , vars [0]    ] , ["/bootstrap#visualization"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#typedTerm"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/bootstrap#visualization"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["::" , ["/bootstrap#label" , vars [0]    ] , ["/bootstrap#visualization"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#string"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/bootstrap#visualization"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["::" , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ] , ["/cedalionWeb/node#queryArg"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#string"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/cedalionWeb/node#queryArg"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["::" , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attr"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#string"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/cedalionWeb/xml#attr"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["::" , ["." , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#string"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["::" , ["/cedalionWeb/xml#str" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#string"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/cedalionWeb/xml#xml"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["::" , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , vars [0]    ] , vars [1]     ] , ["/cedalionWeb/xml#attribute"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#string"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/cedalionWeb/xml#attribute"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , vars [1]     ] , ["::" , ["/javascript/ajax#ajaxExpr" , ["/Functional#const" , vars [0]    ] , ["[]"  ]    ] , ["/javascript/ajax#ajaxExpr" , vars [1]    ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript/ajax#ajaxExpr" , vars [1]    ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/Functional#binOp" , vars [1]    ]    ] , ["::" , ["/javascript/ajax#applyBinOp" , vars [2]  , vars [0]  , vars [3]      ] , ["/javascript/ajax#ajaxExpr" , vars [1]    ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/Functional#binOp" , vars [1]    ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript/ajax#ajaxExpr" , vars [1]    ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["::" , ["/javascript#array" , vars [0]    ] , ["/javascript#expr"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#list" , ["/javascript#expr"  ]   ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript#expr"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["::" , ["/javascript#const" , vars [0]    ] , ["/javascript#expr"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#number"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript#expr"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::" , "/javascript#assign" , "/javascript#varExpr"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , ["/javascript#assign" , ["/javascript#varExpr" , vars [0]    ] , vars [1]     ] , ["/javascript#statement"  ]    ] , ["::" , vars [0]  , ["/javascript#symbol"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript#statement"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript#symbol"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["::" , ["/javascript/asyncproc#andThen" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript/asyncproc#asyncProc"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript/jsLogic#procedure"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["::" , ["/javascript/jsLogic#runProcedure" , ["/javascript/asyncproc#andThen" , vars [0]  , vars [1]     ]   ] , ["/javascript#statement"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript/asyncproc#asyncProc"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript#statement"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["::" , ["/javascript/asyncproc#sync" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript/jsLogic#procedure"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript/asyncproc#asyncProc"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/javascript#symbol"  ]    ] , ["::" , ["/javascript#varExpr" , vars [0]    ] , ["/javascript#expr"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript#symbol"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript#expr"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/javascript#symbol"  ]    ] , ["::" , ["/javascript#call" , ["/javascript#varExpr" , vars [0]    ] , ["[]"  ]    ] , ["/javascript#expr"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript#symbol"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript#expr"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/javascript#symbol"  ]    ] , ["::" , ["/javascript#exprStatement" , ["/javascript#call" , ["/javascript#varExpr" , vars [0]    ] , ["[]"  ]    ]   ] , ["/javascript#statement"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript#symbol"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript#statement"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["::" , ["/javascript#exprStatement" , vars [0]    ] , ["/javascript#statement"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript#expr"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript#statement"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/javascript#symbol"  ]    ] , ["::" , __symbol0 , ["/javascript/jsLogic#jsExpr"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript#symbol"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript/jsLogic#jsExpr"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["::" , ["/javascript/jsLogic#runProcedure" , vars [0]    ] , ["/javascript#statement"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript/jsLogic#procedure"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript#statement"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["::" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [vars [0]   ]    }  )  , ["/javascript/jsLogic#jsCommand"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript/jsLogic#procedure"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript/jsLogic#jsCommand"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["::" , ["/javascript#bind" , ["/javascript#str" , vars [0]    ] , vars [1]     ] , ["/javascript#fieldAssignment"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#string"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript#fieldAssignment"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["::" , ["/javascript#str" , vars [0]    ] , ["/javascript#expr"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#string"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript#expr"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/javascript#operator"  ]    ] , ["::" , ["/javascript#op" , vars [1]  , vars [0]  , vars [2]      ] , ["/javascript#expr"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript#operator"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript#expr"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["::" , ["/javascript/statepred#clause" , vars [0]  , ["/javascript/statepred#pred" , ["builtin#true"  ]   ]    ] , ["/bootstrap#statement"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/javascript/statepred#statePred"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/bootstrap#statement"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/Functional#binOp" , vars [1]    ]    ] , ["::" , ["/javascript/statepred#stateApplyBinOp" , vars [2]  , vars [0]  , vars [3]      ] , ["/javascript/statepred#stateExpr" , vars [1]    ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/Functional#binOp" , vars [1]    ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript/statepred#stateExpr" , vars [1]    ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["::" , ["/javascript/statepred#expr" , vars [0]    ] , ["/javascript/statepred#stateExpr" , vars [1]    ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/Functional#expr" , vars [1]    ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript/statepred#stateExpr" , vars [1]    ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , vars [1]     ] , ["::" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , vars [1]    ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript/statepred#stateExpr" , vars [1]    ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkAdapter" , "::"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#checkAdapter" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["::" , ["/javascript/statepred#pred" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["\\+" , ["=" , ["::" , ["/bootstrap#pred"  ] , ["/bootstrap#type"  ]    ] , ["::" , ["/javascript/statepred#statePred"  ] , ["/bootstrap#type"  ]    ]    ]   ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#switch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#switch" , vars [0]  , vars [1]  , ["/Functional#otherwise" , vars [2]    ]     ] , ["/Functional#expr" , vars [3]    ]    ] , "case"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#gt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#gt" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ">"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#ge"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#ge" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ">="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#eval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , "<="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#minus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , "-"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#mult"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#mult" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , "*"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#div"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#div" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , "/"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#idiv"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#idiv" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , "//"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#def"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#def" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , "=def"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#parentheses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#parentheses" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , "()"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#pairType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#pairType" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , "*"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#plus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#plus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , "+"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#concat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#concat" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , "+"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test/bnf#parse"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test/bnf#parse" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , "=>"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#evaluatesTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#evaluatesTo" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "->"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#finallyEvaluatesTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#finallyEvaluatesTo" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "->*"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#parens"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#parens" , vars [0]    ] , ["/Test#boolean"  ]    ] , "()"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#trans"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#trans" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , "->"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#prefix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#prefix" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , "."    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#alt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#alt" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , "+"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#procDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#procDef" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "<="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#parentheses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#parentheses" , vars [0]    ] , ["/Test#process"  ]    ] , "()"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#reaches"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#reaches" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "path exists"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#cond"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#cond" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , "[]"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#projection"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "->>"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "\\+"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["\\+" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , "not"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "\\+"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["\\+" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , "\\+"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "annotation#parentheses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["annotation#parentheses" , vars [0]    ] , vars [1]     ] , "()"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "annotation#comment"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["annotation#comment" , vars [0]  , vars [1]     ] , vars [2]     ] , "//"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#typedTerm"  ]    ] , "::"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "~>"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["~>" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "~>"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , ","    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["," , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ","    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#disabled"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#disabled" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , "//"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#doc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#doc" , vars [0]  , ["/bootstrap#signature" , vars [1]  , vars [2]     ]    ] , ["/bootstrap#statement"  ]    ] , "//"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "builtin#equals"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["builtin#equals" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "=="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#listMember"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#listMember" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , "in"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#projection"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , "@->>"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#setParens"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#setParens" , vars [0]    ] , ["/bootstrap#set" , vars [1]    ]    ] , "()"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "cpi#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["cpi#vis" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , "<<@>>"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#vis" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "<<>>"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#label"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#label" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "\"\""    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#dynamicList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#dynamicList" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , "{}"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/jquery#onDelayed"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/jquery#onDelayed" , "click" , vars [0]  , vars [1]  , vars [2]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : []    }  )        ] , ["/javascript/jsLogic#procedure"  ]    ] , "on [delayed]"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb#rewrite"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb#rewrite" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "~>"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/ui#displayWhile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/ui#displayWhile" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , "display image while"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/ui#ajaxFor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/ui#ajaxFor" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , "for (s)"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/xml#elem" , "/Functional#const"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/xml#elem" , ["/Functional#const" , "name"   ] , ["[]"  ] , ["/cedalionWeb/xml#empty"  ]     ] , ["/cedalionWeb/xml#xml"  ]    ] , "</>"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/xml#elem2" , "/Functional#const"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "name"   ] , ["[]"  ] , ["/cedalionWeb/xml#empty"  ]     ] , ["/cedalionWeb/xml#xml"  ]    ] , "</>"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "xml#element"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["xml#element" , vars [0]  , vars [1]  , vars [2]      ] , ["/html#xml"  ]    ] , "</>"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "xml#attribute"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["xml#attribute" , vars [0]  , vars [1]  , vars [2]      ] , ["/html#xmlAttr"  ]    ] , "="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/html#unicode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/html#unicode" , vars [0]    ] , ["/html#xml"  ]    ] , "&#;"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/ajax#ajaxDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/ajax#ajaxDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , "ajax="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#arrayElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#arrayElement" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , "[]"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , ":-" , "/javascript/asyncproc#asyncProc"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , [":-" , ["/javascript/asyncproc#asyncProc" , vars [0]  , vars [1]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : []    }  )      ] , ["builtin#true"  ]    ] , ["/bootstrap#statement"  ]    ] , "async procedure triggering"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/asyncproc#catch" , "/javascript/asyncproc#block" , "[]"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/asyncproc#catch" , ["/javascript/asyncproc#block" , ["[]"  ]   ] , vars [0]  , ["/javascript/asyncproc#block" , ["[]"  ]   ]     ] , ["/javascript/asyncproc#asyncProc"  ]    ] , "try"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/asyncproc#procDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/asyncproc#procDef" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "async procedure"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/asyncproc#block" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/asyncproc#block" , ["[]"  ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , "{}"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#call"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#call" , vars [0]  , ["[]"  ]    ] , ["/javascript#expr"  ]    ] , "f()"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "annotation#shrink" , "/javascript#function" , "[]"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["annotation#shrink" , ["/javascript#function" , ["[]"  ] , ["[]"  ]    ]   ] , ["/javascript#expr"  ]    ] , "fn(){}"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/jsLogic#inlineTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/jsLogic#inlineTerm" , vars [0]    ] , ["/javascript#expr"  ]    ] , "::"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/jsLogic#foreach"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , "for"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#json"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#json" , vars [0]    ] , ["/javascript#expr"  ]    ] , "{}"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#clause"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#clause" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ":-"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#conj"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#conj" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ","    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#def"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#def" , vars [0]  , vars [1]  , vars [2]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : []    }  )       ] , ["/bootstrap#statement"  ]    ] , "state predicate"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#set"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#set" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateSet" , vars [2]    ]    ] , "{|}"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#stateEval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#stateEval" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , "<= (s)"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#stateExprDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#stateExprDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , "=def (s)"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#whenever"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , "for (s) ... finally"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#whenever"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , "for (s)"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#pred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#pred" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , "<>"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#numPlus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#numPlus"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , "+"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#minus"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , "-"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#times"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#times"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , "*"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#divBy"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#divBy"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , "/"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#concat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#concat"  ] , ["/Functional#binOp" , ["/bootstrap#string"  ]   ]    ] , "+"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test/bnf#s"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test/bnf#s"  ] , ["/Test/bnf#pattern"  ]    ] , "S"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#semanticDefinition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#semanticDefinition"  ] , ["/bootstrap#definitionType"  ]    ] , "Semantic Definition"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#typeSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#typeSignature"  ] , ["/bootstrap#definitionType"  ]    ] , "Type Signature"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#projectionDefinition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#projectionDefinition"  ] , ["/bootstrap#definitionType"  ]    ] , "Projection Definition"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#requiredSemanticDefinition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#requiredSemanticDefinition"  ] , ["/bootstrap#definitionType"  ]    ] , "Required Semantic Definition"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#signatureSizeMismatch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#signatureSizeMismatch"  ] , ["/bootstrap#error"  ]    ] , "The size of the signature head does not match the size of the body"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#date"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#date"  ] , ["/javascript#symbol"  ]    ] , "Date"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/jsLogic#jQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/jsLogic#jQuery"  ] , ["/javascript#symbol"  ]    ] , "$"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#plus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#plus"  ] , ["/javascript#operator"  ]    ] , "+"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#minus"  ] , ["/javascript#operator"  ]    ] , "-"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#times"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#times"  ] , ["/javascript#operator"  ]    ] , "*"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#div"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#div"  ] , ["/javascript#operator"  ]    ] , "/"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#and"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#and"  ] , ["/javascript#operator"  ]    ] , "&&"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#or"  ] , ["/javascript#operator"  ]    ] , "||"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#eq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#eq"  ] , ["/javascript#operator"  ]    ] , "=="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#eqq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#eqq"  ] , ["/javascript#operator"  ]    ] , "==="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#gt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#gt"  ] , ["/javascript#operator"  ]    ] , ">"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#lt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#lt"  ] , ["/javascript#operator"  ]    ] , "<"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#ne"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#ne"  ] , ["/javascript#operator"  ]    ] , "!="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#gte"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#gte"  ] , ["/javascript#operator"  ]    ] , ">="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#lte"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#lte"  ] , ["/javascript#operator"  ]    ] , "<="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "mod"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["mod"  ] , ["/javascript#operator"  ]    ] , "%"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#researchPaper"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#researchPaper"  ] , ["/Test#eventType"  ]    ] , "Research Paper"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#demo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#demo"  ] , ["/Test#eventType"  ]    ] , "Demo"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#am"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#am"  ] , ["/Test#ampm"  ]    ] , "AM"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#pm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#pm"  ] , ["/Test#ampm"  ]    ] , "PM"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#tue"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#tue"  ] , ["/Test#conferenceDay"  ]    ] , "Tuesday"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#wed"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#wed"  ] , ["/Test#conferenceDay"  ]    ] , "Wednesday"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#thu"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#thu"  ] , ["/Test#conferenceDay"  ]    ] , "Thursday"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#east"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#east"  ] , ["/Test#direction"  ]    ] , "East"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#otherwise"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#otherwise" , vars [0]    ] , ["/Functional#cases" , vars [1]  , vars [2]     ]    ] , "otherwise:"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#apply"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#apply" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , "["    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#f"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#f" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , "f"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test/bnf#symbol"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test/bnf#symbol" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , "\""    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test/bnf#trainQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test/bnf#trainQuery" , vars [0]  , vars [1]     ] , ["/Test/bnf#trainQuery"  ]    ] , "Find train"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test/bnf#fromTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test/bnf#fromTo" , vars [0]  , vars [1]     ] , ["/Test/bnf#routeQueryType"  ]    ] , "from"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test/bnf#onDate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test/bnf#onDate" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test/bnf#timeQueryType"  ]    ] , "on"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test/bnf#word"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test/bnf#word" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , "\""    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#reaches"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#reaches" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "Path"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#sayHelloTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#sayHelloTo" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , "Say hello to"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#p"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#p" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "there is a path from"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#pavilion"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#pavilion" , vars [0]    ] , ["/Test#location"  ]    ] , "Pavilion"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#galleria"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#galleria" , vars [0]    ] , ["/Test#location"  ]    ] , "Galleria"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#visitUsAt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#visitUsAt" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , "Visit us at:"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#initialState"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#initialState" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , "The initial state is"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#transition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#transition" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , "While"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#hello"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#hello" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , "Hello, "    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#adapter"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#adapter" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "use"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#alias"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#alias" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "use"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#defAtom"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#defAtom" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , "declare"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#default"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#default" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , "Use"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#projection"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "display"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#signature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "declare"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#generateFileForSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#generateFileForSet" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , "Generate file"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#missing"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#missing" , vars [0]    ] , ["/bootstrap#error"  ]    ] , "Missing statement:"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#deprecationReplacement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#deprecationReplacement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , "Deprecated"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "builtin#import"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["builtin#import" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "import"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#foreach"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#foreach" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , "for each"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "builtin#findall"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["builtin#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , "Find all"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#signaturePlaceMismatch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#signaturePlaceMismatch" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ] , "In a type signature, head and body arguments must appear in the same order:"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#nonVarInSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#nonVarInSignature" , vars [0]    ] , ["/bootstrap#error"  ]    ] , "In a type signature, all head arguments must be variables:"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#signatureVarInBodyAndNotInHead"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [0]    ] , ["/bootstrap#error"  ]    ] , "Variable"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#symbolRange"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#symbolRange" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , "Symbols"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#tip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#tip" , vars [0]    ] , ["/bootstrap#marker"  ]    ] , "Tip:"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#tip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#tip" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , "Tip"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#missingSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#missingSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , "Missing signature:"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#failedTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#failedTest" , vars [0]    ] , ["/bootstrap#error"  ]    ] , "Test"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#insertStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#insertStatement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , "Insert:"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#label"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#label" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "\""    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#varNameMacroStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#varNameMacroStatement" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "Variable"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#varNameSuffix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#varNameSuffix" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , "Variable suffix"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/couchdb#insertDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , "insert document"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/couchdb#updateDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , "update document"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/couchdb#updateDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#statePred"  ]    ] , "update document"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "cjs#verifyDatabaseRev"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["cjs#verifyDatabaseRev" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , "verify database"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/jquery#animate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , "animate"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/jquery#runAfterGen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/jquery#runAfterGen" , vars [0]    ] , ["/cedalionWeb/xml#annotation"  ]    ] , "run"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/jquery#animate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/cedalionWeb/xml#xml"  ]    ] , "animate"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/jquery#changeContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/jquery#changeContent" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , "set the content of"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/jquery#applyAnnot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/jquery#applyAnnot" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , "apply"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/jquery#modifyElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/jquery#modifyElement" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , "modify the content of"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/jquery#replaceWith"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/jquery#replaceWith" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , "replace"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/jquery#prependTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/jquery#prependTo" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , "prepend"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/jquery#appendTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/jquery#appendTo" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , "append"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb#addKeyComponents"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb#addKeyComponents" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , "add key components of"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/node#get"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/node#get" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , "GET"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/node#json"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/node#json" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , "JSON"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/node#jsonStringify"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/node#jsonStringify" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , "JSON"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/node#urlQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/node#urlQuery" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , "?"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/visualization#editActionIcon"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/visualization#editActionIcon" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , "action icon"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/visualization#suggestion"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/visualization#suggestion" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , "suggest"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/visualization#edit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/visualization#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/cedalionWeb/xml#xml"  ]    ] , "edit term"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/visualization#visualizeDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , "descriptor"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/visualization#defineModifier"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/visualization#defineModifier" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , "modifier"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/xml#macro"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/xml#macro" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "xml macro"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/xml#entity"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/xml#entity" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , "&#"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/html#entity"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/html#entity" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "Entity"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "xml#string"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["xml#string" , vars [0]    ] , ["/html#xml"  ]    ] , "'"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/html#unicode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/html#unicode" , vars [0]    ] , ["/html#xml"  ]    ] , "&#"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#var"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#var" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , "var"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#new"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#new" , vars [0]    ] , ["/javascript#expr"  ]    ] , "new"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#return"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#return" , vars [0]    ] , ["/javascript#statement"  ]    ] , "return"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#return"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#return"  ] , ["/javascript#statement"  ]    ] , "return"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/jsLogic#throw"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/jsLogic#throw" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , "throw"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/jsLogic#typeof"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/jsLogic#typeof" , vars [0]    ] , ["/javascript#expr"  ]    ] , "typeof"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/jsLogic#length"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/jsLogic#length" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "the length of"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/jsLogic#do"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/jsLogic#do" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , "do"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/jsLogic#renderHTML"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/jsLogic#renderHTML" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , "Place HTML"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#async"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#async" , vars [0]    ] , ["/javascript#expr"  ]    ] , "async"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#findall"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , "find all"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#trace"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#trace" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , "trace"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#unitTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , "unit test"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#break"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#break"  ] , ["/javascript#statement"  ]    ] , "break"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#error"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#error" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , "Error"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/couchdb#viewResults"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/couchdb#viewResults" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , "view"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "cjs#get"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["cjs#get" , vars [0]  , vars [1]     ] , ["/javascript/ajax#request"  ]    ] , "GET"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "builtin#greaterThen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["builtin#greaterThen" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ">"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#minus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , "-"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#mult"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#mult" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , "*"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#idiv"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#idiv" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , "//"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#modulus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#modulus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , "mod"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#pair"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#pair" , vars [0]  , vars [1]     ] , ["/Functional#pairType" , vars [2]  , vars [3]     ]    ] , ","    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#plus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#plus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , "+"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#element"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#element" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , "["    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#concat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#concat" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , "+"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Functional#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Functional#where" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , "where"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test/bnf#concat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test/bnf#concat" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , " "    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test/bnf#prod"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test/bnf#prod" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "::="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#final"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#final" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , "is final"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#prefix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#prefix" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , "."    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#alt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#alt" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , "+"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#costs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#costs" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "costs"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#worths"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#worths" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "worths"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#statements"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#statements" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , "   "    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#time"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#time" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test#eventTime"  ]    ] , ","    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test#subState"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test#subState" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "is a substate of"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#typedTerm"  ]    ] , "::"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , ":-"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , [":-" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ":-"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#defines"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#defines" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , "defines"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#deprecated"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#deprecated" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , "is deprecated"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "cpi#path"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["cpi#path" , vars [0]  , vars [1]     ] , ["cpi#path"  ]    ] , "/"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "builtin#succ"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["builtin#succ" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , ">"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , [">" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ">"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "="    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["=" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "+"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["+" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , "+"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "-"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["-" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , "+"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "builtin#equals"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["builtin#equals" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "=="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#assign"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#assign" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , ":="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#where" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , "where"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#projection"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , "@"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#diffSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#diffSet" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , "\\"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#shortcutKey"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#shortcutKey" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , "is shortcut for"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#true"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#true" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , "!"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#missingSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#missingSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , "declare"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/jquery#ajaxQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/jquery#ajaxQuery" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , "on server"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/jquery#onServer"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/jquery#onServer" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , "on server"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/node#dot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/node#dot" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , "."    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/node#arrayElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/node#arrayElement" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , "is an element in"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/node#arg"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ] , ["/cedalionWeb/node#queryArg"  ]    ] , "="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb#implies"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb#implies" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "implies"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/xml#generates"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , "generates"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/xml#attr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attr"  ]    ] , "="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/xml#generates2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/xml#generates2" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , "generates"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/cedalionWeb/xml#attr2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/cedalionWeb/xml#attr2" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attribute"  ]    ] , "="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "xml#attribute"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["xml#attribute" , vars [0]  , vars [1]  , vars [2]      ] , ["/html#xmlAttr"  ]    ] , "="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "cjs#ajaxEval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["cjs#ajaxEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , "evaluates to"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#assign"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#assign" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , "="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#hasSpecialRendering"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#hasSpecialRendering" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , "has special rendering as"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#exprStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#exprStatement" , vars [0]    ] , ["/javascript#statement"  ]    ] , ";"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#return"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#return"  ] , ["/javascript#statement"  ]    ] , ";"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#equal"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#equal" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , "=="    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/jsLogic#pred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/jsLogic#pred" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#predicateID"  ]    ] , "/"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#bind"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#bind" , vars [0]  , vars [1]     ] , ["/javascript#fieldAssignment"  ]    ] , ":"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#dot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#dot" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , "."    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/optimization#concatGoals"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/optimization#concatGoals" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , "is the concatenation of"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#pair"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#pair" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [2]  , vars [3]     ]   ]    ] , ","    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript/statepred#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript/statepred#where" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , "where"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/javascript#break"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/javascript#break"  ] , ["/javascript#statement"  ]    ] , ";"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/Test/bnf#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/Test/bnf#or" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , "|"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#aliasString" , "::" , "/bootstrap#append"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#aliasString" , ["::" , ["/bootstrap#append" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , "is the concatenation of"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#defaultRepresentation" , "::" , "/bootstrap#projection" , "::"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#defaultRepresentation" , ["::" , ["/bootstrap#projection" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , ["/bootstrap#statement"  ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#defaultRepresentation" , "::" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#defaultRepresentation" , ["::" , ["[]"  ] , ["/bootstrap#list" , vars [0]    ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#defaultRepresentation" , "::" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#defaultRepresentation" , ["::" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#typedTerm"  ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#defaultRepresentation" , "::" , "cpi#rgb"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#defaultRepresentation" , ["::" , ["cpi#rgb" , 0 , 0 , 0     ] , ["/bootstrap#color"  ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#defaultRepresentation" , "::" , "xml#element"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#defaultRepresentation" , ["::" , ["xml#element" , "name" , ["[]"  ] , ["[]"  ]     ] , ["/html#xml"  ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#defaultRepresentation" , "::" , "xml#attribute"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#defaultRepresentation" , ["::" , ["xml#attribute" , "name" , ["/bootstrap#string"  ] , "value"     ] , ["/html#xmlAttr"  ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#defaultRepresentation" , "::" , "/javascript/jsLogic#jsCommand" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#defaultRepresentation" , ["::" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : []    }  )  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isShortcutKey"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#isShortcutKey" , "Insert" , "Shift+Alt+Ins"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isShortcutKey"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#isShortcutKey" , "Append" , "Alt+Ins"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isShortcutKey"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#isShortcutKey" , "Delete" , "Shift+Alt+Del"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isShortcutKey"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#isShortcutKey" , "Paste" , "Ctrl+Alt+V"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isShortcutKey"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#isShortcutKey" , "Show Definitions" , "F8"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isShortcutKey"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#isShortcutKey" , "Undo" , "Ctrl+Alt+Z"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isShortcutKey"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#isShortcutKey" , "Redo" , "Ctrl+Shift+Alt+Z"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isShortcutKey"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#isShortcutKey" , "Cut" , "Ctrl+Alt+X"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isShortcutKey"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#isShortcutKey" , "Define projection" , "F9"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isShortcutKey"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#isShortcutKey" , "Create sub-tests" , "Ctrl+F10"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isShortcutKey"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#isShortcutKey" , "Apply first goal" , "Ctrl+Shift+F10"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["/bootstrap#Yellow tag.png"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#minComment" , vars [6]  , vars [7]     ] , vars [8]     ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Minimize comment" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#minComment" , vars [6]  , vars [7]     ] , vars [8]     ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Minimize comment" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#minComment" , vars [6]  , vars [7]     ] , vars [8]     ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["annotation#comment" , vars [6]  , vars [7]     ] , vars [8]     ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["/bootstrap#Yellow tag.png"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#comment" , vars [6]  , vars [7]     ] , vars [8]     ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Restore comment" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#comment" , vars [6]  , vars [7]     ] , vars [8]     ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Restore comment" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#comment" , vars [6]  , vars [7]     ] , vars [8]     ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["annotation#minComment" , vars [6]  , vars [7]     ] , vars [8]     ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (17  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["/bootstrap#Delete.png"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [13]  , vars [15]     ] , ["," , ["builtin#strcat" , vars [13]  , "	" , vars [16]      ] , ["builtin#strcat" , vars [16]  , vars [15]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [13]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , vars [8]  , vars [7]      ]   ] , ["," , ["\\+" , ["builtin#var" , vars [6]    ]   ] , ["," , ["/bootstrap#safeParseTerm" , vars [6]  , vars [9]  , ["." , vars [8]  , vars [10]     ]     ] , ["builtin#strcat" , "annotation#" , vars [11]  , vars [9]      ]    ]    ]    ] , vars [12]     ] , ["," , ["=" , ["::" , vars [13]  , ["/bootstrap#string"  ]    ] , ["::" , "Remove annotation" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , vars [8]  , vars [7]      ]   ] , ["," , ["\\+" , ["builtin#var" , vars [6]    ]   ] , ["," , ["/bootstrap#safeParseTerm" , vars [6]  , vars [9]  , ["." , vars [8]  , vars [10]     ]     ] , ["builtin#strcat" , "annotation#" , vars [11]  , vars [9]      ]    ]    ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [14]  , ["," , ["builtin#strcat" , "<exception>: " , "Remove annotation" , vars [13]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , vars [8]  , vars [7]      ]   ] , ["," , ["\\+" , ["builtin#var" , vars [6]    ]   ] , ["," , ["/bootstrap#safeParseTerm" , vars [6]  , vars [9]  , ["." , vars [8]  , vars [10]     ]     ] , ["builtin#strcat" , "annotation#" , vars [11]  , vars [9]      ]    ]    ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor" , "cpi#path"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , vars [4]     ] , ["/bootstrap#menuItem" , vars [5]  , vars [6]  , ["/bootstrap#Undo.png"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [5]      ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#undo" , vars [0]    ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Undo" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [6]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#undo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Undo" , vars [10]      ] , ["=" , ["::" , vars [6]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#undo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [7]  , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor" , "cpi#path"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , vars [4]     ] , ["/bootstrap#menuItem" , vars [5]  , vars [6]  , ["/bootstrap#Redo.png"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [5]      ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#redo" , vars [0]    ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Redo" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [6]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#redo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Redo" , vars [10]      ] , ["=" , ["::" , vars [6]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#redo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [7]  , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["/bootstrap#Cut.png"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#cut" , ["." , vars [6]  , vars [7]     ] , vars [8]  , vars [9]  , vars [0]       ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Cut" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#cut" , ["." , vars [6]  , vars [7]     ] , vars [8]  , vars [9]  , vars [0]       ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Cut" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#cut" , ["." , vars [6]  , vars [7]     ] , vars [8]  , vars [9]  , vars [0]       ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , vars [6]  , vars [7]     ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["/bootstrap#Paste.png"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#paste" , vars [6]  , vars [7]  , vars [8]  , vars [0]       ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Paste" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#paste" , vars [6]  , vars [7]  , vars [8]  , vars [0]       ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Paste" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#paste" , vars [6]  , vars [7]  , vars [8]  , vars [0]       ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/bootstrap#list" , vars [7]    ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["/bootstrap#Search.png"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#doShowDefinitions" , vars [6]    ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Show Definitions" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#doShowDefinitions" , vars [6]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Show Definitions" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#doShowDefinitions" , vars [6]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["/bootstrap#Create.png"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["." , vars [9]  , vars [6]     ] , ["/bootstrap#list" , vars [7]    ]    ] , vars [8]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Insert" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , vars [9]  , vars [6]     ] , ["/bootstrap#list" , vars [7]    ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Insert" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , vars [9]  , vars [6]     ] , ["/bootstrap#list" , vars [7]    ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/bootstrap#list" , vars [7]    ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["/bootstrap#Create.png"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["." , vars [6]  , ["." , vars [10]  , vars [7]     ]    ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Append" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , vars [6]  , ["." , vars [10]  , vars [7]     ]    ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Append" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , vars [6]  , ["." , vars [10]  , vars [7]     ]    ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , vars [6]  , vars [7]     ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["/bootstrap#Delete.png"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , vars [7]  , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Delete" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , vars [7]  , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Delete" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , vars [7]  , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , vars [6]  , vars [7]     ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (17  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [13]  , vars [15]     ] , ["," , ["builtin#strcat" , vars [13]  , "	" , vars [16]      ] , ["builtin#strcat" , vars [16]  , vars [15]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [13]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["/Functional#case" , vars [10]  , vars [11]  , vars [6]      ] , ["/Functional#cases" , vars [7]  , vars [8]     ]    ] , vars [9]      ] , vars [12]     ] , ["," , ["=" , ["::" , vars [13]  , ["/bootstrap#string"  ]    ] , ["::" , "Insert Case" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/Functional#case" , vars [10]  , vars [11]  , vars [6]      ] , ["/Functional#cases" , vars [7]  , vars [8]     ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [14]  , ["," , ["builtin#strcat" , "<exception>: " , "Insert Case" , vars [13]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/Functional#case" , vars [10]  , vars [11]  , vars [6]      ] , ["/Functional#cases" , vars [7]  , vars [8]     ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/Functional#cases" , vars [7]  , vars [8]     ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (17  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [13]  , vars [15]     ] , ["," , ["builtin#strcat" , vars [13]  , "	" , vars [16]      ] , ["builtin#strcat" , vars [16]  , vars [15]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [13]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , vars [8]  , ["/Functional#cases" , vars [9]  , vars [10]     ]    ] , vars [11]      ] , vars [12]     ] , ["," , ["=" , ["::" , vars [13]  , ["/bootstrap#string"  ]    ] , ["::" , "Remove Case" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , vars [8]  , ["/Functional#cases" , vars [9]  , vars [10]     ]    ] , vars [11]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [14]  , ["," , ["builtin#strcat" , "<exception>: " , "Remove Case" , vars [13]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , vars [8]  , ["/Functional#cases" , vars [9]  , vars [10]     ]    ] , vars [11]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#case" , vars [6]  , vars [7]  , vars [8]      ] , ["/Functional#cases" , vars [9]  , vars [10]     ]    ] , vars [11]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (17  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [13]  , vars [15]     ] , ["," , ["builtin#strcat" , vars [13]  , "	" , vars [16]      ] , ["builtin#strcat" , vars [16]  , vars [15]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [13]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , vars [9]  , ["/Functional#expr" , vars [7]    ]    ] , vars [10]      ]   ] , ["/Functional#wrapToConst" , ["/Functional#wrap" , vars [6]    ] , vars [9]  , vars [7]  , vars [8]  , vars [10]  , 1 , vars [11]          ]    ] , vars [12]     ] , ["," , ["=" , ["::" , vars [13]  , ["/bootstrap#string"  ]    ] , ["::" , "Convert Wrap to Const" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , vars [9]  , ["/Functional#expr" , vars [7]    ]    ] , vars [10]      ]   ] , ["/Functional#wrapToConst" , ["/Functional#wrap" , vars [6]    ] , vars [9]  , vars [7]  , vars [8]  , vars [10]  , 1 , vars [11]          ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [14]  , ["," , ["builtin#strcat" , "<exception>: " , "Convert Wrap to Const" , vars [13]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , vars [9]  , ["/Functional#expr" , vars [7]    ]    ] , vars [10]      ]   ] , ["/Functional#wrapToConst" , ["/Functional#wrap" , vars [6]    ] , vars [9]  , vars [7]  , vars [8]  , vars [10]  , 1 , vars [11]          ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#wrap" , vars [6]    ] , ["/Functional#expr" , vars [7]    ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["/Functional#wrap" , vars [9]    ] , ["/Functional#expr" , vars [7]    ]    ] , vars [8]      ]   ] , ["/Functional#eval" , vars [6]  , vars [7]  , vars [9]      ]    ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Evaluate" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["/Functional#wrap" , vars [9]    ] , ["/Functional#expr" , vars [7]    ]    ] , vars [8]      ]   ] , ["/Functional#eval" , vars [6]  , vars [7]  , vars [9]      ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Evaluate" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["/Functional#wrap" , vars [9]    ] , ["/Functional#expr" , vars [7]    ]    ] , vars [8]      ]   ] , ["/Functional#eval" , vars [6]  , vars [7]  , vars [9]      ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/Functional#expr" , vars [7]    ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#unitTest" , ["/Functional#eval" , vars [6]  , vars [7]  , vars [9]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Turn to unit test" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#unitTest" , ["/Functional#eval" , vars [6]  , vars [7]  , vars [9]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Turn to unit test" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#unitTest" , ["/Functional#eval" , vars [6]  , vars [7]  , vars [9]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#sandbox" , ["::" , vars [6]  , ["/Functional#expr" , vars [7]    ]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/Functional#insertExpression" , vars [0]  , vars [7]     ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Insert Expression" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Functional#insertExpression" , vars [0]  , vars [7]     ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Insert Expression" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Functional#insertExpression" , vars [0]  , vars [7]     ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , vars [7]     ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/Functional#generateXMLFile" , "gen.xml" , vars [6]     ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Generate XML File" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Functional#generateXMLFile" , "gen.xml" , vars [6]     ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Generate XML File" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Functional#generateXMLFile" , "gen.xml" , vars [6]     ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/html#xml"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/Test#sayHelloTo" , vars [6]  , vars [7]     ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Say Hello" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Test#sayHelloTo" , vars [6]  , vars [7]     ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Say Hello" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Test#sayHelloTo" , vars [6]  , vars [7]     ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/Test#showAllSignaturesForNamespace" , vars [6]    ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Show all signatures for namespace" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Test#showAllSignaturesForNamespace" , vars [6]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Show all signatures for namespace" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Test#showAllSignaturesForNamespace" , vars [6]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/Test#splitStatementList" , vars [6]  , vars [7]  , vars [0]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Split here" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Test#splitStatementList" , vars [6]  , vars [7]  , vars [0]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Split here" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Test#splitStatementList" , vars [6]  , vars [7]  , vars [0]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/Test#showNumbered" , ["::" , vars [6]  , ["/bootstrap#list" , vars [7]    ]    ] , vars [0]  , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Show numbered" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Test#showNumbered" , ["::" , vars [6]  , ["/bootstrap#list" , vars [7]    ]    ] , vars [0]  , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Show numbered" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Test#showNumbered" , ["::" , vars [6]  , ["/bootstrap#list" , vars [7]    ]    ] , vars [0]  , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/bootstrap#list" , vars [7]    ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#showView" , ["cpi#vis" , ["::" , ["cpi#descriptor" , vars [0]  , vars [6]  , ["[]"  ]     ] , vars [7]     ] , ["/bootstrap#vert"  ]    ]   ] , ["builtin#true"  ]    ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Show in view" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#showView" , ["cpi#vis" , ["::" , ["cpi#descriptor" , vars [0]  , vars [6]  , ["[]"  ]     ] , vars [7]     ] , ["/bootstrap#vert"  ]    ]   ] , ["builtin#true"  ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Show in view" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#showView" , ["cpi#vis" , ["::" , ["cpi#descriptor" , vars [0]  , vars [6]  , ["[]"  ]     ] , vars [7]     ] , ["/bootstrap#vert"  ]    ]   ] , ["builtin#true"  ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , vars [7]     ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/Test#changeState" , vars [6]  , vars [8]  , vars [7]  , vars [0]       ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , vars [8]  , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Test#changeState" , vars [6]  , vars [8]  , vars [7]  , vars [0]       ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , vars [8]  , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/Test#changeState" , vars [6]  , vars [8]  , vars [7]  , vars [0]       ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/Test#state"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#signature" , vars [6]  , ["[]"  ]    ] , ["." , ["/bootstrap#projection" , vars [6]  , ["/bootstrap#label" , "alias"   ]    ] , vars [7]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Create an alias" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#signature" , vars [6]  , ["[]"  ]    ] , ["." , ["/bootstrap#projection" , vars [6]  , ["/bootstrap#label" , "alias"   ]    ] , vars [7]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Create an alias" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#signature" , vars [6]  , ["[]"  ]    ] , ["." , ["/bootstrap#projection" , vars [6]  , ["/bootstrap#label" , "alias"   ]    ] , vars [7]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , ["/bootstrap#signature" , vars [6]  , ["[]"  ]    ] , vars [7]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#signature" , vars [6]  , vars [7]     ] , ["." , ["/bootstrap#projection" , vars [6]  , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [8]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Define projection" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#signature" , vars [6]  , vars [7]     ] , ["." , ["/bootstrap#projection" , vars [6]  , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [8]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Define projection" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#signature" , vars [6]  , vars [7]     ] , ["." , ["/bootstrap#projection" , vars [6]  , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [8]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , ["/bootstrap#signature" , vars [6]  , vars [7]     ] , vars [8]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#horiz" , vars [6]  , ["cpi#top"  ]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Set alignment" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#horiz" , vars [6]  , ["cpi#top"  ]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Set alignment" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#horiz" , vars [6]  , ["cpi#top"  ]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#horiz" , vars [6]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#changeMode" , vars [6]  , ["cpi#default"  ]    ] , vars [7]     ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Change projection mode" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#changeMode" , vars [6]  , ["cpi#default"  ]    ] , vars [7]     ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Change projection mode" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#changeMode" , vars [6]  , ["cpi#default"  ]    ] , vars [7]     ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , vars [7]     ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#changeMode" , ["." , vars [6]  , vars [7]     ] , ["/bootstrap#horiz"  ]    ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Display horizontally" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#changeMode" , ["." , vars [6]  , vars [7]     ] , ["/bootstrap#horiz"  ]    ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Display horizontally" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#changeMode" , ["." , vars [6]  , vars [7]     ] , ["/bootstrap#horiz"  ]    ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , vars [6]  , vars [7]     ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#changeMode" , ["." , vars [6]  , vars [7]     ] , ["/bootstrap#vert"  ]    ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Display vertically" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#changeMode" , ["." , vars [6]  , vars [7]     ] , ["/bootstrap#vert"  ]    ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Display vertically" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#changeMode" , ["." , vars [6]  , vars [7]     ] , ["/bootstrap#vert"  ]    ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , vars [6]  , vars [7]     ] , ["/bootstrap#list" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#defAtom" , vars [6]    ] , ["." , ["/bootstrap#projection" , vars [6]  , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [7]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Define Projection" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#defAtom" , vars [6]    ] , ["." , ["/bootstrap#projection" , vars [6]  , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [7]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Define Projection" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#defAtom" , vars [6]    ] , ["." , ["/bootstrap#projection" , vars [6]  , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [7]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , ["/bootstrap#defAtom" , vars [6]    ] , vars [7]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (18  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [14]  , vars [16]     ] , ["," , ["builtin#strcat" , vars [14]  , "	" , vars [17]      ] , ["builtin#strcat" , vars [17]  , vars [16]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [14]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#contextMenuEntry" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]  , vars [12]         ] , ["/bootstrap#statement"  ]    ] , vars [11]      ] , vars [13]     ] , ["," , ["=" , ["::" , vars [14]  , ["/bootstrap#string"  ]    ] , ["::" , "Add Icon" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#contextMenuEntry" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]  , vars [12]         ] , ["/bootstrap#statement"  ]    ] , vars [11]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [15]  , ["," , ["builtin#strcat" , "<exception>: " , "Add Icon" , vars [14]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#contextMenuEntry" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]  , vars [12]         ] , ["/bootstrap#statement"  ]    ] , vars [11]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#contextMenuEntry" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ] , ["/bootstrap#statement"  ]    ] , vars [11]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#disabled" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Disable" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#disabled" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Disable" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#disabled" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , vars [6]  , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Enable" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , vars [6]  , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Enable" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , vars [6]  , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#disabled" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#doc" , vars [9]  , ["/bootstrap#signature" , vars [6]  , vars [7]     ]    ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Add Description" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#doc" , vars [9]  , ["/bootstrap#signature" , vars [6]  , vars [7]     ]    ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Add Description" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/bootstrap#doc" , vars [9]  , ["/bootstrap#signature" , vars [6]  , vars [7]     ]    ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#signature" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (12  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [8]  , vars [10]     ] , ["," , ["builtin#strcat" , vars [8]  , "	" , vars [11]      ] , ["builtin#strcat" , vars [11]  , vars [10]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [8]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#exportCedalionProgram"  ] , vars [7]     ] , ["," , ["=" , ["::" , vars [8]  , ["/bootstrap#string"  ]    ] , ["::" , "Export Cedalion Program" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#exportCedalionProgram"  ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [9]  , ["," , ["builtin#strcat" , "<exception>: " , "Export Cedalion Program" , vars [8]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#exportCedalionProgram"  ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["[]"  ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#sigProj" , vars [6]  , vars [7]  , vars [8]      ] , vars [9]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Unify signature and projection" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#sigProj" , vars [6]  , vars [7]  , vars [8]      ] , vars [9]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Unify signature and projection" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#sigProj" , vars [6]  , vars [7]  , vars [8]      ] , vars [9]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , ["/bootstrap#signature" , vars [6]  , vars [7]     ] , ["." , ["/bootstrap#projection" , vars [6]  , vars [8]     ] , vars [9]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#signature" , vars [6]  , vars [7]     ] , ["." , ["/bootstrap#projection" , vars [6]  , vars [8]     ] , vars [9]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Split definitions" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#signature" , vars [6]  , vars [7]     ] , ["." , ["/bootstrap#projection" , vars [6]  , vars [8]     ] , vars [9]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Split definitions" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#signature" , vars [6]  , vars [7]     ] , ["." , ["/bootstrap#projection" , vars [6]  , vars [8]     ] , vars [9]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , ["/bootstrap#sigProj" , vars [6]  , vars [7]  , vars [8]      ] , vars [9]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#sigProjAtom" , vars [6]  , vars [7]     ] , vars [8]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Unify signature and projection" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#sigProjAtom" , vars [6]  , vars [7]     ] , vars [8]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Unify signature and projection" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#sigProjAtom" , vars [6]  , vars [7]     ] , vars [8]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , ["/bootstrap#defAtom" , vars [6]    ] , ["." , ["/bootstrap#projection" , vars [6]  , vars [7]     ] , vars [8]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#defAtom" , vars [6]    ] , ["." , ["/bootstrap#projection" , vars [6]  , vars [7]     ] , vars [8]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Split definitions" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#defAtom" , vars [6]    ] , ["." , ["/bootstrap#projection" , vars [6]  , vars [7]     ] , vars [8]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Split definitions" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#defAtom" , vars [6]    ] , ["." , ["/bootstrap#projection" , vars [6]  , vars [7]     ] , vars [8]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , ["/bootstrap#sigProjAtom" , vars [6]  , vars [7]     ] , vars [8]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#showSymbols" , vars [8]  , vars [0]     ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , vars [8]  , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#showSymbols" , vars [8]  , vars [0]     ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , vars [8]  , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#showSymbols" , vars [8]  , vars [0]     ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#symbol" , vars [6]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#brackets" , vars [7]  , vars [6]  , vars [8]      ] , vars [9]     ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Create brackets" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#brackets" , vars [7]  , vars [6]  , vars [8]      ] , vars [9]     ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Create brackets" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#brackets" , vars [7]  , vars [6]  , vars [8]      ] , vars [9]     ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , ["/bootstrap#symbol" , vars [6]    ] , ["." , vars [7]  , ["." , ["/bootstrap#symbol" , vars [8]    ] , vars [9]     ]    ]    ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#symbol" , vars [7]    ] , ["." , vars [6]  , ["." , ["/bootstrap#symbol" , vars [8]    ] , vars [9]     ]    ]    ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Split brackets" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#symbol" , vars [7]    ] , ["." , vars [6]  , ["." , ["/bootstrap#symbol" , vars [8]    ] , vars [9]     ]    ]    ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Split brackets" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#symbol" , vars [7]    ] , ["." , vars [6]  , ["." , ["/bootstrap#symbol" , vars [8]    ] , vars [9]     ]    ]    ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , ["/bootstrap#brackets" , vars [6]  , vars [7]  , vars [8]      ] , vars [9]     ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#showTree" , vars [6]    ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Show tree" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#showTree" , vars [6]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Show tree" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#showTree" , vars [6]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#showFailedTests"  ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Show all Failed Tests" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#showFailedTests"  ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Show all Failed Tests" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#showFailedTests"  ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#unitTest" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#insertStatement" , ["/bootstrap#varNameMacroStatement" , vars [8]  , ["/bootstrap#symbol" , vars [9]    ]    ] , vars [0]  , ["[]"  ]     ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Define Variable Name Macro" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#insertStatement" , ["/bootstrap#varNameMacroStatement" , vars [8]  , ["/bootstrap#symbol" , vars [9]    ]    ] , vars [0]  , ["[]"  ]     ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Define Variable Name Macro" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#insertStatement" , ["/bootstrap#varNameMacroStatement" , vars [8]  , ["/bootstrap#symbol" , vars [9]    ]    ] , vars [0]  , ["[]"  ]     ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [6]  , ["." , ["builtin#varName" , vars [7]  , vars [8]     ] , ["[]"  ]    ]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["/cedalionWeb/jquery#onDelayed" , vars [7]  , vars [8]  , vars [6]  , 200 , vars [9]        ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Add delay" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/cedalionWeb/jquery#onDelayed" , vars [7]  , vars [8]  , vars [6]  , 200 , vars [9]        ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Add delay" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/cedalionWeb/jquery#onDelayed" , vars [7]  , vars [8]  , vars [6]  , 200 , vars [9]        ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#on" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["/cedalionWeb/jquery#on" , vars [6]  , vars [7]  , vars [10]  , vars [8]       ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [9]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Add event instance" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/cedalionWeb/jquery#on" , vars [6]  , vars [7]  , vars [10]  , vars [8]       ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Add event instance" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/cedalionWeb/jquery#on" , vars [6]  , vars [7]  , vars [10]  , vars [8]       ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#on" , vars [6]  , vars [7]  , vars [8]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["/cedalionWeb/xml#list" , vars [8]  , vars [6]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Insert" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/cedalionWeb/xml#list" , vars [8]  , vars [6]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Insert" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/cedalionWeb/xml#list" , vars [8]  , vars [6]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["/cedalionWeb/xml#list" , vars [6]  , ["/cedalionWeb/xml#list" , vars [9]  , vars [7]     ]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [8]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Append" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/cedalionWeb/xml#list" , vars [6]  , ["/cedalionWeb/xml#list" , vars [9]  , vars [7]     ]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Append" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/cedalionWeb/xml#list" , vars [6]  , ["/cedalionWeb/xml#list" , vars [9]  , vars [7]     ]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/xml#list" , vars [6]  , vars [7]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , vars [7]  , ["/cedalionWeb/xml#xml"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Delete" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , vars [7]  , ["/cedalionWeb/xml#xml"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Delete" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , vars [7]  , ["/cedalionWeb/xml#xml"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/xml#list" , vars [6]  , vars [7]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/debugging#createSubTests" , vars [6]  , vars [7]  , vars [8]  , vars [0]       ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Create sub-tests" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/debugging#createSubTests" , vars [6]  , vars [7]  , vars [8]  , vars [0]       ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Create sub-tests" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/debugging#createSubTests" , vars [6]  , vars [7]  , vars [8]  , vars [0]       ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , ["/bootstrap#unitTest" , vars [6]    ] , vars [7]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (19  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [15]  , vars [17]     ] , ["," , ["builtin#strcat" , vars [15]  , "	" , vars [18]      ] , ["builtin#strcat" , vars [18]  , vars [17]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [15]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#unitTest" , vars [9]    ] , vars [10]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [11]      ]   ] , ["," , ["=" , ["::" , vars [6]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , vars [9]  , vars [12]     ] , ["/bootstrap#pred"  ]    ]    ] , ["," , ["builtin#findall" , ["/bootstrap#unitTest" , vars [12]    ] , ["/bootstrap#statement"  ] , vars [9]  , vars [13]       ] , ["," , ["/bootstrap#append" , vars [13]  , vars [7]  , vars [10]  , ["/bootstrap#statement"  ]      ] , ["/debugging#completeVarNames" , ["::" , ["." , ["/bootstrap#unitTest" , vars [9]    ] , vars [10]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]  , vars [11]      ]    ]    ]    ]    ] , vars [14]     ] , ["," , ["=" , ["::" , vars [15]  , ["/bootstrap#string"  ]    ] , ["::" , "Apply first goal" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#unitTest" , vars [9]    ] , vars [10]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [11]      ]   ] , ["," , ["=" , ["::" , vars [6]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , vars [9]  , vars [12]     ] , ["/bootstrap#pred"  ]    ]    ] , ["," , ["builtin#findall" , ["/bootstrap#unitTest" , vars [12]    ] , ["/bootstrap#statement"  ] , vars [9]  , vars [13]       ] , ["," , ["/bootstrap#append" , vars [13]  , vars [7]  , vars [10]  , ["/bootstrap#statement"  ]      ] , ["/debugging#completeVarNames" , ["::" , ["." , ["/bootstrap#unitTest" , vars [9]    ] , vars [10]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]  , vars [11]      ]    ]    ]    ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [16]  , ["," , ["builtin#strcat" , "<exception>: " , "Apply first goal" , vars [15]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["." , ["/bootstrap#unitTest" , vars [9]    ] , vars [10]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [11]      ]   ] , ["," , ["=" , ["::" , vars [6]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , vars [9]  , vars [12]     ] , ["/bootstrap#pred"  ]    ]    ] , ["," , ["builtin#findall" , ["/bootstrap#unitTest" , vars [12]    ] , ["/bootstrap#statement"  ] , vars [9]  , vars [13]       ] , ["," , ["/bootstrap#append" , vars [13]  , vars [7]  , vars [10]  , ["/bootstrap#statement"  ]      ] , ["/debugging#completeVarNames" , ["::" , ["." , ["/bootstrap#unitTest" , vars [9]    ] , vars [10]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]  , vars [11]      ]    ]    ]    ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["." , ["/bootstrap#unitTest" , vars [6]    ] , vars [7]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/html#showXml" , vars [6]    ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Show XML" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/html#showXml" , vars [6]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Show XML" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/html#showXml" , vars [6]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript/ajax#ajaxExpr" , vars [9]  , vars [10]     ] , ["/javascript/ajax#ajaxExpr" , vars [7]    ]    ] , vars [8]      ]   ] , ["cjs#ajaxEval" , vars [6]  , vars [7]  , vars [9]  , vars [10]       ]    ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Evaluate" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript/ajax#ajaxExpr" , vars [9]  , vars [10]     ] , ["/javascript/ajax#ajaxExpr" , vars [7]    ]    ] , vars [8]      ]   ] , ["cjs#ajaxEval" , vars [6]  , vars [7]  , vars [9]  , vars [10]       ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Evaluate" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript/ajax#ajaxExpr" , vars [9]  , vars [10]     ] , ["/javascript/ajax#ajaxExpr" , vars [7]    ]    ] , vars [8]      ]   ] , ["cjs#ajaxEval" , vars [6]  , vars [7]  , vars [9]  , vars [10]       ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/javascript/ajax#ajaxExpr" , vars [7]    ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript/ajax#ajaxExpr" , ["/Functional#const" , vars [9]    ] , ["[]"  ]    ] , ["/javascript/ajax#ajaxExpr" , vars [7]    ]    ] , vars [8]      ]   ] , ["," , ["cjs#ajaxEval" , vars [6]  , vars [7]  , vars [10]  , ["[]"  ]      ] , ["/Functional#eval" , vars [10]  , vars [7]  , vars [9]      ]    ]    ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Evaluate Fully" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript/ajax#ajaxExpr" , ["/Functional#const" , vars [9]    ] , ["[]"  ]    ] , ["/javascript/ajax#ajaxExpr" , vars [7]    ]    ] , vars [8]      ]   ] , ["," , ["cjs#ajaxEval" , vars [6]  , vars [7]  , vars [10]  , ["[]"  ]      ] , ["/Functional#eval" , vars [10]  , vars [7]  , vars [9]      ]    ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Evaluate Fully" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript/ajax#ajaxExpr" , ["/Functional#const" , vars [9]    ] , ["[]"  ]    ] , ["/javascript/ajax#ajaxExpr" , vars [7]    ]    ] , vars [8]      ]   ] , ["," , ["cjs#ajaxEval" , vars [6]  , vars [7]  , vars [10]  , ["[]"  ]      ] , ["/Functional#eval" , vars [10]  , vars [7]  , vars [9]      ]    ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/javascript/ajax#ajaxExpr" , vars [7]    ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["/bootstrap#showInView" , ["::" , vars [8]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]   ] , ["/Functional#eval" , ["/javascript#toString" , ["::" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#string"  ] , vars [8]      ]    ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "To String" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["/bootstrap#showInView" , ["::" , vars [8]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]   ] , ["/Functional#eval" , ["/javascript#toString" , ["::" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#string"  ] , vars [8]      ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "To String" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["/bootstrap#showInView" , ["::" , vars [8]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]   ] , ["/Functional#eval" , ["/javascript#toString" , ["::" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#string"  ] , vars [8]      ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , vars [7]     ] , ["[]"  ]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , vars [6]    ]   ]    ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Generate Javascript Code" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , vars [6]    ]   ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Generate Javascript Code" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , vars [6]    ]   ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/javascript/jsLogic#writeClauses" , vars [6]    ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Generate raw clauses" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/javascript/jsLogic#writeClauses" , vars [6]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Generate raw clauses" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/javascript/jsLogic#writeClauses" , vars [6]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , ["/javascript/jsLogic#allClauses"  ]   ]   ]    ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Generate Javascript Code for the Entire Program" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , ["/javascript/jsLogic#allClauses"  ]   ]   ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Generate Javascript Code for the Entire Program" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , ["/javascript/jsLogic#allClauses"  ]   ]   ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript#op" , vars [8]  , vars [7]  , vars [6]      ] , ["/javascript#expr"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Swap places" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript#op" , vars [8]  , vars [7]  , vars [6]      ] , ["/javascript#expr"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Swap places" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript#op" , vars [8]  , vars [7]  , vars [6]      ] , ["/javascript#expr"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#op" , vars [6]  , vars [7]  , vars [8]      ] , ["/javascript#expr"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , ["/javascript/optimization#optAllClauses"  ]   ]   ]    ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Generate javascript for the entire program (optimized)" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , ["/javascript/optimization#optAllClauses"  ]   ]   ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Generate javascript for the entire program (optimized)" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , ["/javascript/optimization#optAllClauses"  ]   ]   ]    ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , vars [6]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript/statepred#whenever" , vars [6]  , vars [7]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : []    }  )      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Add finally clause" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript/statepred#whenever" , vars [6]  , vars [7]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : []    }  )      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Add finally clause" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript/statepred#whenever" , vars [6]  , vars [7]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : []    }  )      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#whenever" , vars [6]  , vars [7]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#unitTest" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#unitTest" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#unitTest" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#unitTest" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#elem" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#elem" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#elem" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/xml#elem" , vars [6]  , vars [7]  , vars [8]      ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#function" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#function" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#function" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#function" , vars [6]  , vars [7]     ] , ["/javascript#expr"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#applyBinOp" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Functional#expr" , vars [9]    ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#applyBinOp" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Functional#expr" , vars [9]    ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#applyBinOp" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Functional#expr" , vars [9]    ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#applyBinOp" , vars [6]  , vars [7]  , vars [8]      ] , ["/Functional#expr" , vars [9]    ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#applyBinOpList" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Functional#expr" , ["/bootstrap#list" , vars [9]    ]   ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#applyBinOpList" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Functional#expr" , ["/bootstrap#list" , vars [9]    ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#applyBinOpList" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Functional#expr" , ["/bootstrap#list" , vars [9]    ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#applyBinOpList" , vars [6]  , vars [7]  , vars [8]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [9]    ]   ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#applyBinOpListScalar" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Functional#expr" , ["/bootstrap#list" , vars [9]    ]   ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#applyBinOpListScalar" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Functional#expr" , ["/bootstrap#list" , vars [9]    ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#applyBinOpListScalar" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Functional#expr" , ["/bootstrap#list" , vars [9]    ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#applyBinOpListScalar" , vars [6]  , vars [7]  , vars [8]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [9]    ]   ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#reduce" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#reduce" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#reduce" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#reduce" , vars [6]  , vars [7]     ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (17  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [13]  , vars [15]     ] , ["," , ["builtin#strcat" , vars [13]  , "	" , vars [16]      ] , ["builtin#strcat" , vars [16]  , vars [15]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [13]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#valueApplyBinOp" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ]   ] , ["/bootstrap#pred"  ]    ] , vars [11]      ] , vars [12]     ] , ["," , ["=" , ["::" , vars [13]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#valueApplyBinOp" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ]   ] , ["/bootstrap#pred"  ]    ] , vars [11]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [14]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [13]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#valueApplyBinOp" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ]   ] , ["/bootstrap#pred"  ]    ] , vars [11]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#valueApplyBinOp" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ] , ["/bootstrap#pred"  ]    ] , vars [11]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#otherwise" , vars [6]    ]   ] , ["/Functional#cases" , vars [7]  , vars [8]     ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#otherwise" , vars [6]    ]   ] , ["/Functional#cases" , vars [7]  , vars [8]     ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#otherwise" , vars [6]    ]   ] , ["/Functional#cases" , vars [7]  , vars [8]     ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#otherwise" , vars [6]    ] , ["/Functional#cases" , vars [7]  , vars [8]     ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#eq" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#eq" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#eq" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#eq" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#greaterThen" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#greaterThen" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#greaterThen" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["builtin#greaterThen" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#gt" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#gt" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#gt" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#gt" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#ge" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#ge" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#ge" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#ge" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#eval" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#eval" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#eval" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#eval" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#minus" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#minus" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#minus" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#minus" , vars [6]  , vars [7]     ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#mult" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#mult" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#mult" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#mult" , vars [6]  , vars [7]     ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#idiv" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#idiv" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#idiv" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#idiv" , vars [6]  , vars [7]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#modulus" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#modulus" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#modulus" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#modulus" , vars [6]  , vars [7]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#def" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#def" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#def" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#def" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#func" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#type"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#func" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#type"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#func" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#type"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#func" , vars [6]  , vars [7]     ] , ["/bootstrap#type"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#lambda" , vars [6]  , vars [7]     ]   ] , ["/Functional#func" , vars [8]  , vars [9]     ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#lambda" , vars [6]  , vars [7]     ]   ] , ["/Functional#func" , vars [8]  , vars [9]     ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#lambda" , vars [6]  , vars [7]     ]   ] , ["/Functional#func" , vars [8]  , vars [9]     ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#lambda" , vars [6]  , vars [7]     ] , ["/Functional#func" , vars [8]  , vars [9]     ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#apply" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Functional#expr" , vars [9]    ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#apply" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Functional#expr" , vars [9]    ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#apply" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Functional#expr" , vars [9]    ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#apply" , vars [6]  , vars [7]  , vars [8]      ] , ["/Functional#expr" , vars [9]    ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#pairType" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#type"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#pairType" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#type"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#pairType" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#type"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#pairType" , vars [6]  , vars [7]     ] , ["/bootstrap#type"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#pair" , vars [6]  , vars [7]     ]   ] , ["/Functional#pairType" , vars [8]  , vars [9]     ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#pair" , vars [6]  , vars [7]     ]   ] , ["/Functional#pairType" , vars [8]  , vars [9]     ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#pair" , vars [6]  , vars [7]     ]   ] , ["/Functional#pairType" , vars [8]  , vars [9]     ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#pair" , vars [6]  , vars [7]     ] , ["/Functional#pairType" , vars [8]  , vars [9]     ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#plus" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#plus" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#plus" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#plus" , vars [6]  , vars [7]     ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#element" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#element" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#element" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#element" , vars [6]  , vars [7]     ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#constSeq" , vars [6]    ]   ] , ["/Functional#expr" , ["/Functional#seq" , vars [7]    ]   ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#constSeq" , vars [6]    ]   ] , ["/Functional#expr" , ["/Functional#seq" , vars [7]    ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#constSeq" , vars [6]    ]   ] , ["/Functional#expr" , ["/Functional#seq" , vars [7]    ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#constSeq" , vars [6]    ] , ["/Functional#expr" , ["/Functional#seq" , vars [7]    ]   ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#concat" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#concat" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#concat" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#concat" , vars [6]  , vars [7]     ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#where" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#where" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Functional#where" , vars [6]  , vars [7]     ]   ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Functional#where" , vars [6]  , vars [7]     ] , ["/Functional#expr" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#f" , vars [6]    ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#f" , vars [6]    ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#f" , vars [6]    ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#f" , vars [6]    ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#token" , vars [6]    ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#token" , vars [6]    ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#token" , vars [6]    ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test/bnf#token" , vars [6]    ] , ["/Test/bnf#pattern"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#concat" , vars [6]  , vars [7]     ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#concat" , vars [6]  , vars [7]     ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#concat" , vars [6]  , vars [7]     ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test/bnf#concat" , vars [6]  , vars [7]     ] , ["/Test/bnf#pattern"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#prod" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#prod" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#prod" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test/bnf#prod" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#parse" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#parse" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#parse" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test/bnf#parse" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#symbol" , vars [6]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#symbol" , vars [6]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#symbol" , vars [6]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test/bnf#symbol" , vars [6]    ] , ["/Test/bnf#token"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#trainQuery" , vars [6]  , vars [7]     ]   ] , ["/Test/bnf#trainQuery"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#trainQuery" , vars [6]  , vars [7]     ]   ] , ["/Test/bnf#trainQuery"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#trainQuery" , vars [6]  , vars [7]     ]   ] , ["/Test/bnf#trainQuery"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test/bnf#trainQuery" , vars [6]  , vars [7]     ] , ["/Test/bnf#trainQuery"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#fromTo" , vars [6]  , vars [7]     ]   ] , ["/Test/bnf#routeQueryType"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#fromTo" , vars [6]  , vars [7]     ]   ] , ["/Test/bnf#routeQueryType"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#fromTo" , vars [6]  , vars [7]     ]   ] , ["/Test/bnf#routeQueryType"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test/bnf#fromTo" , vars [6]  , vars [7]     ] , ["/Test/bnf#routeQueryType"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#onDate" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Test/bnf#timeQueryType"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#onDate" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Test/bnf#timeQueryType"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#onDate" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Test/bnf#timeQueryType"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test/bnf#onDate" , vars [6]  , vars [7]  , vars [8]      ] , ["/Test/bnf#timeQueryType"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#word" , vars [6]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#word" , vars [6]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#word" , vars [6]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test/bnf#word" , vars [6]    ] , ["/Test/bnf#token"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#location" , vars [6]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#location" , vars [6]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#location" , vars [6]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test/bnf#location" , vars [6]    ] , ["/Test/bnf#token"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#evaluatesTo" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#evaluatesTo" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#evaluatesTo" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#evaluatesTo" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#final" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#final" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#final" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#final" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#finallyEvaluatesTo" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#finallyEvaluatesTo" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#finallyEvaluatesTo" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#finallyEvaluatesTo" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#and" , vars [6]  , vars [7]     ]   ] , ["/Test#boolean"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#and" , vars [6]  , vars [7]     ]   ] , ["/Test#boolean"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#and" , vars [6]  , vars [7]     ]   ] , ["/Test#boolean"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#and" , vars [6]  , vars [7]     ] , ["/Test#boolean"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#or" , vars [6]  , vars [7]     ]   ] , ["/Test#boolean"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#or" , vars [6]  , vars [7]     ]   ] , ["/Test#boolean"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#or" , vars [6]  , vars [7]     ]   ] , ["/Test#boolean"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#or" , vars [6]  , vars [7]     ] , ["/Test#boolean"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#not" , vars [6]    ]   ] , ["/Test#boolean"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#not" , vars [6]    ]   ] , ["/Test#boolean"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#not" , vars [6]    ]   ] , ["/Test#boolean"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#not" , vars [6]    ] , ["/Test#boolean"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#trans" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#trans" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#trans" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#trans" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#prefix" , vars [6]  , vars [7]     ]   ] , ["/Test#process"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#prefix" , vars [6]  , vars [7]     ]   ] , ["/Test#process"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#prefix" , vars [6]  , vars [7]     ]   ] , ["/Test#process"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#prefix" , vars [6]  , vars [7]     ] , ["/Test#process"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#alt" , vars [6]  , vars [7]     ]   ] , ["/Test#process"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#alt" , vars [6]  , vars [7]     ]   ] , ["/Test#process"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#alt" , vars [6]  , vars [7]     ]   ] , ["/Test#process"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#alt" , vars [6]  , vars [7]     ] , ["/Test#process"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#procDef" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#procDef" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#procDef" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#procDef" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#reaches" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#reaches" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#reaches" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#reaches" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#cond" , vars [6]  , vars [7]     ]   ] , ["/Test#process"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#cond" , vars [6]  , vars [7]     ]   ] , ["/Test#process"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#cond" , vars [6]  , vars [7]     ]   ] , ["/Test#process"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#cond" , vars [6]  , vars [7]     ] , ["/Test#process"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#costs" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#costs" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#costs" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#costs" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#worths" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#worths" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#worths" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#worths" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#sayHelloTo" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#sayHelloTo" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#sayHelloTo" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#sayHelloTo" , vars [6]  , vars [7]     ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#statements" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#statements" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#statements" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#statements" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#e" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#e" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#e" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#e" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#p" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#p" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#p" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#p" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#time" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Test#eventTime"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#time" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Test#eventTime"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#time" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/Test#eventTime"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#time" , vars [6]  , vars [7]  , vars [8]      ] , ["/Test#eventTime"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#pavilion" , vars [6]    ]   ] , ["/Test#location"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#pavilion" , vars [6]    ]   ] , ["/Test#location"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#pavilion" , vars [6]    ]   ] , ["/Test#location"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#pavilion" , vars [6]    ] , ["/Test#location"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#galleria" , vars [6]    ]   ] , ["/Test#location"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#galleria" , vars [6]    ]   ] , ["/Test#location"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#galleria" , vars [6]    ]   ] , ["/Test#location"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#galleria" , vars [6]    ] , ["/Test#location"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#visitUsAt" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#visitUsAt" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#visitUsAt" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#visitUsAt" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#subState" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#subState" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#subState" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#subState" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#initialState" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#initialState" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#initialState" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#initialState" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#transition" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#transition" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#transition" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#transition" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#hello" , vars [6]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#hello" , vars [6]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#hello" , vars [6]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#hello" , vars [6]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#adapter" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#adapter" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#adapter" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#adapter" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#alias" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#alias" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#alias" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#alias" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["annotation#changeMode" , vars [6]  , vars [7]     ]   ] , vars [8]     ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["annotation#changeMode" , vars [6]  , vars [7]     ]   ] , vars [8]     ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["annotation#changeMode" , vars [6]  , vars [7]     ]   ] , vars [8]     ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["annotation#changeMode" , vars [6]  , vars [7]     ] , vars [8]     ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#defAtom" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#defAtom" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#defAtom" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#defAtom" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#default" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#default" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#default" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#default" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#projection" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#projection" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#projection" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#projection" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["~>" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["~>" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["~>" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["~>" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["::" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#typedTerm"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["::" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#typedTerm"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["::" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#typedTerm"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["::" , vars [6]  , vars [7]     ] , ["/bootstrap#typedTerm"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , [":-" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , [":-" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , [":-" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , [":-" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#signature" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#signature" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#signature" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#signature" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#or" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#or" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#or" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#or" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#generateFileForSet" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#generateFileForSet" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#generateFileForSet" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#generateFileForSet" , vars [6]  , vars [7]     ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#requires" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#requires" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#requires" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#requires" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#missing" , vars [6]    ]   ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#missing" , vars [6]    ]   ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#missing" , vars [6]    ]   ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#missing" , vars [6]    ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#defines" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#defines" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#defines" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#defines" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#deprecated" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#deprecated" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#deprecated" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#deprecated" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#deprecationReplacement" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#deprecationReplacement" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#deprecationReplacement" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#deprecationReplacement" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cpi#path" , vars [6]  , vars [7]     ]   ] , ["cpi#path"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cpi#path" , vars [6]  , vars [7]     ]   ] , ["cpi#path"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cpi#path" , vars [6]  , vars [7]     ]   ] , ["cpi#path"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["cpi#path" , vars [6]  , vars [7]     ] , ["cpi#path"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#succ" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#succ" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#succ" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["builtin#succ" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , [">" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , [">" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , [">" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , [">" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["=" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["=" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["=" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["=" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["+" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["+" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["+" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["+" , vars [6]  , vars [7]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["-" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["-" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["-" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["-" , vars [6]  , vars [7]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cpi#constExpr" , vars [6]    ]   ] , ["/bootstrap#expr" , vars [7]    ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cpi#constExpr" , vars [6]    ]   ] , ["/bootstrap#expr" , vars [7]    ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cpi#constExpr" , vars [6]    ]   ] , ["/bootstrap#expr" , vars [7]    ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["cpi#constExpr" , vars [6]    ] , ["/bootstrap#expr" , vars [7]    ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#equals" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#equals" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#equals" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["builtin#equals" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#import" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#import" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#import" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["builtin#import" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#forall" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#forall" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#forall" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#forall" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#listMember" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#listMember" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#listMember" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#listMember" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cpi#func" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#procedure"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cpi#func" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#procedure"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cpi#func" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#procedure"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["cpi#func" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#procedure"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#doAll" , vars [6]    ]   ] , ["/bootstrap#command"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#doAll" , vars [6]    ]   ] , ["/bootstrap#command"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#doAll" , vars [6]    ]   ] , ["/bootstrap#command"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#doAll" , vars [6]    ] , ["/bootstrap#command"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#assign" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#command"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#assign" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#command"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#assign" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#command"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#assign" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#command"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#doProc" , vars [6]    ]   ] , ["/bootstrap#command"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#doProc" , vars [6]    ]   ] , ["/bootstrap#command"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#doProc" , vars [6]    ]   ] , ["/bootstrap#command"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#doProc" , vars [6]    ] , ["/bootstrap#command"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#where" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#where" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#where" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#where" , vars [6]  , vars [7]     ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#foreach" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#foreach" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#foreach" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#foreach" , vars [6]  , vars [7]     ] , ["/bootstrap#procedure"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#findall" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#findall" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["builtin#findall" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["builtin#findall" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#projection" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#projection" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#projection" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#projection" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#member" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#member" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#member" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#member" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#setDef" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#setDef" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#setDef" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#setDef" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#union" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#set" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#union" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#set" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#union" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#set" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#union" , vars [6]  , vars [7]     ] , ["/bootstrap#set" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#intersect" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#set" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#intersect" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#set" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#intersect" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#set" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#intersect" , vars [6]  , vars [7]     ] , ["/bootstrap#set" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#diffSet" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#set" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#diffSet" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#set" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#diffSet" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#set" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#diffSet" , vars [6]  , vars [7]     ] , ["/bootstrap#set" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#notMember" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#notMember" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#notMember" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#notMember" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#shortcutKey" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#shortcutKey" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#shortcutKey" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#shortcutKey" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#error"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#error"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#error"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ] , ["/bootstrap#error"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#nonVarInSignature" , vars [6]    ]   ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#nonVarInSignature" , vars [6]    ]   ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#nonVarInSignature" , vars [6]    ]   ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#nonVarInSignature" , vars [6]    ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [6]    ]   ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [6]    ]   ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [6]    ]   ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [6]    ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#symbolRange" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#symbolRange" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#symbolRange" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#symbolRange" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#tip" , vars [6]    ]   ] , ["/bootstrap#marker"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#tip" , vars [6]    ]   ] , ["/bootstrap#marker"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#tip" , vars [6]    ]   ] , ["/bootstrap#marker"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#tip" , vars [6]    ] , ["/bootstrap#marker"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#tip" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#statement"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#tip" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#statement"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#tip" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#statement"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#tip" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/bootstrap#statement"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#true" , vars [6]    ]   ] , ["/bootstrap#pred"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#true" , vars [6]    ]   ] , ["/bootstrap#pred"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#true" , vars [6]    ]   ] , ["/bootstrap#pred"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#true" , vars [6]    ] , ["/bootstrap#pred"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#missingSignature" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#error"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#missingSignature" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#error"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#missingSignature" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#error"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#missingSignature" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#error"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#unitTest" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#unitTest" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#unitTest" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#unitTest" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["\\+" , vars [6]    ]   ] , ["/bootstrap#pred"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["\\+" , vars [6]    ]   ] , ["/bootstrap#pred"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["\\+" , vars [6]    ]   ] , ["/bootstrap#pred"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["\\+" , vars [6]    ] , ["/bootstrap#pred"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#failedTest" , vars [6]    ]   ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#failedTest" , vars [6]    ]   ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#failedTest" , vars [6]    ]   ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#failedTest" , vars [6]    ] , ["/bootstrap#error"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#insertStatement" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#procedure"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#insertStatement" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#procedure"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#insertStatement" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#procedure"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#insertStatement" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#procedure"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cpi#vis" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#visualization"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cpi#vis" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#visualization"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cpi#vis" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#visualization"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["cpi#vis" , vars [6]  , vars [7]     ] , ["/bootstrap#visualization"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#vert" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#vert" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#vert" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#vert" , vars [6]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#label" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#label" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#label" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#label" , vars [6]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#italic" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#italic" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#italic" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#italic" , vars [6]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#bold" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#bold" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#bold" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#bold" , vars [6]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#halfSize" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#halfSize" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#halfSize" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#halfSize" , vars [6]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#smaller" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#smaller" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#smaller" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#smaller" , vars [6]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#pivot" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#pivot" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#pivot" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#pivot" , vars [6]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#varNameMacroStatement" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#varNameMacroStatement" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#varNameMacroStatement" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#varNameMacroStatement" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#varNameSuffix" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#varNameSuffix" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#varNameSuffix" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#varNameSuffix" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#insertDocument" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#insertDocument" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#insertDocument" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/couchdb#insertDocument" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/javascript/statepred#statePred"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#updateDocument" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#updateDocument" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#updateDocument" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/javascript/statepred#statePred"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (17  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [13]  , vars [15]     ] , ["," , ["builtin#strcat" , vars [13]  , "	" , vars [16]      ] , ["builtin#strcat" , vars [16]  , vars [15]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [13]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#updateDocument" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [11]      ] , vars [12]     ] , ["," , ["=" , ["::" , vars [13]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#updateDocument" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [11]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [14]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [13]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#updateDocument" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [11]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ] , ["/javascript/statepred#statePred"  ]    ] , vars [11]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cjs#verifyDatabaseRev" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cjs#verifyDatabaseRev" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cjs#verifyDatabaseRev" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["cjs#verifyDatabaseRev" , vars [6]  , vars [7]  , vars [8]      ] , ["/javascript/statepred#statePred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#ajaxQuery" , vars [6]    ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#ajaxQuery" , vars [6]    ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#ajaxQuery" , vars [6]    ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#ajaxQuery" , vars [6]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#onServer" , vars [6]    ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#onServer" , vars [6]    ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#onServer" , vars [6]    ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#onServer" , vars [6]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#animate" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#animate" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#animate" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#animate" , vars [6]  , vars [7]  , vars [8]      ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#runAfterGen" , vars [6]    ]   ] , ["/cedalionWeb/xml#annotation"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#runAfterGen" , vars [6]    ]   ] , ["/cedalionWeb/xml#annotation"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#runAfterGen" , vars [6]    ]   ] , ["/cedalionWeb/xml#annotation"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#runAfterGen" , vars [6]    ] , ["/cedalionWeb/xml#annotation"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#animate" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#animate" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#animate" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#animate" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#changeContent" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#changeContent" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#changeContent" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#changeContent" , vars [6]  , vars [7]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#applyAnnot" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#applyAnnot" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#applyAnnot" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#applyAnnot" , vars [6]  , vars [7]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#modifyElement" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#modifyElement" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#modifyElement" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#modifyElement" , vars [6]  , vars [7]  , vars [8]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#replaceWith" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#replaceWith" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#replaceWith" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#replaceWith" , vars [6]  , vars [7]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#prependTo" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#prependTo" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#prependTo" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#prependTo" , vars [6]  , vars [7]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#appendTo" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#appendTo" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#appendTo" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/jquery#appendTo" , vars [6]  , vars [7]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb#addKeyComponents" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb#addKeyComponents" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb#addKeyComponents" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb#addKeyComponents" , vars [6]  , vars [7]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#get" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#get" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#get" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/node#get" , vars [6]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#json" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#json" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#json" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/node#json" , vars [6]    ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#dot" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#dot" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#dot" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/node#dot" , vars [6]  , vars [7]     ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#jsonStringify" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#jsonStringify" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#jsonStringify" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/node#jsonStringify" , vars [6]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#arrayElement" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#arrayElement" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#arrayElement" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/node#arrayElement" , vars [6]  , vars [7]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#urlQuery" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#urlQuery" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#urlQuery" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/node#urlQuery" , vars [6]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#arg" , vars [6]  , vars [7]     ]   ] , ["/cedalionWeb/node#queryArg"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#arg" , vars [6]  , vars [7]     ]   ] , ["/cedalionWeb/node#queryArg"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#arg" , vars [6]  , vars [7]     ]   ] , ["/cedalionWeb/node#queryArg"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/node#arg" , vars [6]  , vars [7]     ] , ["/cedalionWeb/node#queryArg"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb#implies" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb#implies" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb#implies" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb#implies" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb#rewrite" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb#rewrite" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb#rewrite" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb#rewrite" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/ui#ul" , vars [6]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/ui#ul" , vars [6]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/ui#ul" , vars [6]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/ui#ul" , vars [6]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#editActionIcon" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#editActionIcon" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#editActionIcon" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/visualization#editActionIcon" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#suggestion" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#suggestion" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#suggestion" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/visualization#suggestion" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#edit" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#edit" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#edit" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/visualization#edit" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#defineModifier" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#defineModifier" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#defineModifier" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/visualization#defineModifier" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#macro" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#macro" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#macro" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/xml#macro" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#generates" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#generates" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#generates" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/xml#generates" , vars [6]  , vars [7]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#attr" , vars [6]  , vars [7]     ]   ] , ["/cedalionWeb/xml#attr"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#attr" , vars [6]  , vars [7]     ]   ] , ["/cedalionWeb/xml#attr"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#attr" , vars [6]  , vars [7]     ]   ] , ["/cedalionWeb/xml#attr"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/xml#attr" , vars [6]  , vars [7]     ] , ["/cedalionWeb/xml#attr"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#str" , vars [6]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#str" , vars [6]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#str" , vars [6]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/xml#str" , vars [6]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#entity" , vars [6]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#entity" , vars [6]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#entity" , vars [6]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/xml#entity" , vars [6]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#generates2" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#generates2" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#generates2" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/xml#generates2" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#attr2" , vars [6]  , vars [7]     ]   ] , ["/cedalionWeb/xml#attribute"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#attr2" , vars [6]  , vars [7]     ]   ] , ["/cedalionWeb/xml#attribute"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#attr2" , vars [6]  , vars [7]     ]   ] , ["/cedalionWeb/xml#attribute"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/xml#attr2" , vars [6]  , vars [7]     ] , ["/cedalionWeb/xml#attribute"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/html#entity" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/html#entity" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/html#entity" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/html#entity" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/html#paragraph" , vars [6]    ]   ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/html#paragraph" , vars [6]    ]   ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/html#paragraph" , vars [6]    ]   ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/html#paragraph" , vars [6]    ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["xml#attribute" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/html#xmlAttr"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["xml#attribute" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/html#xmlAttr"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["xml#attribute" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/html#xmlAttr"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["xml#attribute" , vars [6]  , vars [7]  , vars [8]      ] , ["/html#xmlAttr"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["xml#string" , vars [6]    ]   ] , ["/html#xml"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["xml#string" , vars [6]    ]   ] , ["/html#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["xml#string" , vars [6]    ]   ] , ["/html#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["xml#string" , vars [6]    ] , ["/html#xml"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/html#unicode" , vars [6]    ]   ] , ["/html#xml"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/html#unicode" , vars [6]    ]   ] , ["/html#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/html#unicode" , vars [6]    ]   ] , ["/html#xml"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/html#unicode" , vars [6]    ] , ["/html#xml"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/ajax#ajaxDef" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/ajax#ajaxDef" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/ajax#ajaxDef" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/ajax#ajaxDef" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cjs#ajaxEval" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cjs#ajaxEval" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cjs#ajaxEval" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["cjs#ajaxEval" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/ajax#applyBinOp" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/ajax#ajaxExpr" , vars [9]    ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/ajax#applyBinOp" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/ajax#ajaxExpr" , vars [9]    ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/ajax#applyBinOp" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/ajax#ajaxExpr" , vars [9]    ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/ajax#applyBinOp" , vars [6]  , vars [7]  , vars [8]      ] , ["/javascript/ajax#ajaxExpr" , vars [9]    ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#arrayElement" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#arrayElement" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#arrayElement" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#arrayElement" , vars [6]  , vars [7]     ] , ["/javascript#expr"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#var" , vars [6]  , vars [7]     ]   ] , ["/javascript#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#var" , vars [6]  , vars [7]     ]   ] , ["/javascript#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#var" , vars [6]  , vars [7]     ]   ] , ["/javascript#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#var" , vars [6]  , vars [7]     ] , ["/javascript#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#assign" , vars [6]  , vars [7]     ]   ] , ["/javascript#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#assign" , vars [6]  , vars [7]     ]   ] , ["/javascript#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#assign" , vars [6]  , vars [7]     ]   ] , ["/javascript#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#assign" , vars [6]  , vars [7]     ] , ["/javascript#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/asyncproc#sync" , vars [6]    ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/asyncproc#sync" , vars [6]    ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/asyncproc#sync" , vars [6]    ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/asyncproc#sync" , vars [6]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#new" , vars [6]    ]   ] , ["/javascript#expr"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#new" , vars [6]    ]   ] , ["/javascript#expr"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#new" , vars [6]    ]   ] , ["/javascript#expr"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#new" , vars [6]    ] , ["/javascript#expr"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#hasSpecialRendering" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#hasSpecialRendering" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#hasSpecialRendering" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#hasSpecialRendering" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#return" , vars [6]    ]   ] , ["/javascript#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#return" , vars [6]    ]   ] , ["/javascript#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#return" , vars [6]    ]   ] , ["/javascript#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#return" , vars [6]    ] , ["/javascript#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#call" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#call" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#call" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#call" , vars [6]  , vars [7]     ] , ["/javascript#expr"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#exprStatement" , vars [6]    ]   ] , ["/javascript#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#exprStatement" , vars [6]    ]   ] , ["/javascript#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#exprStatement" , vars [6]    ]   ] , ["/javascript#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#exprStatement" , vars [6]    ] , ["/javascript#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (12  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [8]  , vars [10]     ] , ["," , ["builtin#strcat" , vars [8]  , "	" , vars [11]      ] , ["builtin#strcat" , vars [11]  , vars [10]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [8]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#return"  ]   ] , ["/javascript#statement"  ]    ] , vars [6]      ] , vars [7]     ] , ["," , ["=" , ["::" , vars [8]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#return"  ]   ] , ["/javascript#statement"  ]    ] , vars [6]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [9]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [8]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#return"  ]   ] , ["/javascript#statement"  ]    ] , vars [6]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#return"  ] , ["/javascript#statement"  ]    ] , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#equal" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#equal" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#equal" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#equal" , vars [6]  , vars [7]     ] , ["/javascript#expr"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#pred" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#predicateID"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#pred" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#predicateID"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#pred" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#predicateID"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/jsLogic#pred" , vars [6]  , vars [7]     ] , ["/javascript/jsLogic#predicateID"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#throw" , vars [6]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#throw" , vars [6]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#throw" , vars [6]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/jsLogic#throw" , vars [6]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#typeof" , vars [6]    ]   ] , ["/javascript#expr"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#typeof" , vars [6]    ]   ] , ["/javascript#expr"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#typeof" , vars [6]    ]   ] , ["/javascript#expr"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/jsLogic#typeof" , vars [6]    ] , ["/javascript#expr"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#length" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#length" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#length" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/jsLogic#length" , vars [6]  , vars [7]     ] , ["/bootstrap#pred"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#do" , vars [6]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#do" , vars [6]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#do" , vars [6]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/jsLogic#do" , vars [6]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#renderHTML" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#renderHTML" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#renderHTML" , vars [6]  , vars [7]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/jsLogic#renderHTML" , vars [6]  , vars [7]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#bind" , vars [6]  , vars [7]     ]   ] , ["/javascript#fieldAssignment"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#bind" , vars [6]  , vars [7]     ]   ] , ["/javascript#fieldAssignment"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#bind" , vars [6]  , vars [7]     ]   ] , ["/javascript#fieldAssignment"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#bind" , vars [6]  , vars [7]     ] , ["/javascript#fieldAssignment"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#dot" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#dot" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#dot" , vars [6]  , vars [7]     ]   ] , ["/javascript#expr"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#dot" , vars [6]  , vars [7]     ] , ["/javascript#expr"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#op" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript#expr"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#op" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript#expr"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#op" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript#expr"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#op" , vars [6]  , vars [7]  , vars [8]      ] , ["/javascript#expr"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/optimization#concatGoals" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/optimization#concatGoals" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/optimization#concatGoals" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/optimization#concatGoals" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#pred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#async" , vars [6]    ]   ] , ["/javascript#expr"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#async" , vars [6]    ]   ] , ["/javascript#expr"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#async" , vars [6]    ]   ] , ["/javascript#expr"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#async" , vars [6]    ] , ["/javascript#expr"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#clause" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#clause" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#clause" , vars [6]  , vars [7]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#clause" , vars [6]  , vars [7]     ] , ["/bootstrap#statement"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#findall" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#findall" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#findall" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#findall" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/javascript/statepred#statePred"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#jsFunction" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#stateExpr" , vars [9]    ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#jsFunction" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#stateExpr" , vars [9]    ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#jsFunction" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#stateExpr" , vars [9]    ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#jsFunction" , vars [6]  , vars [7]  , vars [8]      ] , ["/javascript/statepred#stateExpr" , vars [9]    ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#pair" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [8]  , vars [9]     ]   ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#pair" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [8]  , vars [9]     ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#pair" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [8]  , vars [9]     ]   ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#pair" , vars [6]  , vars [7]     ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [8]  , vars [9]     ]   ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#member" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#member" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#member" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#member" , vars [6]  , vars [7]  , vars [8]      ] , ["/javascript/statepred#statePred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#setDef" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#setDef" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#setDef" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#setDef" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateEval" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateEval" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateEval" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#stateEval" , vars [6]  , vars [7]  , vars [8]      ] , ["/javascript/statepred#statePred"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateApplyBinOp" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#stateExpr" , vars [9]    ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateApplyBinOp" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#stateExpr" , vars [9]    ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateApplyBinOp" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/javascript/statepred#stateExpr" , vars [9]    ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#stateApplyBinOp" , vars [6]  , vars [7]  , vars [8]      ] , ["/javascript/statepred#stateExpr" , vars [9]    ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateExprDef" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateExprDef" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateExprDef" , vars [6]  , vars [7]  , vars [8]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#stateExprDef" , vars [6]  , vars [7]  , vars [8]      ] , ["/bootstrap#statement"  ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [11]  , vars [13]     ] , ["," , ["builtin#strcat" , vars [11]  , "	" , vars [14]      ] , ["builtin#strcat" , vars [14]  , vars [13]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [11]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#where" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#stateExpr" , vars [8]    ]    ] , vars [9]      ] , vars [10]     ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#where" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#stateExpr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [12]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [11]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#where" , vars [6]  , vars [7]     ]   ] , ["/javascript/statepred#stateExpr" , vars [8]    ]    ] , vars [9]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#where" , vars [6]  , vars [7]     ] , ["/javascript/statepred#stateExpr" , vars [8]    ]    ] , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#trace" , vars [6]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#trace" , vars [6]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#trace" , vars [6]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#trace" , vars [6]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#tracePred" , vars [6]    ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#tracePred" , vars [6]    ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#tracePred" , vars [6]    ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#tracePred" , vars [6]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#unitTest" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#unitTest" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#unitTest" , vars [6]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript/statepred#unitTest" , vars [6]    ] , ["/bootstrap#statement"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (12  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [8]  , vars [10]     ] , ["," , ["builtin#strcat" , vars [8]  , "	" , vars [11]      ] , ["builtin#strcat" , vars [11]  , vars [10]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [8]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#break"  ]   ] , ["/javascript#statement"  ]    ] , vars [6]      ] , vars [7]     ] , ["," , ["=" , ["::" , vars [8]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#break"  ]   ] , ["/javascript#statement"  ]    ] , vars [6]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [9]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [8]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#break"  ]   ] , ["/javascript#statement"  ]    ] , vars [6]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/javascript#break"  ] , ["/javascript#statement"  ]    ] , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#or" , vars [6]  , vars [7]     ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#or" , vars [6]  , vars [7]     ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test/bnf#or" , vars [6]  , vars [7]     ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test/bnf#or" , vars [6]  , vars [7]     ] , ["/Test/bnf#pattern"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#event" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#statement"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#event" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#statement"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/Test#event" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#statement"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/Test#event" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/bootstrap#statement"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#append" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#append" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#append" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#append" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (16  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [12]  , vars [14]     ] , ["," , ["builtin#strcat" , vars [12]  , "	" , vars [15]      ] , ["builtin#strcat" , vars [15]  , vars [14]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [12]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#error" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , vars [11]     ] , ["," , ["=" , ["::" , vars [12]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#error" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [13]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [12]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#error" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#error" , vars [6]  , vars [7]  , vars [8]  , vars [9]       ] , ["/bootstrap#pred"  ]    ] , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#raised" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#raised" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#raised" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#raised" , vars [6]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [9]  , vars [11]     ] , ["," , ["builtin#strcat" , vars [9]  , "	" , vars [12]      ] , ["builtin#strcat" , vars [12]  , vars [11]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [9]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#lowered" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , vars [8]     ] , ["," , ["=" , ["::" , vars [9]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#lowered" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [10]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [9]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/bootstrap#lowered" , vars [6]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/bootstrap#lowered" , vars [6]    ] , ["/bootstrap#visualization"  ]    ] , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (17  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [13]  , vars [15]     ] , ["," , ["builtin#strcat" , vars [13]  , "	" , vars [16]      ] , ["builtin#strcat" , vars [16]  , vars [15]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [13]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#viewResults" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ]   ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [11]      ] , vars [12]     ] , ["," , ["=" , ["::" , vars [13]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#viewResults" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ]   ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [11]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [14]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [13]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#viewResults" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ]   ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [11]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["/cedalionWeb/couchdb#viewResults" , vars [6]  , vars [7]  , vars [8]  , vars [9]  , vars [10]        ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [11]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#menuItem" , vars [4]  , vars [5]  , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["builtin#if" , ["/bootstrap#isShortcutKey" , vars [10]  , vars [12]     ] , ["," , ["builtin#strcat" , vars [10]  , "	" , vars [13]      ] , ["builtin#strcat" , vars [13]  , vars [12]  , vars [4]      ]    ] , ["=" , ["::" , vars [4]  , ["/bootstrap#string"  ]    ] , ["::" , vars [10]  , ["/bootstrap#string"  ]    ]    ]     ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["builtin#catch" , ["," , ["cpi#procedureCommand" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cjs#get" , vars [6]  , vars [7]     ]   ] , ["/javascript/ajax#request"  ]    ] , vars [8]      ] , vars [9]     ] , ["," , ["=" , ["::" , vars [10]  , ["/bootstrap#string"  ]    ] , ["::" , "Shrink" , ["/bootstrap#string"  ]    ]    ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cjs#get" , vars [6]  , vars [7]     ]   ] , ["/javascript/ajax#request"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]    ] , vars [11]  , ["," , ["builtin#strcat" , "<exception>: " , "Shrink" , vars [10]      ] , ["=" , ["::" , vars [5]  , ["/bootstrap#procedure"  ]    ] , ["::" , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["cjs#get" , vars [6]  , vars [7]     ]   ] , ["/javascript/ajax#request"  ]    ] , vars [8]      ] , ["/bootstrap#procedure"  ]    ]    ]    ]     ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , ["::" , ["cjs#get" , vars [6]  , vars [7]     ] , ["/javascript/ajax#request"  ]    ] , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "annotation#comment"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["annotation#comment" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , ["/bootstrap#menuItem" , "Minimize comment" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#minComment" , vars [0]  , vars [1]     ] , vars [3]     ] , vars [2]      ] , ["/bootstrap#Yellow tag.png"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#minComment" , vars [0]  , vars [1]     ] , vars [3]     ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "annotation#minComment"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["annotation#minComment" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , ["/bootstrap#menuItem" , "Restore comment" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#comment" , vars [0]  , vars [1]     ] , vars [3]     ] , vars [2]      ] , ["/bootstrap#Yellow tag.png"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#comment" , vars [0]  , vars [1]     ] , vars [3]     ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#menuItem" , "Remove annotation" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , ["/bootstrap#noPath"  ] , vars [3]  , vars [1]      ]   ] , ["," , ["\\+" , ["builtin#var" , ["::" , vars [0]  , vars [2]     ]   ]   ] , ["," , ["/bootstrap#safeParseTerm" , ["::" , vars [0]  , vars [2]     ] , vars [4]  , ["." , vars [3]  , vars [5]     ]     ] , ["builtin#strcat" , "annotation#" , vars [6]  , vars [4]      ]    ]    ]    ] , ["/bootstrap#Delete.png"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , ["/bootstrap#noPath"  ] , vars [3]  , vars [1]      ]   ] , ["," , ["\\+" , ["builtin#var" , ["::" , vars [0]  , vars [2]     ]   ]   ] , ["," , ["/bootstrap#safeParseTerm" , ["::" , vars [0]  , vars [2]     ] , vars [4]  , ["." , vars [3]  , vars [5]     ]     ] , ["builtin#strcat" , "annotation#" , vars [6]  , vars [4]      ]    ]    ]    ] , vars [7]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "."     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Cut" , ["/bootstrap#cut" , ["." , vars [0]  , vars [1]     ] , vars [3]  , vars [2]  , ["/bootstrap#noPath"  ]      ] , ["/bootstrap#Cut.png"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#cut" , ["." , vars [0]  , vars [1]     ] , vars [3]  , vars [2]  , ["/bootstrap#noPath"  ]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#menuItem" , "Paste" , ["/bootstrap#paste" , vars [0]  , vars [2]  , vars [1]  , ["/bootstrap#noPath"  ]      ] , ["/bootstrap#Paste.png"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#paste" , vars [0]  , vars [2]  , vars [1]  , ["/bootstrap#noPath"  ]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#menuItem" , "Show Definitions" , ["/bootstrap#doShowDefinitions" , ["::" , vars [0]  , vars [2]     ]   ] , ["/bootstrap#Search.png"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#doShowDefinitions" , ["::" , vars [0]  , vars [2]     ]   ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#menuItem" , "Insert" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , vars [3]  , vars [0]     ] , ["/bootstrap#list" , vars [2]    ]    ] , vars [1]      ] , ["/bootstrap#Create.png"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , vars [3]  , vars [0]     ] , ["/bootstrap#list" , vars [2]    ]    ] , vars [1]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "."     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Append" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , vars [0]  , ["." , vars [4]  , vars [1]     ]    ] , ["/bootstrap#list" , vars [3]    ]    ] , vars [2]      ] , ["/bootstrap#Create.png"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , vars [0]  , ["." , vars [4]  , vars [1]     ]    ] , ["/bootstrap#list" , vars [3]    ]    ] , vars [2]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "."     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Delete" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , vars [1]  , ["/bootstrap#list" , vars [3]    ]    ] , vars [2]      ] , ["/bootstrap#Delete.png"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , vars [1]  , ["/bootstrap#list" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/Functional#cases" , vars [2]  , vars [3]     ]    ] , ["/bootstrap#menuItem" , "Insert Case" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/Functional#case" , vars [4]  , vars [5]  , vars [0]      ] , ["/Functional#cases" , vars [2]  , vars [3]     ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/Functional#case" , vars [4]  , vars [5]  , vars [0]      ] , ["/Functional#cases" , vars [2]  , vars [3]     ]    ] , vars [1]      ] , vars [6]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#case"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#case" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/Functional#cases" , vars [4]  , vars [5]     ]    ] , ["/bootstrap#menuItem" , "Remove Case" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , vars [2]  , ["/Functional#cases" , vars [4]  , vars [5]     ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , vars [2]  , ["/Functional#cases" , vars [4]  , vars [5]     ]    ] , vars [3]      ] , vars [6]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#wrap"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#wrap" , vars [0]    ] , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["/bootstrap#menuItem" , "Convert Wrap to Const" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , vars [3]  , ["/Functional#expr" , vars [2]    ]    ] , vars [4]      ]   ] , ["/Functional#wrapToConst" , ["/Functional#wrap" , vars [0]    ] , vars [3]  , vars [2]  , vars [1]  , vars [4]  , 1 , vars [5]          ]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , vars [3]  , ["/Functional#expr" , vars [2]    ]    ] , vars [4]      ]   ] , ["/Functional#wrapToConst" , ["/Functional#wrap" , vars [0]    ] , vars [3]  , vars [2]  , vars [1]  , vars [4]  , 1 , vars [5]          ]    ] , vars [6]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["/bootstrap#menuItem" , "Evaluate" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/Functional#wrap" , vars [3]    ] , ["/Functional#expr" , vars [2]    ]    ] , vars [1]      ]   ] , ["/Functional#eval" , vars [0]  , vars [2]  , vars [3]      ]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/Functional#wrap" , vars [3]    ] , ["/Functional#expr" , vars [2]    ]    ] , vars [1]      ]   ] , ["/Functional#eval" , vars [0]  , vars [2]  , vars [3]      ]    ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#sandbox" , "::"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#sandbox" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ]   ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Turn to unit test" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/bootstrap#unitTest" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [3]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/bootstrap#unitTest" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [3]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#menuItem" , "Insert Expression" , ["/Functional#insertExpression" , ["/bootstrap#noPath"  ] , vars [2]     ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/Functional#insertExpression" , ["/bootstrap#noPath"  ] , vars [2]     ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/html#xml"  ]    ] , ["/bootstrap#menuItem" , "Generate XML File" , ["/Functional#generateXMLFile" , "gen.xml" , vars [0]     ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/Functional#generateXMLFile" , "gen.xml" , vars [0]     ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#menuItem" , "Say Hello" , ["/Test#sayHelloTo" , ["::" , vars [0]  , vars [2]     ] , vars [1]     ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/Test#sayHelloTo" , ["::" , vars [0]  , vars [2]     ] , vars [1]     ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#menuItem" , "Show all signatures for namespace" , ["/Test#showAllSignaturesForNamespace" , ["::" , vars [0]  , vars [2]     ]   ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/Test#showAllSignaturesForNamespace" , ["::" , vars [0]  , vars [2]     ]   ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Split here" , ["/Test#splitStatementList" , vars [0]  , vars [1]  , ["/bootstrap#noPath"  ]     ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/Test#splitStatementList" , vars [0]  , vars [1]  , ["/bootstrap#noPath"  ]     ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#menuItem" , "Show numbered" , ["/Test#showNumbered" , ["::" , vars [0]  , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#noPath"  ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/Test#showNumbered" , ["::" , vars [0]  , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#noPath"  ] , vars [1]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#menuItem" , "Show in view" , ["/bootstrap#where" , ["/bootstrap#showView" , ["cpi#vis" , ["::" , ["cpi#descriptor" , ["/bootstrap#noPath"  ] , vars [0]  , ["[]"  ]     ] , vars [2]     ] , ["/bootstrap#vert"  ]    ]   ] , ["builtin#true"  ]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#showView" , ["cpi#vis" , ["::" , ["cpi#descriptor" , ["/bootstrap#noPath"  ] , vars [0]  , ["[]"  ]     ] , vars [2]     ] , ["/bootstrap#vert"  ]    ]   ] , ["builtin#true"  ]    ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/Test#state"  ]    ] , ["/bootstrap#menuItem" , vars [2]  , ["/Test#changeState" , vars [0]  , vars [2]  , vars [1]  , ["/bootstrap#noPath"  ]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/Test#changeState" , vars [0]  , vars [2]  , vars [1]  , ["/bootstrap#noPath"  ]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "." , "/bootstrap#signature"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , ["/bootstrap#signature" , vars [0]  , ["[]"  ]    ] , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Create an alias" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#signature" , vars [0]  , ["[]"  ]    ] , ["." , ["/bootstrap#projection" , vars [0]  , ["/bootstrap#label" , "alias"   ]    ] , vars [1]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#signature" , vars [0]  , ["[]"  ]    ] , ["." , ["/bootstrap#projection" , vars [0]  , ["/bootstrap#label" , "alias"   ]    ] , vars [1]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "." , "/bootstrap#signature"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Define projection" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["." , ["/bootstrap#projection" , vars [0]  , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [2]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["." , ["/bootstrap#projection" , vars [0]  , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [2]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#horiz"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#horiz" , vars [0]    ] , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#menuItem" , "Set alignment" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/bootstrap#horiz" , vars [0]  , ["cpi#top"  ]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/bootstrap#horiz" , vars [0]  , ["cpi#top"  ]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#menuItem" , "Change projection mode" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#changeMode" , vars [0]  , ["cpi#default"  ]    ] , vars [2]     ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#changeMode" , vars [0]  , ["cpi#default"  ]    ] , vars [2]     ] , vars [1]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "."     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Display horizontally" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#changeMode" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#horiz"  ]    ] , ["/bootstrap#list" , vars [3]    ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#changeMode" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#horiz"  ]    ] , ["/bootstrap#list" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "."     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Display vertically" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#changeMode" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#vert"  ]    ] , ["/bootstrap#list" , vars [3]    ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#changeMode" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#vert"  ]    ] , ["/bootstrap#list" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "." , "/bootstrap#defAtom"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , ["/bootstrap#defAtom" , vars [0]    ] , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Define Projection" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#defAtom" , vars [0]    ] , ["." , ["/bootstrap#projection" , vars [0]  , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [1]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#defAtom" , vars [0]    ] , ["." , ["/bootstrap#projection" , vars [0]  , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [1]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#contextMenuEntry"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#contextMenuEntry" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , vars [5]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Add Icon" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/bootstrap#contextMenuEntry" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [6]         ] , ["/bootstrap#statement"  ]    ] , vars [5]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/bootstrap#contextMenuEntry" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [6]         ] , ["/bootstrap#statement"  ]    ] , vars [5]      ] , vars [7]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Disable" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/bootstrap#disabled" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/bootstrap#disabled" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#disabled"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#disabled" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Enable" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#signature"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Add Description" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/bootstrap#doc" , vars [3]  , ["/bootstrap#signature" , vars [0]  , vars [1]     ]    ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/bootstrap#doc" , vars [3]  , ["/bootstrap#signature" , vars [0]  , vars [1]     ]    ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["[]"  ] , vars [0]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Export Cedalion Program" , ["/bootstrap#exportCedalionProgram"  ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#exportCedalionProgram"  ] , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "." , "/bootstrap#signature"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["." , ["/bootstrap#projection" , vars [0]  , vars [2]     ] , vars [3]     ]    ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Unify signature and projection" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#sigProj" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#sigProj" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "." , "/bootstrap#sigProj"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , ["/bootstrap#sigProj" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Split definitions" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["." , ["/bootstrap#projection" , vars [0]  , vars [2]     ] , vars [3]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["." , ["/bootstrap#projection" , vars [0]  , vars [2]     ] , vars [3]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "." , "/bootstrap#defAtom"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , ["/bootstrap#defAtom" , vars [0]    ] , ["." , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , vars [2]     ]    ] , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Unify signature and projection" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#sigProjAtom" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#sigProjAtom" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "." , "/bootstrap#sigProjAtom"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , ["/bootstrap#sigProjAtom" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Split definitions" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#defAtom" , vars [0]    ] , ["." , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , vars [2]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#defAtom" , vars [0]    ] , ["." , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , vars [2]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#symbol"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#symbol" , vars [0]    ] , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#menuItem" , vars [2]  , ["/bootstrap#showSymbols" , vars [2]  , ["/bootstrap#noPath"  ]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#showSymbols" , vars [2]  , ["/bootstrap#noPath"  ]    ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "." , "/bootstrap#symbol"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , ["/bootstrap#symbol" , vars [0]    ] , ["." , vars [1]  , ["." , ["/bootstrap#symbol" , vars [2]    ] , vars [3]     ]    ]    ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["/bootstrap#menuItem" , "Create brackets" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#brackets" , vars [1]  , vars [0]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#brackets" , vars [1]  , vars [0]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "." , "/bootstrap#brackets"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , ["/bootstrap#brackets" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["/bootstrap#menuItem" , "Split brackets" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#symbol" , vars [1]    ] , ["." , vars [0]  , ["." , ["/bootstrap#symbol" , vars [2]    ] , vars [3]     ]    ]    ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#symbol" , vars [1]    ] , ["." , vars [0]  , ["." , ["/bootstrap#symbol" , vars [2]    ] , vars [3]     ]    ]    ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#menuItem" , "Show tree" , ["/bootstrap#showTree" , ["::" , vars [0]  , vars [2]     ]   ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#showTree" , ["::" , vars [0]  , vars [2]     ]   ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#unitTest"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#unitTest" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Show all Failed Tests" , ["/bootstrap#showFailedTests"  ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#showFailedTests"  ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , ["." , ["builtin#varName" , vars [1]  , vars [2]     ] , ["[]"  ]    ]    ] , vars [3]     ] , ["/bootstrap#menuItem" , "Define Variable Name Macro" , ["/bootstrap#insertStatement" , ["/bootstrap#varNameMacroStatement" , vars [2]  , ["/bootstrap#symbol" , vars [4]    ]    ] , ["/bootstrap#noPath"  ] , ["[]"  ]     ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#insertStatement" , ["/bootstrap#varNameMacroStatement" , vars [2]  , ["/bootstrap#symbol" , vars [4]    ]    ] , ["/bootstrap#noPath"  ] , ["[]"  ]     ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#on"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Add delay" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/cedalionWeb/jquery#onDelayed" , vars [1]  , vars [2]  , vars [0]  , 200 , vars [3]        ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/cedalionWeb/jquery#onDelayed" , vars [1]  , vars [2]  , vars [0]  , 200 , vars [3]        ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#on"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Add event instance" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [4]  , vars [2]       ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [4]  , vars [2]       ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#menuItem" , "Insert" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/cedalionWeb/xml#list" , vars [2]  , vars [0]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/cedalionWeb/xml#list" , vars [2]  , vars [0]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/xml#list"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/xml#list" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#menuItem" , "Append" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/cedalionWeb/xml#list" , vars [0]  , ["/cedalionWeb/xml#list" , vars [3]  , vars [1]     ]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/cedalionWeb/xml#list" , vars [0]  , ["/cedalionWeb/xml#list" , vars [3]  , vars [1]     ]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/xml#list"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/xml#list" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#menuItem" , "Delete" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "." , "/bootstrap#unitTest"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , ["/bootstrap#unitTest" , vars [0]    ] , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Create sub-tests" , ["/debugging#createSubTests" , vars [0]  , vars [1]  , vars [2]  , ["/bootstrap#noPath"  ]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/debugging#createSubTests" , vars [0]  , vars [1]  , vars [2]  , ["/bootstrap#noPath"  ]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "." , "/bootstrap#unitTest"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["." , ["/bootstrap#unitTest" , vars [0]    ] , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Apply first goal" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#unitTest" , vars [3]    ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [5]      ]   ] , ["," , ["=" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , vars [3]  , vars [6]     ] , ["/bootstrap#pred"  ]    ]    ] , ["," , ["builtin#findall" , ["/bootstrap#unitTest" , vars [6]    ] , ["/bootstrap#statement"  ] , vars [3]  , vars [7]       ] , ["," , ["/bootstrap#append" , vars [7]  , vars [1]  , vars [4]  , ["/bootstrap#statement"  ]      ] , ["/debugging#completeVarNames" , ["::" , ["." , ["/bootstrap#unitTest" , vars [3]    ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [2]  , vars [5]      ]    ]    ]    ]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["." , ["/bootstrap#unitTest" , vars [3]    ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [5]      ]   ] , ["," , ["=" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , vars [3]  , vars [6]     ] , ["/bootstrap#pred"  ]    ]    ] , ["," , ["builtin#findall" , ["/bootstrap#unitTest" , vars [6]    ] , ["/bootstrap#statement"  ] , vars [3]  , vars [7]       ] , ["," , ["/bootstrap#append" , vars [7]  , vars [1]  , vars [4]  , ["/bootstrap#statement"  ]      ] , ["/debugging#completeVarNames" , ["::" , ["." , ["/bootstrap#unitTest" , vars [3]    ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [2]  , vars [5]      ]    ]    ]    ]    ] , vars [8]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["/bootstrap#menuItem" , "Show XML" , ["/html#showXml" , vars [0]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/html#showXml" , vars [0]    ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/javascript/ajax#ajaxExpr" , vars [2]    ]    ] , ["/bootstrap#menuItem" , "Evaluate" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/javascript/ajax#ajaxExpr" , vars [3]  , vars [4]     ] , ["/javascript/ajax#ajaxExpr" , vars [2]    ]    ] , vars [1]      ]   ] , ["cjs#ajaxEval" , vars [0]  , vars [2]  , vars [3]  , vars [4]       ]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/javascript/ajax#ajaxExpr" , vars [3]  , vars [4]     ] , ["/javascript/ajax#ajaxExpr" , vars [2]    ]    ] , vars [1]      ]   ] , ["cjs#ajaxEval" , vars [0]  , vars [2]  , vars [3]  , vars [4]       ]    ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/javascript/ajax#ajaxExpr" , vars [2]    ]    ] , ["/bootstrap#menuItem" , "Evaluate Fully" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/javascript/ajax#ajaxExpr" , ["/Functional#const" , vars [3]    ] , ["[]"  ]    ] , ["/javascript/ajax#ajaxExpr" , vars [2]    ]    ] , vars [1]      ]   ] , ["," , ["cjs#ajaxEval" , vars [0]  , vars [2]  , vars [4]  , ["[]"  ]      ] , ["/Functional#eval" , vars [4]  , vars [2]  , vars [3]      ]    ]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/javascript/ajax#ajaxExpr" , ["/Functional#const" , vars [3]    ] , ["[]"  ]    ] , ["/javascript/ajax#ajaxExpr" , vars [2]    ]    ] , vars [1]      ]   ] , ["," , ["cjs#ajaxEval" , vars [0]  , vars [2]  , vars [4]  , ["[]"  ]      ] , ["/Functional#eval" , vars [4]  , vars [2]  , vars [3]      ]    ]    ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , ["[]"  ]    ] , vars [1]     ] , ["/bootstrap#menuItem" , "To String" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["/bootstrap#showInView" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]   ] , ["/Functional#eval" , ["/javascript#toString" , ["::" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#string"  ] , vars [2]      ]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["/bootstrap#showInView" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]   ] , ["/Functional#eval" , ["/javascript#toString" , ["::" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#string"  ] , vars [2]      ]    ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Generate Javascript Code" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , vars [0]    ]   ]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , vars [0]    ]   ]    ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Generate raw clauses" , ["/javascript/jsLogic#writeClauses" , vars [0]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/javascript/jsLogic#writeClauses" , vars [0]    ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Generate Javascript Code for the Entire Program" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , ["/javascript/jsLogic#allClauses"  ]   ]   ]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , ["/javascript/jsLogic#allClauses"  ]   ]   ]    ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#op"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#menuItem" , "Swap places" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/javascript#op" , vars [2]  , vars [1]  , vars [0]      ] , ["/javascript#expr"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/javascript#op" , vars [2]  , vars [1]  , vars [0]      ] , ["/javascript#expr"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/bootstrap#menuItem" , "Generate javascript for the entire program (optimized)" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , ["/javascript/optimization#optAllClauses"  ]   ]   ]    ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , ["/javascript/optimization#optAllClauses"  ]   ]   ]    ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#whenever"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Add finally clause" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : []    }  )      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : []    }  )      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#unitTest"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#unitTest" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#unitTest" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#unitTest" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/xml#elem"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/xml#elem" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#elem" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#elem" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#function"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#function" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#function" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#function" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#applyBinOp"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/Functional#expr" , vars [4]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Functional#expr" , vars [4]    ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Functional#expr" , vars [4]    ]    ] , vars [3]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#applyBinOpList"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#applyBinOpList" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/Functional#expr" , ["/bootstrap#list" , vars [4]    ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#applyBinOpList" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Functional#expr" , ["/bootstrap#list" , vars [4]    ]   ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#applyBinOpList" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Functional#expr" , ["/bootstrap#list" , vars [4]    ]   ]    ] , vars [3]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#applyBinOpListScalar"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#applyBinOpListScalar" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/Functional#expr" , ["/bootstrap#list" , vars [4]    ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#applyBinOpListScalar" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Functional#expr" , ["/bootstrap#list" , vars [4]    ]   ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#applyBinOpListScalar" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Functional#expr" , ["/bootstrap#list" , vars [4]    ]   ]    ] , vars [3]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#reduce"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#reduce" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Functional#expr" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#reduce" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#reduce" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#valueApplyBinOp"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#valueApplyBinOp" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , vars [5]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#valueApplyBinOp" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ]   ] , ["/bootstrap#pred"  ]    ] , vars [5]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#valueApplyBinOp" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ]   ] , ["/bootstrap#pred"  ]    ] , vars [5]      ] , vars [6]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#otherwise"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#otherwise" , vars [0]    ] , vars [1]     ] , ["/Functional#cases" , vars [2]  , vars [3]     ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#otherwise" , vars [0]    ]   ] , ["/Functional#cases" , vars [2]  , vars [3]     ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#otherwise" , vars [0]    ]   ] , ["/Functional#cases" , vars [2]  , vars [3]     ]    ] , vars [1]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#eq"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#eq" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#eq" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#eq" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "builtin#greaterThen"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["builtin#greaterThen" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["builtin#greaterThen" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["builtin#greaterThen" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#gt"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#gt" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#gt" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#gt" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#ge"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#ge" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#ge" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#ge" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#eval"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#minus"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#minus" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Functional#expr" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#minus" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#minus" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#mult"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#mult" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Functional#expr" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#mult" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#mult" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#idiv"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#idiv" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#idiv" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#idiv" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#modulus"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#modulus" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#modulus" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#modulus" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#def"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#def" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#def" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#def" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#func"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#func" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#type"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#func" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#type"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#func" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#type"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#lambda"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#lambda" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Functional#func" , vars [3]  , vars [4]     ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#lambda" , vars [0]  , vars [1]     ]   ] , ["/Functional#func" , vars [3]  , vars [4]     ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#lambda" , vars [0]  , vars [1]     ]   ] , ["/Functional#func" , vars [3]  , vars [4]     ]    ] , vars [2]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#apply"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#apply" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/Functional#expr" , vars [4]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#apply" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Functional#expr" , vars [4]    ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#apply" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Functional#expr" , vars [4]    ]    ] , vars [3]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#pairType"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#pairType" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#type"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#pairType" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#type"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#pairType" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#type"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#pair"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#pair" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Functional#pairType" , vars [3]  , vars [4]     ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#pair" , vars [0]  , vars [1]     ]   ] , ["/Functional#pairType" , vars [3]  , vars [4]     ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#pair" , vars [0]  , vars [1]     ]   ] , ["/Functional#pairType" , vars [3]  , vars [4]     ]    ] , vars [2]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#plus"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#plus" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Functional#expr" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#plus" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#plus" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#element"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#element" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Functional#expr" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#element" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#element" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#constSeq"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#constSeq" , vars [0]    ] , vars [1]     ] , ["/Functional#expr" , ["/Functional#seq" , vars [2]    ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#constSeq" , vars [0]    ]   ] , ["/Functional#expr" , ["/Functional#seq" , vars [2]    ]   ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#constSeq" , vars [0]    ]   ] , ["/Functional#expr" , ["/Functional#seq" , vars [2]    ]   ]    ] , vars [1]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#concat"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#concat" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#concat" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#concat" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Functional#where"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Functional#where" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Functional#expr" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#where" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Functional#where" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#f"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#f" , vars [0]    ] , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#f" , vars [0]    ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#f" , vars [0]    ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test/bnf#token"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test/bnf#token" , vars [0]    ] , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#token" , vars [0]    ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#token" , vars [0]    ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test/bnf#concat"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test/bnf#concat" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Test/bnf#pattern"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#concat" , vars [0]  , vars [1]     ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#concat" , vars [0]  , vars [1]     ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test/bnf#prod"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test/bnf#prod" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#prod" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#prod" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test/bnf#parse"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test/bnf#parse" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#parse" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#parse" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test/bnf#symbol"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test/bnf#symbol" , vars [0]    ] , vars [1]     ] , ["/Test/bnf#token"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#symbol" , vars [0]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#symbol" , vars [0]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test/bnf#trainQuery"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test/bnf#trainQuery" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Test/bnf#trainQuery"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#trainQuery" , vars [0]  , vars [1]     ]   ] , ["/Test/bnf#trainQuery"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#trainQuery" , vars [0]  , vars [1]     ]   ] , ["/Test/bnf#trainQuery"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test/bnf#fromTo"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test/bnf#fromTo" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Test/bnf#routeQueryType"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#fromTo" , vars [0]  , vars [1]     ]   ] , ["/Test/bnf#routeQueryType"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#fromTo" , vars [0]  , vars [1]     ]   ] , ["/Test/bnf#routeQueryType"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test/bnf#onDate"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test/bnf#onDate" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/Test/bnf#timeQueryType"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#onDate" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Test/bnf#timeQueryType"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#onDate" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Test/bnf#timeQueryType"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test/bnf#word"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test/bnf#word" , vars [0]    ] , vars [1]     ] , ["/Test/bnf#token"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#word" , vars [0]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#word" , vars [0]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test/bnf#location"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test/bnf#location" , vars [0]    ] , vars [1]     ] , ["/Test/bnf#token"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#location" , vars [0]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#location" , vars [0]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#evaluatesTo"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#evaluatesTo" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#evaluatesTo" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#evaluatesTo" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#final"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#final" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#final" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#final" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#finallyEvaluatesTo"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#finallyEvaluatesTo" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#finallyEvaluatesTo" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#finallyEvaluatesTo" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#and"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#and" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Test#boolean"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#and" , vars [0]  , vars [1]     ]   ] , ["/Test#boolean"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#and" , vars [0]  , vars [1]     ]   ] , ["/Test#boolean"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#or"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#or" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Test#boolean"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#or" , vars [0]  , vars [1]     ]   ] , ["/Test#boolean"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#or" , vars [0]  , vars [1]     ]   ] , ["/Test#boolean"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#not"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#not" , vars [0]    ] , vars [1]     ] , ["/Test#boolean"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#not" , vars [0]    ]   ] , ["/Test#boolean"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#not" , vars [0]    ]   ] , ["/Test#boolean"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#trans"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#trans" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#trans" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#trans" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#prefix"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#prefix" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Test#process"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#prefix" , vars [0]  , vars [1]     ]   ] , ["/Test#process"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#prefix" , vars [0]  , vars [1]     ]   ] , ["/Test#process"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#alt"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#alt" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Test#process"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#alt" , vars [0]  , vars [1]     ]   ] , ["/Test#process"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#alt" , vars [0]  , vars [1]     ]   ] , ["/Test#process"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#procDef"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#procDef" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#procDef" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#procDef" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#reaches"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#reaches" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#reaches" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#reaches" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#cond"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#cond" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Test#process"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#cond" , vars [0]  , vars [1]     ]   ] , ["/Test#process"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#cond" , vars [0]  , vars [1]     ]   ] , ["/Test#process"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#costs"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#costs" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#costs" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#costs" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#worths"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#worths" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#worths" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#worths" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#sayHelloTo"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#sayHelloTo" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#sayHelloTo" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#sayHelloTo" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#statements"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#statements" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#statements" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#statements" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#e"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#e" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#e" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#e" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#p"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#p" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#p" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#p" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#time"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#time" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/Test#eventTime"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#time" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Test#eventTime"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#time" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Test#eventTime"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#pavilion"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#pavilion" , vars [0]    ] , vars [1]     ] , ["/Test#location"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#pavilion" , vars [0]    ]   ] , ["/Test#location"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#pavilion" , vars [0]    ]   ] , ["/Test#location"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#galleria"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#galleria" , vars [0]    ] , vars [1]     ] , ["/Test#location"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#galleria" , vars [0]    ]   ] , ["/Test#location"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#galleria" , vars [0]    ]   ] , ["/Test#location"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#visitUsAt"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#visitUsAt" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#visitUsAt" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#visitUsAt" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#subState"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#subState" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#subState" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#subState" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#initialState"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#initialState" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#initialState" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#initialState" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#transition"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#transition" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#transition" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#transition" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#hello"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#hello" , vars [0]    ] , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#hello" , vars [0]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#hello" , vars [0]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#adapter"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#adapter" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#adapter" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#adapter" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#alias"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#alias" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#alias" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#alias" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "annotation#changeMode"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["annotation#changeMode" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["annotation#changeMode" , vars [0]  , vars [1]     ]   ] , vars [3]     ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["annotation#changeMode" , vars [0]  , vars [1]     ]   ] , vars [3]     ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#defAtom"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#defAtom" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#defAtom" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#defAtom" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#default"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#default" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#default" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#default" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#projection"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#projection" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#projection" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "~>"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["~>" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["~>" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["~>" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "::"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#typedTerm"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["::" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#typedTerm"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["::" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#typedTerm"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , ":-"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , [":-" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , [":-" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , [":-" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#signature"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#signature" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#signature" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#or"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#or" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#or" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#or" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#generateFileForSet"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#generateFileForSet" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#generateFileForSet" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#generateFileForSet" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#requires"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#requires" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#requires" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#requires" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#missing"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#missing" , vars [0]    ] , vars [1]     ] , ["/bootstrap#error"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#missing" , vars [0]    ]   ] , ["/bootstrap#error"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#missing" , vars [0]    ]   ] , ["/bootstrap#error"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#defines"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#defines" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#defines" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#defines" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#deprecated"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#deprecated" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#deprecated" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#deprecated" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#deprecationReplacement"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#deprecationReplacement" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#deprecationReplacement" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#deprecationReplacement" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "cpi#path"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["cpi#path" , vars [0]  , vars [1]     ] , vars [2]     ] , ["cpi#path"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cpi#path" , vars [0]  , vars [1]     ]   ] , ["cpi#path"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cpi#path" , vars [0]  , vars [1]     ]   ] , ["cpi#path"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "builtin#succ"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["builtin#succ" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["builtin#succ" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["builtin#succ" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , ">"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , [">" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , [">" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , [">" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "="     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["=" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["=" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["=" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "+"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["+" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["+" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["+" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "-"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["-" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["-" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["-" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "cpi#constExpr"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["cpi#constExpr" , vars [0]    ] , vars [1]     ] , ["/bootstrap#expr" , vars [2]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cpi#constExpr" , vars [0]    ]   ] , ["/bootstrap#expr" , vars [2]    ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cpi#constExpr" , vars [0]    ]   ] , ["/bootstrap#expr" , vars [2]    ]    ] , vars [1]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "builtin#equals"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["builtin#equals" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["builtin#equals" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["builtin#equals" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "builtin#import"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["builtin#import" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["builtin#import" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["builtin#import" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#forall"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#forall" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#forall" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#forall" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#listMember"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#listMember" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#listMember" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#listMember" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "cpi#func"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["cpi#func" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cpi#func" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#procedure"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cpi#func" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#procedure"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#doAll"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#doAll" , vars [0]    ] , vars [1]     ] , ["/bootstrap#command"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#doAll" , vars [0]    ]   ] , ["/bootstrap#command"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#doAll" , vars [0]    ]   ] , ["/bootstrap#command"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#assign"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#assign" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#command"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#assign" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#command"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#assign" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#command"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#doProc"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#doProc" , vars [0]    ] , vars [1]     ] , ["/bootstrap#command"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#doProc" , vars [0]    ]   ] , ["/bootstrap#command"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#doProc" , vars [0]    ]   ] , ["/bootstrap#command"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#where"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#where" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#where" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#where" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#foreach"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#foreach" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#foreach" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#foreach" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "builtin#findall"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["builtin#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["builtin#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["builtin#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#projection"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#projection" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#projection" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#projection" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#member"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#member" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#member" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#member" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#setDef"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#setDef" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#setDef" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#setDef" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#union"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#union" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#set" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#union" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#set" , vars [3]    ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#union" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#set" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#intersect"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#intersect" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#set" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#intersect" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#set" , vars [3]    ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#intersect" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#set" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#diffSet"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#diffSet" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#set" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#diffSet" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#set" , vars [3]    ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#diffSet" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#set" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#notMember"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#notMember" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#notMember" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#notMember" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#shortcutKey"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#shortcutKey" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#shortcutKey" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#shortcutKey" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#signaturePlaceMismatch"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#signaturePlaceMismatch" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#error"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#signaturePlaceMismatch" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#error"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#signaturePlaceMismatch" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#error"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#nonVarInSignature"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#nonVarInSignature" , vars [0]    ] , vars [1]     ] , ["/bootstrap#error"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#nonVarInSignature" , vars [0]    ]   ] , ["/bootstrap#error"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#nonVarInSignature" , vars [0]    ]   ] , ["/bootstrap#error"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#signatureVarInBodyAndNotInHead"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [0]    ] , vars [1]     ] , ["/bootstrap#error"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [0]    ]   ] , ["/bootstrap#error"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [0]    ]   ] , ["/bootstrap#error"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#symbolRange"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#symbolRange" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#symbolRange" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#symbolRange" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#tip"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#tip" , vars [0]    ] , vars [1]     ] , ["/bootstrap#marker"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#tip" , vars [0]    ]   ] , ["/bootstrap#marker"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#tip" , vars [0]    ]   ] , ["/bootstrap#marker"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#tip"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#tip" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#tip" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#tip" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#true"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#true" , vars [0]    ] , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#true" , vars [0]    ]   ] , ["/bootstrap#pred"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#true" , vars [0]    ]   ] , ["/bootstrap#pred"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#missingSignature"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#missingSignature" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#error"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#missingSignature" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#error"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#missingSignature" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#error"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#unitTest"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#unitTest" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#unitTest" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#unitTest" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "\\+"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["\\+" , vars [0]    ] , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["\\+" , vars [0]    ]   ] , ["/bootstrap#pred"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["\\+" , vars [0]    ]   ] , ["/bootstrap#pred"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#failedTest"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#failedTest" , vars [0]    ] , vars [1]     ] , ["/bootstrap#error"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#failedTest" , vars [0]    ]   ] , ["/bootstrap#error"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#failedTest" , vars [0]    ]   ] , ["/bootstrap#error"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#insertStatement"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#insertStatement" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#insertStatement" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#procedure"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#insertStatement" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#procedure"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "cpi#vis"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["cpi#vis" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cpi#vis" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#visualization"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cpi#vis" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#visualization"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#vert"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#vert" , vars [0]    ] , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#vert" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#vert" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#label"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#label" , vars [0]    ] , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#label" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#label" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#italic"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#italic" , vars [0]    ] , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#italic" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#italic" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#bold"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#bold" , vars [0]    ] , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#bold" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#bold" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#halfSize"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#halfSize" , vars [0]    ] , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#halfSize" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#halfSize" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#smaller"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#smaller" , vars [0]    ] , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#smaller" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#smaller" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#pivot"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#pivot" , vars [0]    ] , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#pivot" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#pivot" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#varNameMacroStatement"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#varNameMacroStatement" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#varNameMacroStatement" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#varNameMacroStatement" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#varNameSuffix"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#varNameSuffix" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#varNameSuffix" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#varNameSuffix" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/couchdb#insertDocument"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/couchdb#updateDocument"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/couchdb#updateDocument"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , vars [5]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [5]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [5]      ] , vars [6]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "cjs#verifyDatabaseRev"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["cjs#verifyDatabaseRev" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cjs#verifyDatabaseRev" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cjs#verifyDatabaseRev" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#ajaxQuery"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#ajaxQuery" , vars [0]    ] , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#ajaxQuery" , vars [0]    ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#ajaxQuery" , vars [0]    ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#onServer"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#onServer" , vars [0]    ] , vars [1]     ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#onServer" , vars [0]    ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#onServer" , vars [0]    ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#animate"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#runAfterGen"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#runAfterGen" , vars [0]    ] , vars [1]     ] , ["/cedalionWeb/xml#annotation"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#runAfterGen" , vars [0]    ]   ] , ["/cedalionWeb/xml#annotation"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#runAfterGen" , vars [0]    ]   ] , ["/cedalionWeb/xml#annotation"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#animate"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#changeContent"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#changeContent" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#changeContent" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#changeContent" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#applyAnnot"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#applyAnnot" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#applyAnnot" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#applyAnnot" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#modifyElement"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#modifyElement" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#modifyElement" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#modifyElement" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#replaceWith"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#replaceWith" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#replaceWith" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#replaceWith" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#prependTo"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#prependTo" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#prependTo" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#prependTo" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/jquery#appendTo"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/jquery#appendTo" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#appendTo" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#appendTo" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb#addKeyComponents"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb#addKeyComponents" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb#addKeyComponents" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb#addKeyComponents" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/node#get"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/node#get" , vars [0]    ] , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#get" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#get" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/node#json"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/node#json" , vars [0]    ] , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#json" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#json" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/node#dot"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/node#dot" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#dot" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#dot" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/node#jsonStringify"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/node#jsonStringify" , vars [0]    ] , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#jsonStringify" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#jsonStringify" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/node#arrayElement"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/node#arrayElement" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#arrayElement" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#arrayElement" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/node#urlQuery"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/node#urlQuery" , vars [0]    ] , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#urlQuery" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#urlQuery" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/node#arg"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/cedalionWeb/node#queryArg"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ]   ] , ["/cedalionWeb/node#queryArg"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ]   ] , ["/cedalionWeb/node#queryArg"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb#implies"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb#implies" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb#implies" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb#implies" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb#rewrite"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb#rewrite" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb#rewrite" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb#rewrite" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/ui#ul"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/ui#ul" , vars [0]    ] , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/ui#ul" , vars [0]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/ui#ul" , vars [0]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/visualization#editActionIcon"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/visualization#editActionIcon" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#editActionIcon" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#editActionIcon" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/visualization#suggestion"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/visualization#suggestion" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#suggestion" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#suggestion" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/visualization#edit"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/visualization#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/visualization#visualizeDescriptor"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/visualization#defineModifier"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/visualization#defineModifier" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#defineModifier" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#defineModifier" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/xml#macro"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/xml#macro" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#macro" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#macro" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/xml#generates"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/xml#attr"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/cedalionWeb/xml#attr"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ]   ] , ["/cedalionWeb/xml#attr"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ]   ] , ["/cedalionWeb/xml#attr"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/xml#str"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/xml#str" , vars [0]    ] , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#str" , vars [0]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#str" , vars [0]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/xml#entity"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/xml#entity" , vars [0]    ] , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#entity" , vars [0]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#entity" , vars [0]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/xml#generates2"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/xml#generates2" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#generates2" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#generates2" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/xml#attr2"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/xml#attr2" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/cedalionWeb/xml#attribute"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#attr2" , vars [0]  , vars [1]     ]   ] , ["/cedalionWeb/xml#attribute"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#attr2" , vars [0]  , vars [1]     ]   ] , ["/cedalionWeb/xml#attribute"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/html#entity"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/html#entity" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/html#entity" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/html#entity" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/html#paragraph"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/html#paragraph" , vars [0]    ] , vars [1]     ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/html#paragraph" , vars [0]    ]   ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/html#paragraph" , vars [0]    ]   ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "xml#attribute"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["xml#attribute" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/html#xmlAttr"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["xml#attribute" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/html#xmlAttr"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["xml#attribute" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/html#xmlAttr"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "xml#string"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["xml#string" , vars [0]    ] , vars [1]     ] , ["/html#xml"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["xml#string" , vars [0]    ]   ] , ["/html#xml"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["xml#string" , vars [0]    ]   ] , ["/html#xml"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/html#unicode"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/html#unicode" , vars [0]    ] , vars [1]     ] , ["/html#xml"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/html#unicode" , vars [0]    ]   ] , ["/html#xml"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/html#unicode" , vars [0]    ]   ] , ["/html#xml"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/ajax#ajaxDef"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/ajax#ajaxDef" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/ajax#ajaxDef" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/ajax#ajaxDef" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "cjs#ajaxEval"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["cjs#ajaxEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cjs#ajaxEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cjs#ajaxEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/ajax#applyBinOp"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/ajax#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript/ajax#ajaxExpr" , vars [4]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/ajax#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/ajax#ajaxExpr" , vars [4]    ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/ajax#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/ajax#ajaxExpr" , vars [4]    ]    ] , vars [3]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#arrayElement"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#arrayElement" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#arrayElement" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#arrayElement" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#var"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#var" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#var" , vars [0]  , vars [1]     ]   ] , ["/javascript#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#var" , vars [0]  , vars [1]     ]   ] , ["/javascript#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#assign"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#assign" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#assign" , vars [0]  , vars [1]     ]   ] , ["/javascript#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#assign" , vars [0]  , vars [1]     ]   ] , ["/javascript#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/asyncproc#sync"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/asyncproc#sync" , vars [0]    ] , vars [1]     ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/asyncproc#sync" , vars [0]    ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/asyncproc#sync" , vars [0]    ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#new"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#new" , vars [0]    ] , vars [1]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#new" , vars [0]    ]   ] , ["/javascript#expr"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#new" , vars [0]    ]   ] , ["/javascript#expr"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#hasSpecialRendering"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#hasSpecialRendering" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#hasSpecialRendering" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#hasSpecialRendering" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#return"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#return" , vars [0]    ] , vars [1]     ] , ["/javascript#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#return" , vars [0]    ]   ] , ["/javascript#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#return" , vars [0]    ]   ] , ["/javascript#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#call"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#call" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#call" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#call" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#exprStatement"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#exprStatement" , vars [0]    ] , vars [1]     ] , ["/javascript#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#exprStatement" , vars [0]    ]   ] , ["/javascript#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#exprStatement" , vars [0]    ]   ] , ["/javascript#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#return"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#return"  ] , vars [0]     ] , ["/javascript#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#return"  ]   ] , ["/javascript#statement"  ]    ] , vars [0]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#return"  ]   ] , ["/javascript#statement"  ]    ] , vars [0]      ] , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#equal"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#equal" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#equal" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#equal" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/jsLogic#pred"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/jsLogic#pred" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#predicateID"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#pred" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#predicateID"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#pred" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#predicateID"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/jsLogic#throw"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/jsLogic#throw" , vars [0]    ] , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#throw" , vars [0]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#throw" , vars [0]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/jsLogic#typeof"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/jsLogic#typeof" , vars [0]    ] , vars [1]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#typeof" , vars [0]    ]   ] , ["/javascript#expr"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#typeof" , vars [0]    ]   ] , ["/javascript#expr"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/jsLogic#length"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/jsLogic#length" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#length" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#length" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/jsLogic#do"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/jsLogic#do" , vars [0]    ] , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#do" , vars [0]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#do" , vars [0]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/jsLogic#renderHTML"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/jsLogic#renderHTML" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#renderHTML" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#renderHTML" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#bind"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#bind" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript#fieldAssignment"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#bind" , vars [0]  , vars [1]     ]   ] , ["/javascript#fieldAssignment"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#bind" , vars [0]  , vars [1]     ]   ] , ["/javascript#fieldAssignment"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#dot"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#dot" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#dot" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#dot" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#op"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript#expr"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript#expr"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/optimization#concatGoals"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/optimization#concatGoals" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/optimization#concatGoals" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/optimization#concatGoals" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#async"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#async" , vars [0]    ] , vars [1]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#async" , vars [0]    ]   ] , ["/javascript#expr"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#async" , vars [0]    ]   ] , ["/javascript#expr"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#clause"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#clause" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#clause" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#clause" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#findall"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#jsFunction"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#jsFunction" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript/statepred#stateExpr" , vars [4]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#jsFunction" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#stateExpr" , vars [4]    ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#jsFunction" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#stateExpr" , vars [4]    ]    ] , vars [3]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#pair"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#pair" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [3]  , vars [4]     ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#pair" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [3]  , vars [4]     ]   ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#pair" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [3]  , vars [4]     ]   ]    ] , vars [2]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#member"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#setDef"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#setDef" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#setDef" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#setDef" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#stateEval"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#stateEval" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateEval" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateEval" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#stateApplyBinOp"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript/statepred#stateExpr" , vars [4]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#stateExpr" , vars [4]    ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#stateExpr" , vars [4]    ]    ] , vars [3]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#stateExprDef"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#stateExprDef" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateExprDef" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateExprDef" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#where"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#where" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#where" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#where" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , vars [2]      ] , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#trace"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#trace" , vars [0]    ] , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#trace" , vars [0]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#trace" , vars [0]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#tracePred"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#tracePred" , vars [0]    ] , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#tracePred" , vars [0]    ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#tracePred" , vars [0]    ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript/statepred#unitTest"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript/statepred#unitTest" , vars [0]    ] , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#unitTest" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript/statepred#unitTest" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/javascript#break"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/javascript#break"  ] , vars [0]     ] , ["/javascript#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#break"  ]   ] , ["/javascript#statement"  ]    ] , vars [0]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/javascript#break"  ]   ] , ["/javascript#statement"  ]    ] , vars [0]      ] , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test/bnf#or"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test/bnf#or" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/Test/bnf#pattern"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#or" , vars [0]  , vars [1]     ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test/bnf#or" , vars [0]  , vars [1]     ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/Test#event"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/Test#event" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#event" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/Test#event" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#append"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#append" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#append" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#append" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#error"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#error" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#error" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#error" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ] , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#raised"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#raised" , vars [0]    ] , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#raised" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#raised" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/bootstrap#lowered"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/bootstrap#lowered" , vars [0]    ] , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#lowered" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/bootstrap#lowered" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [1]      ] , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "/cedalionWeb/couchdb#viewResults"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["/cedalionWeb/couchdb#viewResults" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , vars [5]     ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#viewResults" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ]   ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [5]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#viewResults" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ]   ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [5]      ] , vars [6]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#contextMenuEntry" , "::" , "cpi#immediateDescriptor" , "cjs#get"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#contextMenuEntry" , ["::" , ["cpi#immediateDescriptor" , ["cjs#get" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/ajax#request"  ]    ] , ["/bootstrap#menuItem" , "Shrink" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cjs#get" , vars [0]  , vars [1]     ]   ] , ["/javascript/ajax#request"  ]    ] , vars [2]      ] , ["cpi#none"  ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["cpi#procedureCommand" , ["cpi#edit" , ["/bootstrap#noPath"  ] , ["::" , ["annotation#shrink" , ["cjs#get" , vars [0]  , vars [1]     ]   ] , ["/javascript/ajax#request"  ]    ] , vars [2]      ] , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine" , ":-" , "/Functional#eval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , [":-" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["/bootstrap#semanticDefinition"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine" , ":-"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , [":-" , vars [0]  , vars [1]     ] , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["/bootstrap#requiredSemanticDefinition"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine" , "/bootstrap#signature"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , vars [0]  , ["/bootstrap#typeSignature"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine" , "/bootstrap#projection"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , vars [0]  , ["/bootstrap#projectionDefinition"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine" , "~>"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , ["~>" , vars [0]  , vars [1]     ] , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["/bootstrap#semanticDefinition"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine" , "/bootstrap#signature" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , ["/bootstrap#signature" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["/bootstrap#semanticDefinition"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine" , ":-" , "cpi#termClass"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , [":-" , ["cpi#termClass" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [0]  , ["/bootstrap#semanticDefinition"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine" , ":-" , "cpi#procedureCommand"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , [":-" , ["cpi#procedureCommand" , vars [0]  , vars [1]     ] , vars [2]     ] , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#semanticDefinition"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine" , "/bootstrap#projection"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , ["/bootstrap#projection" , vars [0]  , vars [1]  , vars [2]      ] , vars [0]  , ["/bootstrap#projectionDefinition"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine" , ":-" , "/bootstrap#member"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , [":-" , ["/bootstrap#member" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["/bootstrap#semanticDefinition"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine" , ":-" , "/cedalionWeb/xml#generates2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , [":-" , ["/cedalionWeb/xml#generates2" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#semanticDefinition"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#canDefine" , ":-" , "cjs#procedureCommand"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#canDefine" , [":-" , ["cjs#procedureCommand" , vars [0]  , vars [1]     ] , vars [2]     ] , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#semanticDefinition"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isDeprecated" , "::" , "/bootstrap#doc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#isDeprecated" , ["::" , ["/bootstrap#doc" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isDeprecated" , "::" , "cpi#redo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#isDeprecated" , ["::" , ["cpi#redo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isDeprecated" , "::" , "/bootstrap#docSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#isDeprecated" , ["::" , ["/bootstrap#docSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isDeprecated" , "::" , "cpi#undo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#isDeprecated" , ["::" , ["cpi#undo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isDeprecated" , "::" , "/cedalionWeb/ui#displayWhile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#isDeprecated" , ["::" , ["/cedalionWeb/ui#displayWhile" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#isDeprecated" , "::" , "/javascript/statepred#unitTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#isDeprecated" , ["::" , ["/javascript/statepred#unitTest" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ]   ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#errorSolution" , "/bootstrap#conceptIsDeprecated" , "::" , "/bootstrap#doc"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#errorSolution" , ["/bootstrap#conceptIsDeprecated" , ["::" , ["/bootstrap#doc" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]     ] , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#comment" , vars [1]  , vars [0]     ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#errorSolution" , "/bootstrap#conceptIsDeprecated" , "::" , "cpi#redo"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#errorSolution" , ["/bootstrap#conceptIsDeprecated" , ["::" , ["cpi#redo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]     ] , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["/bootstrap#redo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [2]      ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#errorSolution" , "/bootstrap#conceptIsDeprecated" , "::" , "/bootstrap#docSignature"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#errorSolution" , ["/bootstrap#conceptIsDeprecated" , ["::" , ["/bootstrap#docSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]     ] , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["/bootstrap#doc" , vars [2]  , ["/bootstrap#signature" , vars [0]  , vars [1]     ]    ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#errorSolution" , "/bootstrap#conceptIsDeprecated" , "::" , "cpi#undo"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#errorSolution" , ["/bootstrap#conceptIsDeprecated" , ["::" , ["cpi#undo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]     ] , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["/bootstrap#undo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [2]      ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#errorSolution" , "/bootstrap#conceptIsDeprecated" , "::" , ":-" , "cpi#procedureCommand"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#errorSolution" , ["/bootstrap#conceptIsDeprecated" , ["::" , [":-" , ["cpi#procedureCommand" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#statement"  ]    ] , vars [3]     ] , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["/bootstrap#procedure" , vars [0]  , ["/bootstrap#doProc" , ["/bootstrap#where" , vars [1]  , vars [2]     ]   ]    ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#errorSolution" , "/bootstrap#conceptIsDeprecated" , "::" , "/javascript/statepred#unitTest" , "/javascript/jsLogic#jsCommand" , "[]"       ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#errorSolution" , ["/bootstrap#conceptIsDeprecated" , ["::" , ["/javascript/statepred#unitTest" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : []    }  )  , vars [0]     ] , ["/bootstrap#statement"  ]    ] , vars [1]     ] , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["/javascript/statepred#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#markerVisualization" , "/bootstrap#definitionMarker"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#markerVisualization" , ["/bootstrap#definitionMarker" , vars [0]    ] , vars [1]  , ["/bootstrap#tooltip" , ["/bootstrap#horiz" , ["." , ["/bootstrap#image" , ["/bootstrap#Search.png"  ]   ] , ["." , vars [1]  , ["[]"  ]    ]    ]   ] , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , ["[]"  ]    ] , ["/bootstrap#definitionType"  ]    ]   ]    ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#markerVisualization" , "/bootstrap#topLevel"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#markerVisualization" , ["/bootstrap#topLevel"  ] , vars [0]  , ["/bootstrap#color" , vars [0]  , ["cpi#rgb" , 0 , 0 , 128     ]    ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#markerVisualization" , "/bootstrap#notTopLevel"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#markerVisualization" , ["/bootstrap#notTopLevel"  ] , vars [0]  , ["/bootstrap#color" , vars [0]  , ["cpi#rgb" , 0 , 0 , 0     ]    ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#markerVisualization" , "/bootstrap#imageMarker"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#markerVisualization" , ["/bootstrap#imageMarker" , vars [0]    ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#image" , vars [0]    ] , ["." , ["/bootstrap#halfSize" , vars [1]    ] , ["[]"  ]    ]    ]   ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#markerVisualization" , "/bootstrap#tip"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#markerVisualization" , ["/bootstrap#tip" , vars [0]    ] , vars [1]  , ["/bootstrap#action" , ["/bootstrap#tooltip" , ["/bootstrap#horiz" , ["." , ["/bootstrap#image" , ["/bootstrap#Magic wand.png"  ]   ] , ["." , vars [1]  , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , ["[]"  ]    ] , ["/bootstrap#procedure"  ]    ]   ]    ] , vars [0]     ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#markerVisualization" , "/bootstrap#typeOf" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#markerVisualization" , ["/bootstrap#typeOf" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , ["/bootstrap#tooltip" , vars [3]  , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [1]  , vars [2]     ] , ["/bootstrap#type"  ]    ]   ]    ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#markerVisualization" , "/bootstrap#varType"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#markerVisualization" , ["/bootstrap#varType" , vars [0]    ] , vars [1]  , ["/bootstrap#bold" , vars [1]    ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#markerVisualization" , "/bootstrap#error"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#markerVisualization" , ["/bootstrap#error" , vars [0]  , vars [1]     ] , vars [2]  , ["/bootstrap#tooltip" , ["/bootstrap#horiz" , ["." , ["/bootstrap#action" , ["/bootstrap#image" , ["/bootstrap#Error.png"  ]   ] , ["/bootstrap#fixError" , vars [0]  , vars [1]     ] , ["/bootstrap#autoFix" , vars [0]  , vars [1]  , vars [3]      ]     ] , ["." , ["/bootstrap#lineBorder" , vars [2]  , 1 , ["cpi#rgb" , 255 , 0 , 0     ]     ] , ["[]"  ]    ]    ]   ] , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ]   ]    ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/Test#sayHelloTo" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/Test#sayHelloTo" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#showView" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Hello,"   ] , ["." , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [2]     ] , vars [1]     ]   ] , ["[]"  ]    ]    ]   ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/Test#showAllSignaturesForNamespace"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/Test#showAllSignaturesForNamespace" , vars [0]    ] , ["/bootstrap#doProc" , ["/Test#doShowAllSignaturesForNamespace" , vars [0]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/Test#showNumbered" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/Test#showNumbered" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , ["/bootstrap#showView" , ["cpi#vis" , ["::" , ["cpi#descriptor" , vars [2]  , vars [0]  , ["[]"  ]     ] , vars [1]     ] , ["/Test#numbered" , 9332   ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#generateFileForSet"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#generateFileForSet" , vars [0]  , vars [1]     ] , ["/bootstrap#generateFile" , vars [0]  , vars [2]  , ["/bootstrap#member" , vars [2]  , vars [1]  , ["/bootstrap#string"  ]     ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#noop"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#noop"  ] , ["/bootstrap#doAll" , ["[]"  ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "cpi#redo"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["cpi#redo" , vars [0]    ] , ["/bootstrap#doProc" , ["/bootstrap#redo" , vars [0]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#cut" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#cut" , ["." , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , vars [4]       ] , ["/bootstrap#doAll" , ["." , ["/bootstrap#dbInsert" , ["/bootstrap#clipboard" , ["::" , vars [0]  , vars [2]     ] , vars [3]     ]   ] , ["." , ["/bootstrap#doProc" , ["cpi#edit" , vars [4]  , ["::" , vars [1]  , ["/bootstrap#list" , vars [2]    ]    ] , vars [3]      ]   ] , ["[]"  ]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#paste"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#paste" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#doProc" , ["/bootstrap#where" , ["/bootstrap#doAll" , ["." , ["/bootstrap#doProc" , ["cpi#edit" , vars [3]  , ["::" , vars [4]  , ["/bootstrap#list" , vars [1]    ]    ] , vars [5]      ]   ] , ["." , ["/bootstrap#doAll" , vars [6]    ] , ["[]"  ]    ]    ]   ] , ["," , ["builtin#findall" , ["/bootstrap#dbRemove" , ["/bootstrap#clipboard" , ["::" , vars [7]  , vars [1]     ] , vars [8]     ]   ] , ["/bootstrap#command"  ] , ["/bootstrap#inClipboard" , ["::" , vars [7]  , vars [1]     ] , vars [8]     ] , vars [6]       ] , ["," , ["builtin#findall" , ["/bootstrap#pair" , vars [9]  , vars [10]     ] , ["/bootstrap#pairType" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["/bootstrap#inClipboard" , ["::" , vars [9]  , vars [1]     ] , vars [10]     ] , vars [11]       ] , ["," , ["=" , ["::" , vars [11]  , ["/bootstrap#list" , ["/bootstrap#pairType" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ]    ] , ["::" , ["." , vars [12]  , vars [13]     ] , ["/bootstrap#list" , vars [14]    ]    ]    ] , ["/bootstrap#calculatePasteItems" , vars [11]  , vars [1]  , vars [0]  , vars [2]  , vars [4]  , vars [5]         ]    ]    ]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showDefinitions"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showDefinitions" , vars [0]    ] , ["/bootstrap#doProc" , ["/bootstrap#where" , ["/bootstrap#doAll" , ["." , ["/bootstrap#dbRemove" , ["/bootstrap#searchForDef" , vars [1]    ]   ] , ["." , ["/bootstrap#dbInsert" , ["/bootstrap#searchForDef" , vars [2]    ]   ] , ["." , ["/bootstrap#showView" , vars [3]    ] , ["[]"  ]    ]    ]    ]   ] , ["," , ["\\+" , ["builtin#var" , vars [0]    ]   ] , ["," , ["/bootstrap#safeParseTerm" , vars [0]  , vars [4]  , vars [5]      ] , ["," , ["/bootstrap#blankList" , vars [5]  , vars [6]     ] , ["," , ["builtin#parseTerm" , vars [2]  , vars [4]  , vars [6]      ] , ["/bootstrap#definitionsVisualization" , vars [2]  , ["[]"  ] , vars [3]      ]    ]    ]    ]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#doShowDefinitions"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#doShowDefinitions" , vars [0]    ] , ["/bootstrap#doProc" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["/bootstrap#showDefinitions" , vars [0]    ]   ] , ["\\+" , ["builtin#var" , vars [0]    ]   ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#exportCedalionProgram"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#exportCedalionProgram"  ] , ["/bootstrap#writeFile" , "export.car" , ["builtin#fileContent" , ["builtin#statement" , vars [0]  , vars [1]     ] , ["builtin#loadedStatement" , vars [2]  , vars [0]  , vars [1]      ] , ["[]"  ]     ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "cpi#openFile"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["cpi#openFile" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#doAll" , ["." , ["/bootstrap#readFile" , vars [0]  , vars [2]  , vars [3]      ] , ["." , ["/bootstrap#assignFinal" , vars [4]  , ["/bootstrap#fileToModel" , vars [3]    ] , ["/bootstrap#model"  ]     ] , ["." , ["/bootstrap#dbInsert" , ["/bootstrap#loadedFile" , vars [1]  , vars [0]  , vars [4]      ]   ] , ["." , ["/bootstrap#dbInsert" , ["/bootstrap#editState" , vars [1]  , ["[]"  ] , ["[]"  ] , 0      ]   ] , ["[]"  ]    ]    ]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "cpi#closeFile"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["cpi#closeFile" , vars [0]    ] , ["/bootstrap#doAll" , ["." , ["/bootstrap#dbRemove" , ["/bootstrap#loadedFile" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["." , ["/bootstrap#dbRemove" , ["/bootstrap#editState" , vars [0]  , vars [3]  , vars [4]  , vars [5]       ]   ] , ["[]"  ]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#foreach"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#foreach" , vars [0]  , vars [1]     ] , ["/bootstrap#doProc" , ["/bootstrap#where" , ["/bootstrap#doAll" , vars [2]    ] , ["builtin#findall" , vars [1]  , ["/bootstrap#command"  ] , vars [0]  , vars [2]       ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showTree" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showTree" , ["::" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#showView" , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8729   ] , ["." , ["/bootstrap#expand" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , ["[]"  ]    ] , vars [1]     ]   ] , ["/bootstrap#vert" , ["." , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , ["[]"  ]    ] , vars [1]     ]   ] , ["." , ["/bootstrap#dynamicList" , vars [2]  , ["/bootstrap#treeElementVis" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ]    ] , ["[]"  ]    ]    ]   ]    ] , ["[]"  ]    ]    ]   ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showInView" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showInView" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#showView" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [0]  , vars [2]     ] , vars [1]     ]   ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#fixError"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#fixError" , vars [0]  , vars [1]     ] , ["/bootstrap#doProc" , ["/bootstrap#if" , ["/bootstrap#autoFix" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#doProc" , vars [2]    ] , ["/bootstrap#doProc" , ["/bootstrap#showSolutions" , vars [0]  , vars [1]     ]   ]     ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showSolutions"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showSolutions" , vars [0]  , vars [1]     ] , ["/bootstrap#doProc" , ["/bootstrap#where" , ["/bootstrap#showView" , ["/bootstrap#vert" , vars [2]    ]   ] , ["," , ["builtin#findall" , vars [3]  , ["/bootstrap#procedure"  ] , ["/bootstrap#errorSolution" , vars [0]  , vars [1]  , vars [3]      ] , vars [4]       ] , ["/bootstrap#visualizeSolutions" , vars [4]  , vars [1]  , vars [2]      ]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/debugging#createSubTests"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/debugging#createSubTests" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#doProc" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [3]  , ["::" , ["." , ["/bootstrap#unitTest" , vars [0]    ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [5]      ]   ] , ["," , ["builtin#findall" , ["/bootstrap#unitTest" , vars [6]    ] , ["/bootstrap#statement"  ] , ["/javascript/jsLogic#statement" , [":-" , vars [0]  , vars [6]     ] , 100    ] , vars [7]       ] , ["," , ["/bootstrap#append" , vars [7]  , vars [1]  , vars [4]  , ["/bootstrap#statement"  ]      ] , ["/debugging#completeVarNames" , ["::" , ["." , ["/bootstrap#unitTest" , vars [0]    ] , vars [4]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [2]  , vars [5]      ]    ]    ]    ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/javascript/jsLogic#writeClauses"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/javascript/jsLogic#writeClauses" , vars [0]    ] , ["/bootstrap#writeFile" , "rawClauses.txt" , ["builtin#fileContent" , ["builtin#statement" , vars [1]  , ["[]"  ]    ] , ["/bootstrap#member" , vars [1]  , vars [0]  , ["/bootstrap#statement"  ]     ] , ["[]"  ]     ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "cpi#func" , "+"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["cpi#func" , ["+" , vars [0]  , vars [1]     ] , vars [2]  , ["/bootstrap#number"  ]     ] , ["/bootstrap#plus" , vars [0]  , vars [1]  , vars [2]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "cpi#func" , "-"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["cpi#func" , ["-" , vars [0]  , vars [1]     ] , vars [2]  , ["/bootstrap#number"  ]     ] , ["/bootstrap#minus" , vars [0]  , vars [1]  , vars [2]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#generateFile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#generateFile" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.GenerateFile"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#plus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#plus" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.Plus"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#minus" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.Minus"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#doAll"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#doAll" , vars [0]    ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.DoAll"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#assign"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#assign" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.Assign"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#doProc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#doProc" , vars [0]    ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.DoProc"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#readFile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#readFile" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.ReadFile"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#writeFile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#writeFile" , vars [0]  , vars [1]     ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.WriteFile"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#assignFinal"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#assignFinal" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.AssignFinal"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#dbInsert"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#dbInsert" , vars [0]    ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.DBInsert"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#dbRemove"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#dbRemove" , vars [0]    ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.DBRemove"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#termToString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#termToString" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.TermToString"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#stringToTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#stringToTerm" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.StringToTerm"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#notify"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#notify" , vars [0]    ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.Notify"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#showView"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#showView" , vars [0]    ] , ["/bootstrap#command"  ]    ] , "net.nansore.cedalion.cmd.ShowView"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#numPlus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#numPlus"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "+"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#applyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#applyBinOpList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#applyBinOpList" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#applyBinOpListScalar"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#applyBinOpListScalar" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#applyBinOpSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#applyBinOpSet" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#set" , vars [3]    ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#set" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#set" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]    ] , ["cpi#middle"  ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#reduce"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#reduce" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#binOp" , vars [2]    ]    ]   ]   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#list" , vars [2]    ]   ]    ]   ] , 40 , 41     ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#minus"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "-"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#times"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#times"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "*"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#divBy"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#divBy"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "/"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#valueApplyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#valueApplyBinOp" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [5]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [4]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [4]     ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [4]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , vars [4]     ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/Functional#expr" , vars [4]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#switch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#switch" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "case"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#label" , "of"   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#cases" , vars [1]  , vars [3]     ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#case"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#case" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#cases" , vars [3]  , vars [4]     ]    ] , ["cpi#default"  ] , vars [5]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [3]     ]   ] , ["." , ["/bootstrap#symbol" , 8658   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [4]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#cases" , vars [3]  , vars [4]     ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#otherwise"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#otherwise" , vars [0]    ] , ["/Functional#cases" , vars [1]  , vars [2]     ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "otherwise:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#if"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "if"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , ":"   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "else:"   ] , ["[]"  ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#eq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#eq" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "builtin#greaterThen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["builtin#greaterThen" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , ">"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#gt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#gt" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , ">"   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#ge"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#ge" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8805   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#const"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#const" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#raised" , ["/bootstrap#lineBorder" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["cpi#rgb" , 255 , 200 , 128     ]    ] , 5 , ["cpi#rgb" , 255 , 200 , 128     ]     ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#eset"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#eset" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#brackets" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#color" , ["/bootstrap#box" , 1   ] , ["cpi#rgb" , 0 , 0 , 255     ]    ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]    ] , ["cpi#middle"  ]    ] , 123 , 125     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#eval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , vars [1]     ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["." , ["/bootstrap#symbol" , 8656   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#minus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "-"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#mult"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#mult" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "*"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#div"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#div" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#pivot" , ["/bootstrap#box" , 1   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#idiv"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#idiv" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "//"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#modulus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#modulus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "mod"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#def"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#def" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#label" , " "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#symbol" , 8797   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#parentheses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#parentheses" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ]   ] , 40 , 41     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#func"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#func" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8594   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#lambda"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#lambda" , vars [0]  , vars [1]     ] , ["/Functional#func" , vars [2]  , vars [3]     ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 955   ] , ["." , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ] , ["." , ["/bootstrap#label" , "."   ] , ["." , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [3]    ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#apply"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#apply" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "["   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#func" , vars [1]  , vars [3]     ]   ]    ]   ] , ["." , ["/bootstrap#label" , "]"   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ]   ] , ["." , ["/bootstrap#label" , "("   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["." , ["/bootstrap#label" , ")"   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#pairType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#pairType" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 10799   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#pair"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#pair" , vars [0]  , vars [1]     ] , ["/Functional#pairType" , vars [2]  , vars [3]     ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["/bootstrap#label" , ","   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , vars [3]     ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#plus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#plus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "+"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#element"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#element" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#seq" , vars [2]    ]   ]    ]   ] , ["." , ["/bootstrap#label" , "["   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "]"   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#constSeq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#constSeq" , vars [0]    ] , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "seq"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#concat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#concat" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "+"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#concat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#concat"  ] , ["/Functional#binOp" , ["/bootstrap#string"  ]   ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "+"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#sum"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#sum" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#pivot" , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , 8721 , 0     ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#where" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "where"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#wrap"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#wrap" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#raised" , ["/bootstrap#lineBorder" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["cpi#rgb" , 192 , 192 , 255     ]    ] , 2 , ["cpi#rgb" , 192 , 192 , 255     ]     ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#unwrap"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#unwrap" , vars [0]    ] , vars [1]     ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#lineBorder" , ["/bootstrap#lowered" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ]   ] , 2 , ["cpi#rgb" , 192 , 192 , 255     ]     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#range"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#range" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]   ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#brackets" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , ","   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , 91 , 41     ] , ["[]"  ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#f"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#f" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "f"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#s"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#s"  ] , ["/Test/bnf#pattern"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "S"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#empty"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#empty"  ] , ["/Test/bnf#pattern"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#symbol" , 949   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#token"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#token" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "t"   ]   ] , ["." , ["/bootstrap#italic" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test/bnf#token"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#concat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#concat" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ]   ] , ["." , ["/bootstrap#label" , " "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#prod"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#prod" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ]   ] , ["." , ["/bootstrap#label" , "::="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#parse"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#parse" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/Test/bnf#token"  ]   ]    ]   ] , ["." , ["/bootstrap#vert" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ]   ]   ] , ["." , ["/bootstrap#pivot" , ["/bootstrap#symbol" , 8658   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , ["/Test/bnf#token"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#repeat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#repeat" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ]   ] , ["." , ["/bootstrap#smaller" , ["/bootstrap#label" , "*"   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#symbol"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#symbol" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "\""   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "\""   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#trainQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#trainQuery" , vars [0]  , vars [1]     ] , ["/Test/bnf#trainQuery"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Find train"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test/bnf#routeQueryType"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test/bnf#timeQueryType"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#fromTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#fromTo" , vars [0]  , vars [1]     ] , ["/Test/bnf#routeQueryType"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "from"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#onDate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#onDate" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test/bnf#timeQueryType"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "on"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , "/"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , "/"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#word"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#word" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "\""   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "\""   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#location"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#location" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "loc"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#evaluatesTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#evaluatesTo" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8594   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#boolean"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#final"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#final" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , ["." , ["/bootstrap#label" , "is final"   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#finallyEvaluatesTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#finallyEvaluatesTo" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8594   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "*"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#boolean"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#true"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#true"  ] , ["/Test#boolean"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#symbol" , 8868   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#false"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#false"  ] , ["/Test#boolean"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#symbol" , 8869   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#and"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#and" , vars [0]  , vars [1]     ] , ["/Test#boolean"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8896   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#boolean"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#or" , vars [0]  , vars [1]     ] , ["/Test#boolean"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8897   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#boolean"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#not"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#not" , vars [0]    ] , ["/Test#boolean"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 172   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#parens"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#parens" , vars [0]    ] , ["/Test#boolean"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , 40 , 41     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#goal"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#goal" , vars [0]    ] , ["/Test#boolean"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , 123 , 125     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#trans"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#trans" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , ["." , ["/bootstrap#vert" , ["." , ["/bootstrap#symbol" , 8594   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#action"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Test#process"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#prefix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#prefix" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#action"  ]    ]   ] , ["." , ["/bootstrap#label" , "."   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#alt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#alt" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , ["." , ["/bootstrap#label" , "+"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#process"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#procDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#procDef" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8656   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#process"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#parentheses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#parentheses" , vars [0]    ] , ["/Test#process"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , 40 , 41     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#reaches"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#reaches" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Path"   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/Test#action"  ]   ]    ] , ["/bootstrap#horiz"  ]    ] , ["." , ["/bootstrap#label" , "from"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , ["." , ["/bootstrap#label" , "exists"   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#cond"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#cond" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , 91 , 93     ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#costs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#costs" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#action"  ]    ]   ] , ["." , ["/bootstrap#label" , "costs"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#worths"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#worths" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#action"  ]    ]   ] , ["." , ["/bootstrap#label" , "worths"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#sayHelloTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#sayHelloTo" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Say hello to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "with varnames"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#statements"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#statements" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/Test#numbered" , 9332   ]    ] , ["." , ["/bootstrap#label" , "   "   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#e"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#e" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8608   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#p"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#p" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "there is a path from"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#time"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#time" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test#eventTime"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#conferenceDay"  ]    ]   ] , ["." , ["/bootstrap#label" , ","   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Test#ampm"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#pavilion"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#pavilion" , vars [0]    ] , ["/Test#location"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Pavilion"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#direction"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#galleria"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#galleria" , vars [0]    ] , ["/Test#location"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Galleria"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#visitUsAt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#visitUsAt" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Visit us at:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#subState"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#subState" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#state"  ]    ]   ] , ["." , ["/bootstrap#label" , "is a substate of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#state"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#contains"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#contains" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "state"   ] , ["." , ["/bootstrap#bold" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#state"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/Test#state"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#initialState"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#initialState" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "The initial state is"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#state"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#transition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#transition" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "While"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#state"  ]    ]   ] , ["." , ["/bootstrap#label" , ", on"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#event"  ]    ]   ] , ["." , ["/bootstrap#label" , "change state to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Test#state"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#hello"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#hello" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Hello, "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#adapter"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#adapter" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "use"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "as adapter for"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#alias"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#alias" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "use"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "as alias for"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#bottom"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#bottom"  ] , ["/bootstrap#alignment"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#symbol" , 10515   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#top"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#top"  ] , ["/bootstrap#alignment"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#symbol" , 10514   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#middle"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#middle"  ] , ["/bootstrap#alignment"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#symbol" , 8597   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "annotation#parentheses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["annotation#parentheses" , vars [0]    ] , vars [1]     ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , 40 , 41     ] , ["[]"  ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "annotation#comment"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["annotation#comment" , vars [0]  , vars [1]     ] , vars [2]     ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#background" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "//"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["cpi#rgb" , 255 , 255 , 128     ]    ] , ["." , ["/bootstrap#pivot" , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "annotation#minComment"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["annotation#minComment" , vars [0]  , vars [1]     ] , vars [2]     ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#tooltip" , ["/bootstrap#horiz" , ["." , ["/bootstrap#smaller" , ["/bootstrap#color" , ["/bootstrap#symbol" , 9873   ] , ["cpi#rgb" , 200 , 200 , 0     ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "annotation#changeMode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["annotation#changeMode" , vars [0]  , vars [1]     ] , vars [2]     ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#color" , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ]   ]   ] , ["cpi#rgb" , 192 , 192 , 192     ]    ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#defAtom"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#defAtom" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "declare"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#default"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#default" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Use"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "by default"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#horiz"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#horiz" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "h"   ]   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["/bootstrap#horizontal" , ["/bootstrap#label" , " "   ] , ["/bootstrap#label" , "[]"   ]    ]    ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#horiz"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#horiz" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "h"   ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#alignment"  ]    ]   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["/bootstrap#horizontal" , 32 , 32 , ["/bootstrap#label" , " "   ] , ["/bootstrap#label" , "[]"   ]      ]    ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#projection"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "display"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "~>"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["~>" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["." , ["/bootstrap#image" , ["/bootstrap#wavy-arrow.png"  ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#typedTerm"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , ","    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["," , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , ","   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , ":-"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , [":-" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , ":-"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#signature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "declare"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "where"   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["/bootstrap#horizontal" , ["/bootstrap#label" , ","   ] , ["/bootstrap#label" , "()"   ]    ]    ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#or" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8744   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#generateFileForSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#generateFileForSet" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Generate file"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "with string set"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#requires"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#requires" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8826   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#missing"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#missing" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Missing statement:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#contextMenuEntry"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#contextMenuEntry" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [6]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Context menu entry"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "with icon"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [5]  , ["/bootstrap#image"  ]    ]   ] , ["." , ["/bootstrap#label" , "for"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "with varnames"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "at path"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["cpi#path"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "do"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [4]  , ["/bootstrap#procedure"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#contextMenuEntry"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#contextMenuEntry" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [5]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Context menu entry"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "for"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "with varnames"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "at path"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["cpi#path"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "do"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [4]  , ["/bootstrap#procedure"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#pair"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#pair" , vars [0]  , vars [1]     ] , ["/bootstrap#pairType" , vars [2]  , vars [3]     ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#brackets" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["/bootstrap#label" , ","   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , vars [3]     ]   ] , ["[]"  ]    ]    ]    ]   ] , 60 , 62     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#semanticDefinition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#semanticDefinition"  ] , ["/bootstrap#definitionType"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "Semantic Definition"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#defines"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#defines" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["." , ["/bootstrap#label" , "defines"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#definitionType"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#typeSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#typeSignature"  ] , ["/bootstrap#definitionType"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "Type Signature"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#projectionDefinition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#projectionDefinition"  ] , ["/bootstrap#definitionType"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "Projection Definition"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#missingDefinition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#missingDefinition" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Missing definition:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "At path"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["cpi#path"  ]    ]   ] , ["." , ["/bootstrap#label" , "with varnames"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#requiredSemanticDefinition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#requiredSemanticDefinition"  ] , ["/bootstrap#definitionType"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "Required Semantic Definition"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#deprecated"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#deprecated" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "is deprecated"   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#conceptIsDeprecated"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#conceptIsDeprecated" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "is Deprecated"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "at path:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["cpi#path"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#deprecationReplacement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#deprecationReplacement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Deprecated"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#label" , "is replaced by"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , vars [1]     ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#disabled"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#disabled" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#color" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "//"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["cpi#rgb" , 128 , 128 , 128     ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#docSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#docSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "//"   ] , ["." , ["/bootstrap#background" , ["/bootstrap#italic" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ]   ]   ] , ["cpi#rgb" , 255 , 255 , 180     ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8618   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["/bootstrap#horiz"  ]    ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#doc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#doc" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#color" , ["/bootstrap#background" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "//"   ] , ["." , ["/bootstrap#italic" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["cpi#rgb" , 255 , 255 , 180     ]    ] , ["cpi#rgb" , 0 , 0 , 0     ]    ] , ["." , ["/bootstrap#pivot" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#path"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#path" , vars [0]  , vars [1]     ] , ["cpi#path"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "/"   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["/bootstrap#horiz"  ]    ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "builtin#succ"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["builtin#succ" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , "+1"   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , ">"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , [">" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , ">"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "builtin#if"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["builtin#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "if"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , ":"   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#label" , "else:"   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "="    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["=" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#edit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#edit" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Edit:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "At path:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["cpi#path"  ]    ]   ] , ["." , ["/bootstrap#label" , "with varnames:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "+"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["+" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "+"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "-"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["-" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "+"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#constExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#constExpr" , vars [0]    ] , ["/bootstrap#expr" , vars [1]    ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "const"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "builtin#equals"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["builtin#equals" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "=="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "builtin#import"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["builtin#import" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "import"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#forall"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#forall" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8704   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8658   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#listMember"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#listMember" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["." , ["/bootstrap#symbol" , 8714   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#procedureCommand"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#procedureCommand" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , "procedure"   ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "pred"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#command"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#procedure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#procedure" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , "procedure"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#command"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#function"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#function" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , "function"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#ref" , vars [1]    ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#expr" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#command"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#func"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#func" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , "func"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#ref" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#doAll"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#doAll" , vars [0]    ] , ["/bootstrap#command"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "do"   ]   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#command"  ]   ]    ] , ["/bootstrap#vertical" , ["/bootstrap#symbol" , 8594   ] , ["/bootstrap#label" , "()"   ] , ["/bootstrap#horiz" , ["[]"  ]   ]     ]    ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#assign"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#assign" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#ref" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , ":="   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#doProc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#doProc" , vars [0]    ] , ["/bootstrap#command"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "p"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#if"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "if"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#command"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#label" , "else"   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#command"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#where" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#command"  ]    ]   ] , ["." , ["/bootstrap#label" , "where"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#foreach"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#foreach" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "for each"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , "do"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#command"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "builtin#findall"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["builtin#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Find all"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["." , ["/bootstrap#label" , "of type"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#label" , "such that"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , "into"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#list" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#projection"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "@"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8608   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#sandbox"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#sandbox" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#lineBorder" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["cpi#rgb" , 255 , 255 , 128     ]    ] , 5 , ["cpi#rgb" , 192 , 192 , 192     ]     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#set"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#set" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#brackets" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["/bootstrap#box" , 1   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]    ] , ["cpi#middle"  ]    ] , 123 , 125     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#member"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#member" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8712   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#setDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#setDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8797   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#union"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#union" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#symbol" , 8746   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#intersect"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#intersect" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#symbol" , 8745   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#singleton"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#singleton" , vars [0]    ] , ["/bootstrap#set" , vars [1]    ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , 123 , 125     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#listSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#listSet" , vars [0]    ] , ["/bootstrap#set" , vars [1]    ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#brackets" , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["/bootstrap#horizontal" , 0 , 0 , ["/bootstrap#label" , ","   ] , ["/bootstrap#label" , " "   ]      ]    ] , 123 , 125     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#setParens"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#setParens" , vars [0]    ] , ["/bootstrap#set" , vars [1]    ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#set" , vars [1]    ]    ]   ] , 40 , 41     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#diffSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#diffSet" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "\\"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#notMember"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#notMember" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["/bootstrap#symbol" , 8713   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#shortcutKey"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#shortcutKey" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "is shortcut for"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "annotation#shrink"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["annotation#shrink" , vars [0]    ] , vars [1]     ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["cpi#vis" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#shrink"  ]    ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#symbol" , 8628   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#signaturePlaceMismatch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#signaturePlaceMismatch" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "In a type signature, head and body arguments must appear in the same order:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "and"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#signatureSizeMismatch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#signatureSizeMismatch"  ] , ["/bootstrap#error"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "The size of the signature head does not match the size of the body"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#nonVarInSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#nonVarInSignature" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "In a type signature, all head arguments must be variables:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#signatureVarInBodyAndNotInHead"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Variable"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "appears in the head but not in the body of a type signature"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#sigProjAtom"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#sigProjAtom" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "declare"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "display as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#symbolRange"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#symbolRange" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Symbols"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "Range from"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#tip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#tip" , vars [0]    ] , ["/bootstrap#marker"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Tip:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#tip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#tip" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Tip"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#procedure"  ]    ]   ] , ["." , ["/bootstrap#label" , "for"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "at path"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["cpi#path"  ]    ]   ] , ["." , ["/bootstrap#label" , "with varnames"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#true"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#true" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , "!"   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#typesNotFullyInstantiated"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#typesNotFullyInstantiated" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Types are not fully instantiated in statement at path:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["cpi#path"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#typeMimatch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#typeMimatch" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Type mismatch.  Expected:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#label" , "inferred:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["cpi#path"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#missingSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#missingSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Missing signature:"   ] , ["." , ["/bootstrap#label" , "declare"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "where"   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["/bootstrap#horizontal" , 32 , 32 , ["/bootstrap#label" , ","   ] , ["/bootstrap#label" , "()"   ]      ]    ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#unitTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , "Unit Test:"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "\\+"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["\\+" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 172   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#failedTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#failedTest" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Test"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , "has failed"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "builtin#catch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["builtin#catch" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#label" , "try:"   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "catch"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#exception"  ]    ]   ] , ["." , ["/bootstrap#label" , ":"   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#insertStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#insertStatement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Insert:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#vis" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 12298   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "@"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 12299   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#vis" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , 12298 , 12299     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#vert"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#vert" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "v"   ]   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["/bootstrap#vert"  ]    ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#label"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#label" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "\""   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "\""   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#italic"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#italic" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "i"   ]   ] , ["." , ["/bootstrap#italic" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#bold"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#bold" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "b"   ]   ] , ["." , ["/bootstrap#bold" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#tooltip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#tooltip" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#lowered" , ["/bootstrap#background" , ["/bootstrap#lineBorder" , ["/bootstrap#horiz" , ["." , ["/bootstrap#raised" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]   ] , 3 , ["cpi#rgb" , 255 , 255 , 200     ]     ] , ["cpi#rgb" , 255 , 255 , 200     ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#halfSize"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#halfSize" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "1/2"   ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#smaller"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#smaller" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "<"   ]   ] , ["." , ["/bootstrap#smaller" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#action"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#action" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#tooltip" , ["/bootstrap#raised" , ["/bootstrap#raised" , ["/bootstrap#background" , ["/bootstrap#vert" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Do"   ] , ["." , ["/bootstrap#lowered" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#procedure"  ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["cpi#rgb" , 192 , 192 , 192     ]    ]   ]   ] , ["/bootstrap#label" , "action"   ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#action"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#action" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#tooltip" , ["/bootstrap#raised" , ["/bootstrap#raised" , ["/bootstrap#background" , ["/bootstrap#vert" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Do"   ] , ["." , ["/bootstrap#lowered" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#procedure"  ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Automatic if"   ] , ["." , ["/bootstrap#lowered" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["cpi#rgb" , 192 , 192 , 192     ]    ]   ]   ] , ["/bootstrap#label" , "action"   ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#rgb"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#rgb" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#color"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#halfSize" , ["/bootstrap#vert" , ["." , ["/bootstrap#color" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["cpi#rgb" , 128 , 0 , 0     ]    ] , ["." , ["/bootstrap#color" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["cpi#rgb" , 0 , 128 , 0     ]    ] , ["." , ["/bootstrap#color" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#number"  ]    ]   ] , ["cpi#rgb" , 0 , 0 , 128     ]    ] , ["[]"  ]    ]    ]    ]   ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#expand"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#expand" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#expand" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ]   ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#dynamicList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#dynamicList" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#brackets" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , ["." , ["/bootstrap#box" , 1   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , 123 , 125     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#pivot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#pivot" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 9758   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#varNameMacroStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#varNameMacroStatement" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Variable"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "displays as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#varNameSuffix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#varNameSuffix" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Variable suffix"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "modifies"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ]   ] , ["." , ["/bootstrap#label" , "into"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/couchdb#insertDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "insert document"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "with content"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "to database"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "on"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/couchdb#updateDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "update document"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "with content"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "in database"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "on"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/couchdb#updateDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [5]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "update document"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "revision"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "with content"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [4]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "in database"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "on"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cjs#verifyDatabaseRev"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cjs#verifyDatabaseRev" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "verify database"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/couchdb#database"  ]    ]   ] , ["." , ["/bootstrap#label" , "rev"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "with program"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/crud#crudEditor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/crud#crudEditor" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [6]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "CRUD editor for set"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateSet" , ["/Functional#pairType" , vars [2]  , vars [1]     ]   ]    ]   ] , ["." , ["/bootstrap#label" , "of element type"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#label" , "and handle type"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    Insert Button:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    Update Button:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [4]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    Remove Button:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [5]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#ajaxQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#ajaxQuery" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["." , ["/bootstrap#label" , "on server"   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#onServer"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#onServer" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ]   ] , ["." , ["/bootstrap#label" , "on server"   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#animate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "animate"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["." , ["/bootstrap#label" , "of ID"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "with action"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/cedalionWeb/jquery#animateAction"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#runAfterGen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#runAfterGen" , vars [0]    ] , ["/cedalionWeb/xml#annotation"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "run"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["." , ["/bootstrap#label" , "after generation"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#animate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "animate"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["." , ["/bootstrap#label" , "as element"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["." , ["/bootstrap#label" , "with id"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "with action"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#changeContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#changeContent" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "set the content of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#applyAnnot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#applyAnnot" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "apply"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/xml#annotation"  ]    ]   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#modifyElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#modifyElement" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "modify the content of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["." , ["/bootstrap#label" , "using method"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#replaceWith"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#replaceWith" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "replace"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["." , ["/bootstrap#label" , "with"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#prependTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#prependTo" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "prepend"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#appendTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#appendTo" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "append"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["." , ["/bootstrap#label" , "to the end of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#onDelayed"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#onDelayed" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [5]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "on"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "for element"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["." , ["/bootstrap#label" , "delayed"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , "ms"   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [4]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#on"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "on event"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "for element"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["." , ["/bootstrap#label" , "do"   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#on"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "on event"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "for element"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["." , ["/bootstrap#label" , "do"   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb#addKeyComponents"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb#addKeyComponents" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "add key components of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#http"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#http" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]          ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [7]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "emits status"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [4]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , "headers"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [5]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "and content"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [6]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#get"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#get" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "GET"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#json"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#json" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "JSON"   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , 91 , 93     ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#dot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#dot" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "."   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#jsonStringify"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#jsonStringify" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "JSON"   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , 91 , 93     ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#arrayElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#arrayElement" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "is an element in"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#urlQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#urlQuery" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "?"   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/node#queryArg"  ]   ]    ] , ["/bootstrap#horizontal" , 32 , 32 , ["/bootstrap#label" , "&"   ] , ["/bootstrap#label" , ""   ]      ]    ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#arg"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ] , ["/cedalionWeb/node#queryArg"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb#implies"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb#implies" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ]   ] , ["." , ["/bootstrap#label" , "implies"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb#dataStatement"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb#rewrite"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb#rewrite" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 10547   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb#dataStatement"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/ui#displayWhile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/ui#displayWhile" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "display image"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "while loading:"   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/ui#ajaxFor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/ui#ajaxFor" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "for"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    while displaying"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/ui#ul"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/ui#ul" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "ul"   ]   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["/bootstrap#vert"  ]    ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/visualization#editActionIcon"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/visualization#editActionIcon" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "action icon"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "edits"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "into"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/visualization#suggestion"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/visualization#suggestion" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "suggest"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/visualization#edit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/visualization#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "edit term"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "with varnames"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "into"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "and on change do"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/visualization#visualizeDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "descriptor"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "is visualized as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ]   ] , ["." , ["/bootstrap#label" , "in mode"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/visualization#defineModifier"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/visualization#defineModifier" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "modifier"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , ["." , ["/bootstrap#label" , "displays"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ]   ] , ["." , ["/bootstrap#label" , "with class"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#for"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#for" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "for"   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , 40 , 41     ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#list"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#list" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8718   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#macro"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#macro" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "xml macro"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#generates"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["." , ["/bootstrap#label" , "generates"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#attr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attr"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#elem"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#elem" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "<"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["/bootstrap#horizontal" , 32 , 32 , ["/bootstrap#label" , " "   ] , ["/bootstrap#label" , " "   ]      ]    ] , ["." , ["/bootstrap#label" , ">"   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "</"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , ">"   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#empty"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#empty"  ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#horiz" , ["[]"  ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#str"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#str" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "str"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#entity"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#entity" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "&#"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#elem2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#elem2" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "<"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attribute"  ]   ]    ] , ["/bootstrap#horizontal" , 32 , 32 , ["/bootstrap#label" , " "   ] , ["/bootstrap#label" , " "   ]      ]    ] , ["." , ["/bootstrap#label" , ">"   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "</"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , ">"   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#generates2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#generates2" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["." , ["/bootstrap#label" , "generates"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "annotated"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ]   ] , ["." , ["/bootstrap#symbol" , 8594   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#attr2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#attr2" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attribute"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/html#entity"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/html#entity" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Entity"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "is written as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/html#simplePage"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/html#simplePage" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#raised" , ["/bootstrap#lineBorder" , ["/bootstrap#background" , ["/bootstrap#vert" , ["." , ["/bootstrap#color" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["cpi#rgb" , 0 , 0 , 255     ]    ] , ["." , ["/bootstrap#lowered" , ["/bootstrap#background" , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/Functional#expr" , ["/html#xml"  ]   ]   ]    ] , ["/bootstrap#vert"  ]    ] , ["cpi#rgb" , 255 , 255 , 255     ]    ]   ] , ["[]"  ]    ]    ]   ] , ["cpi#rgb" , 255 , 128 , 255     ]    ] , 5 , ["cpi#rgb" , 255 , 128 , 255     ]     ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/html#head"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/html#head" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#bold" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , ")"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/html#paragraph"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/html#paragraph" , vars [0]    ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "p"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/html#listComp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/html#listComp" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#raised" , ["/bootstrap#lineBorder" , ["/bootstrap#background" , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#lowered" , ["/bootstrap#lineBorder" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [3]    ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ] , 3 , ["cpi#rgb" , 255 , 255 , 255     ]     ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "For all"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["cpi#rgb" , 255 , 255 , 128     ]    ] , 3 , ["cpi#rgb" , 255 , 255 , 128     ]     ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "xml#element"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["xml#element" , vars [0]  , vars [1]  , vars [2]      ] , ["/html#xml"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#expand" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "<"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#tooltip" , ["/bootstrap#label" , "..."   ] , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ] , ["/bootstrap#horizontal" , ["/bootstrap#label" , " "   ] , ["/bootstrap#label" , ""   ]    ]    ]    ] , ["." , ["/bootstrap#label" , ">"   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["/bootstrap#vert" , ["." , ["/bootstrap#pivot" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "<"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ] , ["/bootstrap#horizontal" , ["/bootstrap#label" , " "   ] , ["/bootstrap#label" , " "   ]    ]    ] , ["." , ["/bootstrap#label" , ">"   ] , ["[]"  ]    ]    ]    ]    ]   ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["cpi#vis" , ["::" , vars [2]  , ["/bootstrap#list" , ["/html#xml"  ]   ]    ] , ["/bootstrap#vert"  ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "</"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , ">"   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "xml#attribute"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["xml#attribute" , vars [0]  , vars [1]  , vars [2]      ] , ["/html#xmlAttr"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , vars [1]     ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "xml#string"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["xml#string" , vars [0]    ] , ["/html#xml"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "'"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "'"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/html#unicode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/html#unicode" , vars [0]    ] , ["/html#xml"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "&#"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/ajax#ajaxDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/ajax#ajaxDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/ajax#ajaxExpr" , vars [0]    ]    ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "ajax"   ]   ] , ["." , ["/bootstrap#symbol" , 8797   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/ajax#ajaxExpr" , vars [0]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cjs#ajaxEval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cjs#ajaxEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/ajax#ajaxExpr" , vars [1]    ]    ]   ] , ["." , ["/bootstrap#label" , "evaluates to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["." , ["/bootstrap#label" , "where"   ] , ["." , ["cpi#vis" , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript/ajax#request"  ]   ]    ] , ["/bootstrap#vert"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/ajax#applyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/ajax#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#array"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#array" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#lineBorder" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ]   ] , 1 , ["cpi#rgb" , 192 , 192 , 192     ]     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#arrayElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#arrayElement" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#expr"  ]    ]   ] , 91 , 93     ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#var"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#var" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "var"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#symbol"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#const"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#const" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#lineBorder" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , 1 , ["cpi#rgb" , 192 , 192 , 192     ]     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#assign"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#assign" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/asyncproc#andThen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/asyncproc#andThen" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ]   ] , ["." , ["/bootstrap#label" , "and then"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#procedure"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/asyncproc#asyncProc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/asyncproc#asyncProc" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "async procedure"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ]   ] , ["." , ["/bootstrap#label" , "triggering"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#procedure"  ]    ]   ] , ["." , ["/bootstrap#label" , "{"   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#label" , "}"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/asyncproc#sync"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/asyncproc#sync" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "[sync]"   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/asyncproc#catch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/asyncproc#catch" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#label" , "try"   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "catch"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#exception"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/asyncproc#asyncProc"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/asyncproc#procDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/asyncproc#procDef" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "async procedure"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/asyncproc#asyncProc"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/asyncproc#block"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/asyncproc#block" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#label" , "{"   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript/asyncproc#asyncProc"  ]   ]    ] , ["/bootstrap#vertical" , ["/bootstrap#symbol" , 9830   ] , ["/bootstrap#color" , ["/bootstrap#label" , "<none>"   ] , ["cpi#rgb" , 192 , 192 , 192     ]    ] , ["/bootstrap#horiz" , ["[]"  ]   ]     ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#label" , "}"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#new"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#new" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "new"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#date"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#date"  ] , ["/javascript#symbol"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "Date"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#hasSpecialRendering"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#hasSpecialRendering" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "has special rendering as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#macro"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#macro" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "macro"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#return"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#return" , vars [0]    ] , ["/javascript#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "return"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#varExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#varExpr" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#lineBorder" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#symbol"  ]    ]   ] , 1 , ["cpi#rgb" , 192 , 192 , 192     ]     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#call"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#call" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["/bootstrap#horizontal" , 40 , 41 , ["/bootstrap#label" , ","   ] , ["/bootstrap#label" , "()"   ]      ]    ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#exprStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#exprStatement" , vars [0]    ] , ["/javascript#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#javascript"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#javascript" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#label" , "javascript"   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["/bootstrap#vert"  ]    ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#function"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#function" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "function"   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#symbol"  ]   ]    ] , ["/bootstrap#horizontal" , 40 , 41 , ["/bootstrap#label" , ","   ] , ["/bootstrap#label" , "()"   ]      ]    ] , ["." , ["/bootstrap#label" , "{"   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["/bootstrap#vertical" , ["/bootstrap#label" , "    "   ] , ["/bootstrap#color" , ["/bootstrap#label" , "    // Empty"   ] , ["cpi#rgb" , 192 , 192 , 192     ]    ] , ["/bootstrap#horiz" , ["[]"  ]   ]     ]    ] , ["." , ["/bootstrap#label" , "}"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#return"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#return"  ] , ["/javascript#statement"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "return"   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#twoStatements"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#twoStatements" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#statement"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#statement"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#equal"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#equal" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , "=="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#expr"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#if"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "if"   ] , ["." , ["/bootstrap#label" , "("   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , ")"   ] , ["." , ["/bootstrap#label" , "{"   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["/bootstrap#vertical" , ["/bootstrap#label" , "    "   ] , ["/bootstrap#color" , ["/bootstrap#label" , "    // Empty"   ] , ["cpi#rgb" , 192 , 192 , 192     ]    ] , ["/bootstrap#horiz" , ["[]"  ]   ]     ]    ] , ["." , ["/bootstrap#label" , "} else {"   ] , ["." , ["cpi#vis" , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["/bootstrap#vertical" , ["/bootstrap#label" , "    "   ] , ["/bootstrap#color" , ["/bootstrap#label" , "    // Empty"   ] , ["cpi#rgb" , 192 , 192 , 192     ]    ] , ["/bootstrap#horiz" , ["[]"  ]   ]     ]    ] , ["." , ["/bootstrap#label" , "}"   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#pred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#pred" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#predicateID"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "/"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#g"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#g" , vars [0]    ] , ["/javascript#symbol"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , 103 , 32     ] , ["[]"  ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#try"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#try" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#label" , "try {"   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "} catch"   ] , ["." , ["/bootstrap#symbol" , 40   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#exception"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 41   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#label" , "}"   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#throw"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#throw" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "throw"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#exception"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#typeof"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#typeof" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "typeof"   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , 40 , 41     ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#null"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#null"  ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#color" , ["/bootstrap#italic" , ["/bootstrap#label" , "null"   ]   ] , ["cpi#rgb" , 64 , 64 , 128     ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#inlineTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#inlineTerm" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#raised" , ["/bootstrap#lineBorder" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ] , 5 , ["cpi#rgb" , 255 , 255 , 255     ]     ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#length"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#length" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "the length of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#list" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#label" , "is"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#procedure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#procedure" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "procedure"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ]   ] , ["." , ["/bootstrap#label" , "{"   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#label" , "}"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#runProcedure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#runProcedure" , vars [0]    ] , ["/javascript#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#raised" , ["/bootstrap#lineBorder" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ] , 5 , ["cpi#rgb" , 255 , 255 , 255     ]     ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#jQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#jQuery"  ] , ["/javascript#symbol"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "$"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#foreach"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "for"   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , 40 , 41     ] , ["." , ["/bootstrap#label" , "{"   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#label" , "}"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#do"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#do" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "do"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#renderHTML"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#renderHTML" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Place HTML"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/html#xml"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "in"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#json"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#json" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [1]  , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#fieldAssignment"  ]   ]    ] , ["/bootstrap#horizontal" , 123 , 125 , ["/bootstrap#label" , ","   ] , ["/bootstrap#label" , "{}"   ]      ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#bind"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#bind" , vars [0]  , vars [1]     ] , ["/javascript#fieldAssignment"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , ":"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#expr"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#str"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#str" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , 34 , 34     ] , ["[]"  ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#dot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#dot" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , "."   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#op"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#operator"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript#expr"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#plus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#plus"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "+"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#minus"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "-"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#times"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#times"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "*"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#div"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#div"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "/"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#and"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#and"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "&&"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#or"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "||"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#eq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#eq"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "=="   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#eqq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#eqq"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "==="   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#gt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#gt"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , ">"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#lt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#lt"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "<"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#ne"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#ne"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "!="   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#gte"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#gte"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , ">="   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#lte"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#lte"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "<="   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "mod"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["mod"  ] , ["/javascript#operator"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "%"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/optimization#concatGoals"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/optimization#concatGoals" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , "is the concatenation of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , "and"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#async"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#async" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "async"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#clause"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#clause" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , ":-"   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "s"   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#conj"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#conj" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["." , ["/bootstrap#label" , ","   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#for (s)"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#for (s)" , vars [0]  , vars [1]     ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "for"   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "(s)"   ]   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , 40 , 41     ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#findall"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "find all"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#label" , "such that"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["." , ["/bootstrap#label" , "into"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#list" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#if"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "if"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["." , ["/bootstrap#label" , ":"   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#label" , "else:"   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#jsFunction"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#jsFunction" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , 40 , 41     ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#pair"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#pair" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [2]  , vars [3]     ]   ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , ","   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#member"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["." , ["/bootstrap#symbol" , 8714   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#set"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#set" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateSet" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#brackets" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["/bootstrap#box" , 1   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ]   ] , 0 , 0     ] , ["[]"  ]    ]    ]    ]   ] , 123 , 125     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#setDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#setDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ]   ] , ["." , ["/bootstrap#symbol" , 8839   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#eset"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#eset" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateSet" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#brackets" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#box" , 2   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ]   ] , 0 , 0     ] , ["[]"  ]    ]    ]    ]   ] , 123 , 125     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#stateEval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#stateEval" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , vars [1]     ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["." , ["/bootstrap#symbol" , 8656   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#stateApplyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#stateExprDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#stateExprDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#symbol" , 8797   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "s"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#expr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#expr" , vars [0]    ] , ["/javascript/statepred#stateExpr" , vars [1]    ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ]   ] , 10216 , 10217     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#where" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "where"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#whenever"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "for"   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "s"   ]   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , 40 , 41     ] , ["." , ["/bootstrap#label" , "{"   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "}"   ] , ["." , ["/bootstrap#label" , "finally"   ] , ["." , ["/bootstrap#label" , "{"   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#label" , "}"   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#whenever"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "for"   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "s"   ]   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , 40 , 41     ] , ["." , ["/bootstrap#label" , "{"   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#label" , "}"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#pred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#pred" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , 10216 , 10217     ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#frame"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#frame" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "frame"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#frame"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#frame" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "frame"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#frame"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#unframe"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#unframe" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "unframe"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#frame"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#trace"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#trace" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "trace"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#tracePred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#tracePred" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "[trace]"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#unitTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "unit test"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#unitTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#unitTest" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Unit Test:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    setup:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#while"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#while" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "while"   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , 40 , 41     ] , ["." , ["/bootstrap#label" , "{"   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["/bootstrap#vertical" , ["/bootstrap#label" , "    "   ] , ["/bootstrap#color" , ["/bootstrap#label" , "    // Empty"   ] , ["cpi#rgb" , 192 , 192 , 192     ]    ] , ["/bootstrap#horiz" , ["[]"  ]   ]     ]    ] , ["." , ["/bootstrap#label" , "}"   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#break"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#break"  ] , ["/javascript#statement"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "break"   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#or" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ]   ] , ["." , ["/bootstrap#label" , "|"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#event"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#event" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#eventType"  ]    ]   ] , ["." , ["/bootstrap#bold" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ]   ] , ["." , ["/bootstrap#label" , ":"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Test#eventTime"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/Test#location"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#append"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#append" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#label" , "is the concatenation of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#list" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#label" , "and"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#list" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#label" , "of type"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#error"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#error" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Error"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#error"  ]    ]   ] , ["." , ["/bootstrap#label" , "for term"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "at path"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["cpi#path"  ]    ]   ] , ["." , ["/bootstrap#label" , "with varnames"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#sigProj"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#sigProj" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "declare"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "where"   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["/bootstrap#horizontal" , 32 , 32 , ["/bootstrap#label" , ","   ] , ["/bootstrap#label" , "()"   ]      ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "display as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#raised"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#raised" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "r"   ]   ] , ["." , ["/bootstrap#raised" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#lowered"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#lowered" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["cpi#default"  ] , vars [1]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "l"   ]   ] , ["." , ["/bootstrap#lowered" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/couchdb#viewResults"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/couchdb#viewResults" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["cpi#default"  ] , vars [5]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "view"   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "/"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "/"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#label" , "from"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [4]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/ui#button"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/ui#button" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#expand" , ["/bootstrap#raised" , ["/bootstrap#lineBorder" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["cpi#rgb" , 192 , 192 , 192     ]    ] , 5 , ["cpi#rgb" , 192 , 192 , 192     ]     ]   ] , ["/bootstrap#vert" , ["." , ["/bootstrap#raised" , ["/bootstrap#lineBorder" , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["cpi#rgb" , 192 , 192 , 192     ]    ] , 5 , ["cpi#rgb" , 192 , 192 , 192     ]     ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/ajax#ajaxExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/ajax#ajaxExpr" , vars [0]  , vars [1]     ] , ["/javascript/ajax#ajaxExpr" , vars [2]    ]    ] , ["cpi#default"  ] , vars [3]  , ["/bootstrap#expand" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["/bootstrap#vert" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "where"   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript/ajax#request"  ]   ]    ] , ["/bootstrap#vert"  ]    ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]    ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cjs#get"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cjs#get" , vars [0]  , vars [1]     ] , ["/javascript/ajax#request"  ]    ] , ["cpi#default"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "GET"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8658   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#def"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#def" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , ["cpi#default"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "state predicate"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["." , ["/bootstrap#label" , "triggers"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["." , ["/bootstrap#label" , "and finally"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#researchPaper"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#researchPaper"  ] , ["/Test#eventType"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "Research Paper"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#demo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#demo"  ] , ["/Test#eventType"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "Demo"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#am"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#am"  ] , ["/Test#ampm"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "AM"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#pm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#pm"  ] , ["/Test#ampm"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "PM"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#tue"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#tue"  ] , ["/Test#conferenceDay"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "Tuesday"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#wed"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#wed"  ] , ["/Test#conferenceDay"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "Wednesday"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#thu"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#thu"  ] , ["/Test#conferenceDay"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "Thursday"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#east"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#east"  ] , ["/Test#direction"  ]    ] , ["cpi#default"  ] , vars [0]  , ["/bootstrap#label" , "East"   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["[]"  ] , ["/bootstrap#list" , vars [0]    ]    ] , ["/Test#numbered" , vars [1]    ] , vars [2]  , ["/bootstrap#horiz" , ["[]"  ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["[]"  ] , ["/bootstrap#list" , vars [0]    ]    ] , ["/bootstrap#horizCont"  ] , vars [1]  , ["/bootstrap#horiz" , ["[]"  ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#horizCont"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , ","   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#horizCont"  ]    ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["[]"  ] , ["/bootstrap#list" , vars [0]    ]    ] , ["/bootstrap#horizontal" , vars [1]  , vars [2]  , vars [3]  , vars [4]       ] , vars [5]  , vars [4]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#horizontal" , vars [3]  , vars [4]  , vars [5]  , vars [6]       ] , vars [7]  , ["/bootstrap#brackets" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#horizontalCont" , vars [5]    ]    ] , ["[]"  ]    ]    ]   ] , vars [3]  , vars [4]      ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["[]"  ] , ["/bootstrap#list" , vars [0]    ]    ] , ["/bootstrap#horizontal" , vars [1]  , vars [2]     ] , vars [3]  , vars [2]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#horizontal" , vars [3]  , vars [4]     ] , vars [5]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , " "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#horizontalCont" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["[]"  ] , ["/bootstrap#list" , vars [0]    ]    ] , ["/bootstrap#horizontalCont" , vars [1]    ] , vars [2]  , ["/bootstrap#horiz" , ["[]"  ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#horizontalCont" , vars [3]    ] , vars [4]  , ["/bootstrap#horiz" , ["." , vars [3]  , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#horizontalCont" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["[]"  ] , ["/bootstrap#list" , vars [0]    ]    ] , ["/bootstrap#vertical" , vars [1]  , vars [2]  , vars [3]      ] , vars [4]  , vars [2]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#vertical" , vars [3]  , vars [4]  , vars [5]      ] , vars [6]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , vars [3]  , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , vars [2]    ]    ] , ["/bootstrap#vertical" , vars [3]  , vars [5]  , vars [5]      ]    ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#unitTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , "Unit Test:"   ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "  "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#elem"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#elem" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "<"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["/bootstrap#horizontal" , 32 , 32 , ["/bootstrap#label" , " "   ] , ["/bootstrap#label" , " "   ]      ]    ] , ["." , ["/bootstrap#label" , ">"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["." , ["/bootstrap#label" , "</"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , ">"   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#function"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#function" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#horiz" , ["." , ["/bootstrap#italic" , ["/bootstrap#label" , "fn"   ]   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#symbol"  ]   ]    ] , ["/bootstrap#horizontal" , 40 , 41 , ["/bootstrap#label" , ","   ] , ["/bootstrap#label" , "()"   ]      ]    ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["/bootstrap#horizontal" , 123 , 125 , ["/bootstrap#label" , " "   ] , ["/bootstrap#label" , "{}"   ]      ]    ] , ["[]"  ]    ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#applyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#applyBinOpList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#applyBinOpList" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#applyBinOpListScalar"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#applyBinOpListScalar" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#reduce"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#reduce" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#binOp" , vars [2]    ]    ]   ]   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#list" , vars [2]    ]   ]    ]   ] , 40 , 41     ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#valueApplyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#valueApplyBinOp" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [5]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [4]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [4]     ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [4]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , vars [4]     ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/Functional#expr" , vars [4]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#otherwise"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#otherwise" , vars [0]    ] , ["/Functional#cases" , vars [1]  , vars [2]     ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "otherwise:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#eq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#eq" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "builtin#greaterThen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["builtin#greaterThen" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , ">"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#gt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#gt" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , ">"   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#ge"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#ge" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8805   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#eval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , vars [1]     ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#symbol" , 8656   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#minus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "-"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#mult"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#mult" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "*"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#idiv"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#idiv" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "//"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#modulus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#modulus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "mod"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#def"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#def" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#label" , " "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["." , ["/bootstrap#symbol" , 8797   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#func"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#func" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8594   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#lambda"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#lambda" , vars [0]  , vars [1]     ] , ["/Functional#func" , vars [2]  , vars [3]     ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 955   ] , ["." , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "."   ] , ["." , ["/bootstrap#background" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [3]    ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#apply"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#apply" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "["   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#func" , vars [1]  , vars [3]     ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "]"   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ]   ] , ["." , ["/bootstrap#label" , "("   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["." , ["/bootstrap#label" , ")"   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#pairType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#pairType" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 10799   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#pair"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#pair" , vars [0]  , vars [1]     ] , ["/Functional#pairType" , vars [2]  , vars [3]     ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["/bootstrap#label" , ","   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , vars [3]     ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#plus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#plus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "+"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#element"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#element" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#seq" , vars [2]    ]   ]    ]   ] , ["." , ["/bootstrap#label" , "["   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "]"   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#constSeq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#constSeq" , vars [0]    ] , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "seq"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#concat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#concat" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "+"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Functional#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Functional#where" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "where"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#f"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#f" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "f"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#token"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#token" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "t"   ]   ] , ["." , ["/bootstrap#italic" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test/bnf#token"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#concat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#concat" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ]   ] , ["." , ["/bootstrap#label" , " "   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#prod"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#prod" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ]   ] , ["." , ["/bootstrap#label" , "::="   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#parse"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#parse" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/Test/bnf#token"  ]   ]    ]   ] , ["." , ["/bootstrap#vert" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ]   ]   ] , ["." , ["/bootstrap#pivot" , ["/bootstrap#symbol" , 8658   ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , ["/Test/bnf#token"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#symbol"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#symbol" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "\""   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "\""   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#trainQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#trainQuery" , vars [0]  , vars [1]     ] , ["/Test/bnf#trainQuery"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Find train"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test/bnf#routeQueryType"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test/bnf#timeQueryType"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#fromTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#fromTo" , vars [0]  , vars [1]     ] , ["/Test/bnf#routeQueryType"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "from"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#onDate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#onDate" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test/bnf#timeQueryType"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "on"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "/"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , "/"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#word"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#word" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "\""   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "\""   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#location"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#location" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "loc"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#evaluatesTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#evaluatesTo" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8594   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#boolean"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#final"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#final" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , ["." , ["/bootstrap#label" , "is final"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#finallyEvaluatesTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#finallyEvaluatesTo" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8594   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "*"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#boolean"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#and"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#and" , vars [0]  , vars [1]     ] , ["/Test#boolean"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8896   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#boolean"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#or" , vars [0]  , vars [1]     ] , ["/Test#boolean"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8897   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#boolean"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#not"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#not" , vars [0]    ] , ["/Test#boolean"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 172   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#boolean"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#trans"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#trans" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , ["." , ["/bootstrap#vert" , ["." , ["/bootstrap#symbol" , 8594   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#action"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Test#process"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#prefix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#prefix" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#action"  ]    ]   ] , ["." , ["/bootstrap#label" , "."   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#alt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#alt" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , ["." , ["/bootstrap#label" , "+"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#process"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#procDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#procDef" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8656   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#process"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#reaches"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#reaches" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Path"   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/Test#action"  ]   ]    ] , ["/bootstrap#horiz"  ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "from"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , ["." , ["/bootstrap#label" , "exists"   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#cond"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#cond" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , 91 , 93     ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#process"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#costs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#costs" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#action"  ]    ]   ] , ["." , ["/bootstrap#label" , "costs"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#worths"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#worths" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#action"  ]    ]   ] , ["." , ["/bootstrap#label" , "worths"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#sayHelloTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#sayHelloTo" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Say hello to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "with varnames"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#statements"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#statements" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["/Test#numbered" , 9332   ]    ] , ["." , ["/bootstrap#label" , "   "   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#e"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#e" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8608   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#p"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#p" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "there is a path from"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#time"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#time" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test#eventTime"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#conferenceDay"  ]    ]   ] , ["." , ["/bootstrap#label" , ","   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Test#ampm"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#pavilion"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#pavilion" , vars [0]    ] , ["/Test#location"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Pavilion"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#direction"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#galleria"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#galleria" , vars [0]    ] , ["/Test#location"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Galleria"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#visitUsAt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#visitUsAt" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Visit us at:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#subState"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#subState" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#state"  ]    ]   ] , ["." , ["/bootstrap#label" , "is a substate of"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#state"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#initialState"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#initialState" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "The initial state is"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#state"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#transition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#transition" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "While"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#state"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , ", on"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test#event"  ]    ]   ] , ["." , ["/bootstrap#label" , "change state to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Test#state"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#hello"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#hello" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Hello, "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#adapter"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#adapter" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "use"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "as adapter for"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#alias"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#alias" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "use"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "as alias for"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "annotation#changeMode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["annotation#changeMode" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#color" , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ]   ]   ] , ["cpi#rgb" , 192 , 192 , 192     ]    ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#defAtom"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#defAtom" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "declare"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#default"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#default" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Use"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "by default"   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#projection"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "display"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "~>"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["~>" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["." , ["/bootstrap#image" , ["/bootstrap#wavy-arrow.png"  ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#typedTerm"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["." , ["/bootstrap#label" , "::"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , ":-"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , [":-" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , ":-"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#signature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "declare"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "where"   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["/bootstrap#horizontal" , ["/bootstrap#label" , ","   ] , ["/bootstrap#label" , "()"   ]    ]    ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#or" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8744   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#generateFileForSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#generateFileForSet" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Generate file"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "with string set"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#requires"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#requires" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8826   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#missing"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#missing" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Missing statement:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#defines"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#defines" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["." , ["/bootstrap#label" , "defines"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#definitionType"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#deprecated"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#deprecated" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "is deprecated"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#deprecationReplacement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#deprecationReplacement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Deprecated"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#label" , "is replaced by"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , vars [1]     ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#path"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#path" , vars [0]  , vars [1]     ] , ["cpi#path"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "/"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["/bootstrap#horiz"  ]    ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "builtin#succ"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["builtin#succ" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , "+1"   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , ">"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , [">" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , ">"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "="    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["=" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "+"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["+" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "+"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "-"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["-" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "+"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#constExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#constExpr" , vars [0]    ] , ["/bootstrap#expr" , vars [1]    ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "const"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "builtin#equals"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["builtin#equals" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "=="   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "builtin#import"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["builtin#import" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "import"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#forall"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#forall" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8704   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#symbol" , 8658   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#listMember"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#listMember" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#symbol" , 8714   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#func"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#func" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , "func"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#ref" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#doAll"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#doAll" , vars [0]    ] , ["/bootstrap#command"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "do"   ]   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#command"  ]   ]    ] , ["/bootstrap#vertical" , ["/bootstrap#symbol" , 8594   ] , ["/bootstrap#label" , "()"   ] , ["/bootstrap#horiz" , ["[]"  ]   ]     ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#assign"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#assign" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#ref" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , ":="   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#expr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#doProc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#doProc" , vars [0]    ] , ["/bootstrap#command"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "p"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#where" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#command"  ]    ]   ] , ["." , ["/bootstrap#label" , "where"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#foreach"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#foreach" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "for each"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "do"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#command"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "builtin#findall"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["builtin#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Find all"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "of type"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#label" , "such that"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , "into"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#list" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#projection"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "@"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 8608   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#member"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#member" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8712   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#setDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#setDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8797   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#union"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#union" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#symbol" , 8746   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#intersect"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#intersect" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#symbol" , 8745   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#diffSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#diffSet" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "\\"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#notMember"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#notMember" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [2]     ]   ] , ["." , ["/bootstrap#symbol" , 8713   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#shortcutKey"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#shortcutKey" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "is shortcut for"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#signaturePlaceMismatch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#signaturePlaceMismatch" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "In a type signature, head and body arguments must appear in the same order:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "and"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#nonVarInSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#nonVarInSignature" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "In a type signature, all head arguments must be variables:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#signatureVarInBodyAndNotInHead"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Variable"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "appears in the head but not in the body of a type signature"   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#symbolRange"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#symbolRange" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Symbols"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "Range from"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#tip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#tip" , vars [0]    ] , ["/bootstrap#marker"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Tip:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#tip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#tip" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Tip"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#procedure"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "for"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "at path"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["cpi#path"  ]    ]   ] , ["." , ["/bootstrap#label" , "with varnames"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#true"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#true" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , "!"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#missingSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#missingSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Missing signature:"   ] , ["." , ["/bootstrap#label" , "declare"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "where"   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["/bootstrap#horizontal" , 32 , 32 , ["/bootstrap#label" , ","   ] , ["/bootstrap#label" , "()"   ]      ]    ] , ["[]"  ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#unitTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , "Unit Test:"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "\\+"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["\\+" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 172   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#failedTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#failedTest" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Test"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "has failed"   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#insertStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#insertStatement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Insert:"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cpi#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cpi#vis" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 12298   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "@"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 12299   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#vert"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#vert" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "v"   ]   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["/bootstrap#vert"  ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#label"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#label" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "\""   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "\""   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#italic"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#italic" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "i"   ]   ] , ["." , ["/bootstrap#italic" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#bold"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#bold" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "b"   ]   ] , ["." , ["/bootstrap#bold" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#halfSize"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#halfSize" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "1/2"   ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#smaller"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#smaller" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "<"   ]   ] , ["." , ["/bootstrap#smaller" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#pivot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#pivot" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 9758   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#varNameMacroStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#varNameMacroStatement" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Variable"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "displays as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#varNameSuffix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#varNameSuffix" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Variable suffix"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "modifies"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ]   ] , ["." , ["/bootstrap#label" , "into"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/couchdb#insertDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "insert document"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "with content"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "to database"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "on"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/couchdb#updateDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "update document"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "with content"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "in database"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "on"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/couchdb#updateDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#shrink"  ] , vars [5]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "update document"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "revision"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "with content"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [4]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "in database"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "on"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cjs#verifyDatabaseRev"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cjs#verifyDatabaseRev" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "verify database"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/couchdb#database"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "rev"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "with program"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#ajaxQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#ajaxQuery" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["." , ["/bootstrap#label" , "on server"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#onServer"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#onServer" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ]   ] , ["." , ["/bootstrap#label" , "on server"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#animate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "animate"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "of ID"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "with action"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/cedalionWeb/jquery#animateAction"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#runAfterGen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#runAfterGen" , vars [0]    ] , ["/cedalionWeb/xml#annotation"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "run"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "after generation"   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#animate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "animate"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "as element"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["." , ["/bootstrap#label" , "with id"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "with action"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#changeContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#changeContent" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "set the content of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#applyAnnot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#applyAnnot" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "apply"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/xml#annotation"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#modifyElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#modifyElement" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "modify the content of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["." , ["/bootstrap#label" , "using method"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#replaceWith"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#replaceWith" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "replace"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "with"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#prependTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#prependTo" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "prepend"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/jquery#appendTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/jquery#appendTo" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "append"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "to the end of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb#addKeyComponents"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb#addKeyComponents" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "add key components of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#get"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#get" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "GET"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#json"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#json" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "JSON"   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , 91 , 93     ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#dot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#dot" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "."   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#jsonStringify"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#jsonStringify" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "JSON"   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , 91 , 93     ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#arrayElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#arrayElement" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "is an element in"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#urlQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#urlQuery" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "?"   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/node#queryArg"  ]   ]    ] , ["/bootstrap#horizontal" , 32 , 32 , ["/bootstrap#label" , "&"   ] , ["/bootstrap#label" , ""   ]      ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/node#arg"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ] , ["/cedalionWeb/node#queryArg"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb#implies"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb#implies" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ]   ] , ["." , ["/bootstrap#label" , "implies"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb#dataStatement"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb#rewrite"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb#rewrite" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ]   ] , ["." , ["/bootstrap#symbol" , 10547   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb#dataStatement"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/ui#ul"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/ui#ul" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "ul"   ]   ] , ["." , ["cpi#vis" , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["/bootstrap#vert"  ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/visualization#editActionIcon"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/visualization#editActionIcon" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "action icon"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "edits"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "into"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/visualization#suggestion"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/visualization#suggestion" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "suggest"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/visualization#edit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/visualization#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "edit term"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "with varnames"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "into"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "and on change do"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/visualization#visualizeDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "descriptor"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "is visualized as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ]   ] , ["." , ["/bootstrap#label" , "in mode"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/visualization#defineModifier"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/visualization#defineModifier" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "modifier"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "displays"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ]   ] , ["." , ["/bootstrap#label" , "with class"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#macro"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#macro" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "xml macro"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#generates"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["." , ["/bootstrap#label" , "generates"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#attr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attr"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#str"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#str" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "str"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#entity"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#entity" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "&#"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#generates2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#generates2" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ]   ] , ["." , ["/bootstrap#label" , "generates"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "annotated"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ]   ] , ["." , ["/bootstrap#symbol" , 8594   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/xml#attr2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/xml#attr2" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attribute"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/html#entity"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/html#entity" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Entity"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "is written as"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/html#paragraph"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/html#paragraph" , vars [0]    ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "p"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "xml#attribute"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["xml#attribute" , vars [0]  , vars [1]  , vars [2]      ] , ["/html#xmlAttr"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , vars [1]     ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "xml#string"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["xml#string" , vars [0]    ] , ["/html#xml"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "'"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "'"   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/html#unicode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/html#unicode" , vars [0]    ] , ["/html#xml"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "&#"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/ajax#ajaxDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/ajax#ajaxDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/ajax#ajaxExpr" , vars [0]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "ajax"   ]   ] , ["." , ["/bootstrap#symbol" , 8797   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/ajax#ajaxExpr" , vars [0]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cjs#ajaxEval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cjs#ajaxEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/ajax#ajaxExpr" , vars [1]    ]    ]   ] , ["." , ["/bootstrap#label" , "evaluates to"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["." , ["/bootstrap#label" , "where"   ] , ["." , ["cpi#vis" , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript/ajax#request"  ]   ]    ] , ["/bootstrap#vert"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/ajax#applyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/ajax#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#arrayElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#arrayElement" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#expr"  ]    ]   ] , 91 , 93     ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#var"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#var" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "var"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#symbol"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "="   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#assign"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#assign" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , "="   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/asyncproc#sync"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/asyncproc#sync" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "[sync]"   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#new"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#new" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "new"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#hasSpecialRendering"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#hasSpecialRendering" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "has special rendering as"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#return"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#return" , vars [0]    ] , ["/javascript#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "return"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#call"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#call" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["cpi#vis" , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["/bootstrap#horizontal" , 40 , 41 , ["/bootstrap#label" , ","   ] , ["/bootstrap#label" , "()"   ]      ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#exprStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#exprStatement" , vars [0]    ] , ["/javascript#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#return"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#return"  ] , ["/javascript#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [0]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "return"   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#equal"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#equal" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , "=="   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#expr"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#pred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#pred" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#predicateID"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["." , ["/bootstrap#label" , "/"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#throw"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#throw" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "throw"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#exception"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#typeof"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#typeof" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "typeof"   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , 40 , 41     ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#length"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#length" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "the length of"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#list" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "is"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#do"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#do" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "do"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/jsLogic#renderHTML"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/jsLogic#renderHTML" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Place HTML"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/html#xml"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "in"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#bind"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#bind" , vars [0]  , vars [1]     ] , ["/javascript#fieldAssignment"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , ":"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#expr"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#dot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#dot" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#label" , "."   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#op"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript#expr"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript#operator"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript#expr"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/optimization#concatGoals"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/optimization#concatGoals" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , "is the concatenation of"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ]   ] , ["." , ["/bootstrap#label" , "and"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#async"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#async" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "async"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript#expr"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#clause"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#clause" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , ":-"   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "s"   ]   ] , ["[]"  ]    ]    ] , ["cpi#top"  ]    ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#findall"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "find all"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#label" , "such that"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["." , ["/bootstrap#label" , "into"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#list" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#jsFunction"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#jsFunction" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#brackets" , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , 40 , 41     ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#pair"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#pair" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [2]  , vars [3]     ]   ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , ","   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#member"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , vars [1]     ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["." , ["/bootstrap#symbol" , 8714   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#setDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#setDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#symbol" , 8839   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#stateEval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#stateEval" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , vars [1]     ]   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "::"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#symbol" , 8656   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [1]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#stateApplyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#stateExprDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#stateExprDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#symbol" , 8797   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "s"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#where" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["/bootstrap#shrink"  ] , vars [3]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ]   ] , ["." , ["/bootstrap#label" , "where"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#trace"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#trace" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "trace"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#tracePred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#tracePred" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "[trace]"   ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript/statepred#unitTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript/statepred#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "unit test"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/javascript#break"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/javascript#break"  ] , ["/javascript#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [0]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "break"   ] , ["." , ["/bootstrap#label" , ";"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test/bnf#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test/bnf#or" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ]   ] , ["." , ["/bootstrap#label" , "|"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/Test#event"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/Test#event" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Test#eventType"  ]    ]   ] , ["." , ["/bootstrap#bold" , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , ":"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Test#eventTime"  ]    ]   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/Test#location"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#append"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#append" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#label" , "is the concatenation of"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#list" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#label" , "and"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#list" , vars [3]    ]    ]   ] , ["." , ["/bootstrap#label" , "of type"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#type"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#error"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#error" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["/bootstrap#shrink"  ] , vars [4]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Error"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/bootstrap#error"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "for term"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["." , ["/bootstrap#label" , "at path"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["cpi#path"  ]    ]   ] , ["." , ["/bootstrap#label" , "with varnames"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#raised"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#raised" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "r"   ]   ] , ["." , ["/bootstrap#raised" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/bootstrap#lowered"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/bootstrap#lowered" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["/bootstrap#shrink"  ] , vars [1]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "l"   ]   ] , ["." , ["/bootstrap#lowered" , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ]   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["[]"  ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "/cedalionWeb/couchdb#viewResults"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["/cedalionWeb/couchdb#viewResults" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["/bootstrap#shrink"  ] , vars [5]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "view"   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "/"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["." , ["/bootstrap#label" , "/"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [2]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#label" , "from"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["." , ["/bootstrap#label" , "to"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [4]  , ["/javascript/jsLogic#jsExpr"  ]    ]   ] , ["[]"  ]    ]    ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#userVisualization" , "::" , "cjs#get"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#userVisualization" , ["::" , ["cjs#get" , vars [0]  , vars [1]     ] , ["/javascript/ajax#request"  ]    ] , ["/bootstrap#shrink"  ] , vars [2]  , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "GET"   ] , ["." , ["/bootstrap#vis" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "    "   ] , ["." , ["/bootstrap#symbol" , 8658   ] , ["." , ["/bootstrap#vis" , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]   ]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/Functional#applyBinOpSet" , vars [1]  , vars [2]  , vars [3]      ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/Functional#eset" , ["/Functional#applyBinOp" , ["/Functional#const" , vars [5]    ] , vars [2]  , ["/Functional#const" , vars [6]    ]     ] , ["," , ["/bootstrap#member" , vars [5]  , vars [1]  , vars [4]      ] , ["/bootstrap#member" , vars [6]  , vars [3]  , vars [4]      ]    ]    ] , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/bootstrap#statements"  ] , ["/bootstrap#statement"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#set" , vars [1]  , ["builtin#loadedStatement" , vars [2]  , vars [1]  , vars [3]      ]    ] , ["/bootstrap#statement"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/bootstrap#closure" , vars [1]    ] , ["/bootstrap#statement"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#union" , ["/bootstrap#singleton" , vars [1]    ] , ["/bootstrap#set" , vars [2]  , ["," , ["/bootstrap#member" , ["~>" , vars [1]  , vars [3]     ] , ["/bootstrap#statements"  ] , ["/bootstrap#statement"  ]     ] , ["/bootstrap#member" , vars [2]  , ["/bootstrap#closure" , vars [3]    ] , ["/bootstrap#statement"  ]     ]    ]    ]    ] , ["/bootstrap#statement"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/bootstrap#closure"  ] , ["/bootstrap#statement"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#set" , vars [1]  , ["," , ["/bootstrap#member" , vars [2]  , ["/bootstrap#statements"  ] , ["/bootstrap#statement"  ]     ] , ["/bootstrap#member" , vars [1]  , ["/bootstrap#closure" , vars [2]    ] , ["/bootstrap#statement"  ]     ]    ]    ] , ["/bootstrap#statement"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/bootstrap#union" , vars [1]  , vars [2]     ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#set" , vars [4]  , ["/bootstrap#or" , ["/bootstrap#member" , vars [4]  , vars [1]  , vars [3]      ] , ["/bootstrap#member" , vars [4]  , vars [2]  , vars [3]      ]    ]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/bootstrap#intersect" , vars [1]  , vars [2]     ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#set" , vars [4]  , ["," , ["/bootstrap#member" , vars [4]  , vars [1]  , vars [3]      ] , ["/bootstrap#member" , vars [4]  , vars [2]  , vars [3]      ]    ]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/bootstrap#setParens" , vars [1]    ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/bootstrap#diffSet" , vars [1]  , vars [2]     ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#set" , vars [4]  , ["," , ["/bootstrap#member" , vars [4]  , vars [1]  , vars [3]      ] , ["/bootstrap#notMember" , vars [4]  , vars [2]  , vars [3]      ]    ]    ] , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/jsLogic#allClauses"  ] , ["/bootstrap#statement"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#set" , [":-" , vars [1]  , vars [2]     ] , ["/javascript/jsLogic#statement" , [":-" , vars [1]  , vars [2]     ] , 100    ]    ] , ["/bootstrap#statement"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/jsLogic#jsStatementsForClauses" , vars [1]    ] , ["/javascript#statement"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#set" , ["/javascript#exprStatement" , ["/javascript#call" , ["/javascript#dot" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "program"    ] , "add"    ] , ["." , vars [2]  , ["." , vars [3]  , ["[]"  ]    ]    ]    ]   ] , ["," , ["/bootstrap#member" , vars [4]  , vars [1]  , ["/bootstrap#statement"  ]     ] , ["," , ["/Functional#eval" , ["/javascript/jsLogic#clauseFunction" , vars [4]    ] , ["/javascript#expr"  ] , vars [3]      ] , ["/Functional#eval" , ["/javascript/jsLogic#firstArgName" , vars [4]    ] , ["/javascript#expr"  ] , vars [2]      ]    ]    ]    ] , ["/javascript#statement"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/jsLogic#jsStatementStrings" , vars [1]    ] , ["/bootstrap#string"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/Functional#eset" , ["/javascript#toString" , ["::" , vars [2]  , ["/javascript#statement"  ]    ] , ["cpi#default"  ]    ] , ["/bootstrap#member" , vars [2]  , vars [1]  , ["/javascript#statement"  ]     ]    ] , ["/bootstrap#string"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/optimization#partialEvalClauses" , vars [1]    ] , ["/bootstrap#statement"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#set" , [":-" , vars [2]  , vars [3]     ] , ["," , ["/bootstrap#member" , [":-" , vars [2]  , vars [4]     ] , vars [1]  , ["/bootstrap#statement"  ]     ] , ["/javascript/optimization#partialEval" , vars [4]  , vars [3]  , vars [1]  , 10      ]    ]    ] , ["/bootstrap#statement"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/optimization#testStatements"  ] , ["/bootstrap#statement"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#union" , ["/bootstrap#singleton" , [":-" , ["/javascript/optimization#a" , vars [1]    ] , ["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#const" , 1   ] , ["/Functional#numPlus"  ] , ["/Functional#const" , 2   ]     ] , ["/Functional#numPlus"  ] , ["/Functional#const" , 3   ]     ] , ["/bootstrap#number"  ] , vars [1]      ]    ]   ] , ["/bootstrap#union" , ["/bootstrap#singleton" , [":-" , ["/Functional#eval" , ["/Functional#applyBinOp" , vars [2]  , ["/Functional#numPlus"  ] , vars [3]      ] , ["/bootstrap#number"  ] , vars [4]      ] , ["," , ["/Functional#eval" , vars [2]  , ["/bootstrap#number"  ] , vars [5]      ] , ["," , ["/Functional#eval" , vars [3]  , ["/bootstrap#number"  ] , vars [6]      ] , ["builtin#plus" , vars [5]  , vars [6]  , vars [4]      ]    ]    ]    ]   ] , ["/bootstrap#singleton" , [":-" , ["/Functional#eval" , ["/Functional#const" , vars [7]    ] , ["/bootstrap#number"  ] , vars [7]      ] , ["builtin#true"  ]    ]   ]    ]    ] , ["/bootstrap#statement"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/optimization#optAllClauses"  ] , ["/bootstrap#statement"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/javascript/optimization#partialEvalClauses" , ["/javascript/jsLogic#allClauses"  ]   ] , ["/bootstrap#statement"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/cedalionWeb#indexKey" , ["::" , ["/Functional#applyBinOp" , ["/Functional#const" , 5   ] , ["/Functional#numPlus"  ] , ["/Functional#const" , 3   ]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["/Functional#applyBinOp" , "/Functional#const" , 5 , "/Functional#numPlus"     ]    ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem" , ["/Functional#const" , "input"   ] , ["." , ["/cedalionWeb/xml#attr" , "type" , ["/javascript/statepred#expr" , ["/Functional#const" , "text"   ]   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , "<input type=\"text\"></input>"    ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#findall" , vars [1]  , ["/bootstrap#number"  ] , ["/javascript/statepred#countToThree" , vars [1]    ] , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]      ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#findall" , vars [1]  , ["/bootstrap#number"  ] , ["/javascript/statepred#countToThree1" , vars [1]    ] , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]      ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#findall" , vars [1]  , ["/bootstrap#number"  ] , ["/javascript/statepred#countToThree2" , vars [1]    ] , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]      ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#findall" , vars [1]  , ["/bootstrap#number"  ] , ["/javascript/statepred#test1" , vars [1]    ] , ["." , 1 , ["." , 2 , ["[]"  ]    ]    ]      ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#findall" , vars [1]  , ["/bootstrap#number"  ] , ["/javascript/statepred#pred" , ["," , ["/bootstrap#listMember" , vars [1]  , ["/bootstrap#number"  ] , ["." , 1 , ["." , 2 , ["." , 3 , ["." , 4 , ["[]"  ]    ]    ]    ]    ]     ] , ["/Functional#gt" , ["/Functional#const" , 3   ] , ["/Functional#const" , vars [1]    ] , ["/bootstrap#number"  ]     ]    ]   ] , ["." , 1 , ["." , 2 , ["[]"  ]    ]    ]      ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#const" , 1   ] , ["/Functional#numPlus"  ] , ["/Functional#const" , 2   ]     ] , ["/bootstrap#number"  ] , 3     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#applyBinOpList" , ["/Functional#const" , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]   ] , ["/Functional#numPlus"  ] , ["/Functional#applyBinOpList" , ["/Functional#const" , ["." , 4 , ["." , 5 , ["." , 6 , ["[]"  ]    ]    ]    ]   ] , ["/Functional#numPlus"  ] , ["/Functional#const" , ["." , 3 , ["." , 2 , ["." , 1 , ["[]"  ]    ]    ]    ]   ]     ]     ] , ["/bootstrap#list" , ["/bootstrap#number"  ]   ] , ["." , 8 , ["." , 9 , ["." , 10 , ["[]"  ]    ]    ]    ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#applyBinOpListScalar" , ["/Functional#const" , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]   ] , ["/Functional#numPlus"  ] , ["/Functional#const" , 2   ]     ] , ["/bootstrap#list" , ["/bootstrap#number"  ]   ] , ["." , 3 , ["." , 4 , ["." , 5 , ["[]"  ]    ]    ]    ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/bootstrap#member" , 3 , ["/Functional#applyBinOpSet" , ["/bootstrap#singleton" , 1   ] , ["/Functional#numPlus"  ] , ["/bootstrap#singleton" , 2   ]     ] , ["/bootstrap#number"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#reduce" , ["/Functional#numPlus"  ] , ["/Functional#const" , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]   ]    ] , ["/bootstrap#number"  ] , 6     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#max" , ["/Functional#wrap" , 2   ] , ["/Functional#wrap" , 3   ]    ] , ["/bootstrap#number"  ] , 3     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["\\+" , ["/Functional#eval" , ["/Functional#max" , ["/Functional#wrap" , 2   ] , ["/Functional#wrap" , 3   ]    ] , ["/bootstrap#number"  ] , 2     ]   ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#plus" , ["/Functional#wrap" , 1   ] , ["/Functional#wrap" , 1   ]    ] , ["/bootstrap#number"  ] , 2     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#div" , ["/Functional#wrap" , 5   ] , ["/Functional#wrap" , 2   ]    ] , ["/bootstrap#number"  ] , 2.5     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#f" , ["/Functional#wrap" , 5   ]   ] , ["/bootstrap#number"  ] , 1.75     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#apply" , ["/Functional#g" , ["/Functional#wrap" , 3   ]   ] , ["/bootstrap#number"  ] , ["/Functional#wrap" , 2   ]     ] , ["/bootstrap#number"  ] , 5     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#apply" , ["/Functional#plus" , ["/Functional#g" , ["/Functional#wrap" , 3   ]   ] , ["/Functional#g" , ["/Functional#wrap" , 2   ]   ]    ] , ["/bootstrap#number"  ] , ["/Functional#wrap" , 2   ]     ] , ["/bootstrap#number"  ] , 9     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#map" , ["/Functional#wrap" , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]   ] , ["/Functional#lambda" , vars [1]  , ["/Functional#applyBinOp" , vars [1]  , ["/Functional#numPlus"  ] , vars [1]      ]    ] , ["/bootstrap#number"  ]     ] , ["/bootstrap#list" , ["/bootstrap#number"  ]   ] , ["." , 2 , ["." , 4 , ["." , 6 , ["[]"  ]    ]    ]    ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#element" , ["/Functional#fib"  ] , ["/Functional#wrap" , 5   ]    ] , ["/bootstrap#number"  ] , 8     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#element" , ["/Functional#plus" , ["/Functional#fib"  ] , ["/Functional#fib"  ]    ] , ["/Functional#wrap" , 6   ]    ] , ["/bootstrap#number"  ] , 26     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#element" , ["/Functional#plus" , ["/Functional#fib"  ] , ["/Functional#constSeq" , ["/Functional#wrap" , 3   ]   ]    ] , ["/Functional#wrap" , 6   ]    ] , ["/bootstrap#number"  ] , 16     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#sum" , ["/Functional#parentheses" , ["/Functional#plus" , ["/Functional#div" , ["/Functional#mult" , ["/Functional#wrap" , vars [1]    ] , ["/Functional#wrap" , vars [1]    ]    ] , ["/Functional#wrap" , 2   ]    ] , ["/Functional#wrap" , vars [1]    ]    ]   ] , ["/bootstrap#member" , vars [1]  , ["/bootstrap#listSet" , ["." , 1 , ["." , 2 , ["." , 3 , ["." , 4 , ["[]"  ]    ]    ]    ]    ]   ] , ["/bootstrap#number"  ]     ]    ] , ["/bootstrap#number"  ] , 25.0     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Functional#range" , ["/Functional#wrap" , 0   ] , ["/Functional#wrap" , 3   ]    ] , ["/bootstrap#list" , ["/bootstrap#number"  ]   ] , ["." , 0 , ["." , 1 , ["." , 2 , ["[]"  ]    ]    ]    ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/Test#f" , ["/Functional#wrap" , 8   ]   ] , ["/bootstrap#number"  ] , 18     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test/bnf#parse" , ["." , ["/Test/bnf#a"  ] , ["." , ["/Test/bnf#a"  ] , ["." , ["/Test/bnf#b"  ] , ["." , ["/Test/bnf#b"  ] , ["[]"  ]    ]    ]    ]    ] , ["/Test/bnf#s"  ] , ["[]"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["\\+" , ["/Test/bnf#parse" , ["." , ["/Test/bnf#a"  ] , ["." , ["/Test/bnf#a"  ] , ["." , ["/Test/bnf#b"  ] , ["." , ["/Test/bnf#b"  ] , ["." , ["/Test/bnf#b"  ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/Test/bnf#s"  ] , ["[]"  ]     ]   ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test/bnf#parse" , ["." , ["/Test/bnf#a"  ] , ["." , ["/Test/bnf#a"  ] , ["." , ["/Test/bnf#a"  ] , ["." , ["/Test/bnf#b"  ] , ["[]"  ]    ]    ]    ]    ] , ["/Test/bnf#concat" , ["/Test/bnf#repeat" , ["/Test/bnf#token" , ["/Test/bnf#a"  ]   ]   ] , ["/Test/bnf#token" , ["/Test/bnf#b"  ]   ]    ] , ["[]"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["\\+" , ["/Test/bnf#parse" , ["." , ["/Test/bnf#a"  ] , ["." , ["/Test/bnf#a"  ] , ["." , ["/Test/bnf#a"  ] , ["[]"  ]    ]    ]    ] , ["/Test/bnf#concat" , ["/Test/bnf#repeat" , ["/Test/bnf#token" , ["/Test/bnf#a"  ]   ]   ] , ["/Test/bnf#token" , ["/Test/bnf#b"  ]   ]    ] , ["[]"  ]     ]   ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test/bnf#parse" , ["." , ["/Test/bnf#number" , 1   ] , ["." , ["/Test/bnf#symbol" , "+"   ] , ["." , ["/Test/bnf#number" , 2   ] , ["." , ["/Test/bnf#symbol" , "*"   ] , ["." , ["/Test/bnf#number" , 6   ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/Test/bnf#sumExpr" , ["/Functional#plus" , ["/Functional#wrap" , 1   ] , ["/Functional#mult" , ["/Functional#wrap" , 2   ] , ["/Functional#wrap" , 6   ]    ]    ]   ] , ["[]"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["\\+" , ["/Test/bnf#parse" , ["." , ["/Test/bnf#number" , 1   ] , ["." , ["/Test/bnf#symbol" , "+"   ] , ["." , ["/Test/bnf#number" , 2   ] , ["." , ["/Test/bnf#symbol" , "*"   ] , ["[]"  ]    ]    ]    ]    ] , ["/Test/bnf#sumExpr" , vars [1]    ] , ["[]"  ]     ]   ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test/bnf#parse" , ["." , ["/Test/bnf#word" , "from"   ] , ["." , ["/Test/bnf#location" , "paris"   ] , ["." , ["/Test/bnf#word" , "to"   ] , ["." , ["/Test/bnf#location" , "rome"   ] , ["." , ["/Test/bnf#word" , "today"   ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/Test/bnf#query"  ] , ["[]"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test/bnf#parse" , ["." , ["/Test/bnf#word" , "tomorrow"   ] , ["." , ["/Test/bnf#word" , ","   ] , ["." , ["/Test/bnf#word" , "to"   ] , ["." , ["/Test/bnf#location" , "paris"   ] , ["." , ["/Test/bnf#word" , "from"   ] , ["." , ["/Test/bnf#location" , "rome"   ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/Test/bnf#query"  ] , ["[]"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test/bnf#parse" , ["." , ["/Test/bnf#word" , "from"   ] , ["." , ["/Test/bnf#location" , "paris"   ] , ["." , ["/Test/bnf#word" , "to"   ] , ["." , ["/Test/bnf#location" , "rome"   ] , ["." , ["/Test/bnf#word" , "today"   ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/Test/bnf#query" , ["/Test/bnf#trainQuery" , ["/Test/bnf#fromTo" , "paris" , "rome"    ] , ["/Test/bnf#today"  ]    ]   ] , ["[]"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test/bnf#parse" , ["." , ["/Test/bnf#word" , "tomorrow"   ] , ["." , ["/Test/bnf#word" , ","   ] , ["." , ["/Test/bnf#word" , "to"   ] , ["." , ["/Test/bnf#location" , "paris"   ] , ["." , ["/Test/bnf#word" , "from"   ] , ["." , ["/Test/bnf#location" , "rome"   ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/Test/bnf#query" , ["/Test/bnf#trainQuery" , ["/Test/bnf#fromTo" , "rome" , "paris"    ] , ["/Test/bnf#tomorrow"  ]    ]   ] , ["[]"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test#finallyEvaluatesTo" , ["/Test#and" , ["/Test#true"  ] , ["/Test#not" , ["/Test#parens" , ["/Test#or" , ["/Test#false"  ] , ["/Test#true"  ]    ]   ]   ]    ] , ["/Test#false"  ]    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test#reaches" , ["/Test#coffeeTeaMachine"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#coffee"  ] , ["[]"  ]    ]    ]    ]    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test#reaches" , ["/Test#coffeeTeaMachine"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#tea"  ] , ["[]"  ]    ]    ]    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["\\+" , ["/Test#reaches" , ["/Test#coffeeTeaMachine"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#coffee"  ] , ["[]"  ]    ]    ]    ]   ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test#reaches" , ["/Test#vendingMachine"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#coffee"  ] , ["[]"  ]    ]    ]    ]    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test#reaches" , ["/Test#vendingMachine"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#tea"  ] , ["[]"  ]    ]    ]    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["\\+" , ["/Test#reaches" , ["/Test#vendingMachine"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#coffee"  ] , ["[]"  ]    ]    ]    ]   ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test#reaches" , ["/Test#vendingMachine"  ] , ["." , ["/Test#dime"  ] , ["." , ["/Test#dime"  ] , ["." , ["/Test#dime"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#coffee"  ] , ["[]"  ]    ]    ]    ]    ]    ]    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["\\+" , ["/Test#reaches" , ["/Test#vendingMachine"  ] , ["." , ["/Test#dime"  ] , ["." , ["/Test#dime"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#coffee"  ] , ["[]"  ]    ]    ]    ]    ]    ]   ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Test#reaches" , ["/Test#vendingMachine"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#quarter"  ] , ["." , ["/Test#soda"  ] , ["[]"  ]    ]    ]    ]    ]    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/bootstrap#localString" , "aa#bb" , "bb"    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/bootstrap#aliasString" , ["::" , ["/bootstrap#alias" , vars [1]  , vars [2]     ] , ["/bootstrap#statement"  ]    ] , "alias"    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/bootstrap#member" , [":-" , ["/bootstrap#member" , vars [1]  , ["/bootstrap#myStatementSet"  ] , ["/bootstrap#statement"  ]     ] , ["/bootstrap#member" , vars [1]  , ["/bootstrap#singleton" , ["/bootstrap#setDef" , vars [2]  , vars [3]  , vars [4]      ]   ] , ["/bootstrap#statement"  ]     ]    ] , ["/bootstrap#closure" , ["/bootstrap#setDef" , ["/bootstrap#myStatementSet"  ] , ["/bootstrap#singleton" , ["/bootstrap#setDef" , vars [5]  , vars [6]  , vars [7]      ]   ] , ["/bootstrap#statement"  ]     ]   ] , ["/bootstrap#statement"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/bootstrap#member" , ["/bootstrap#setDef" , ["/bootstrap#myStatementSet"  ] , ["/bootstrap#singleton" , ["/bootstrap#setDef" , vars [1]  , vars [2]  , vars [3]      ]   ] , ["/bootstrap#statement"  ]     ] , ["/bootstrap#closure" , ["/bootstrap#setDef" , ["/bootstrap#myStatementSet"  ] , ["/bootstrap#singleton" , ["/bootstrap#setDef" , vars [4]  , vars [5]  , vars [6]      ]   ] , ["/bootstrap#statement"  ]     ]   ] , ["/bootstrap#statement"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["\\+" , ["/bootstrap#member" , [":-" , ["/bootstrap#member" , vars [1]  , ["/bootstrap#myStatementSet"  ] , ["/bootstrap#statement"  ]     ] , ["/bootstrap#member" , vars [1]  , ["/bootstrap#singleton" , [":-" , vars [2]  , vars [3]     ]   ] , ["/bootstrap#statement"  ]     ]    ] , ["/bootstrap#closure" , ["/bootstrap#setDef" , ["/bootstrap#myStatementSet"  ] , ["/bootstrap#singleton" , ["/bootstrap#setDef" , vars [4]  , vars [5]  , vars [6]      ]   ] , ["/bootstrap#statement"  ]     ]   ] , ["/bootstrap#statement"  ]     ]   ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/bootstrap#forall" , ["/bootstrap#listMember" , vars [1]  , ["/bootstrap#number"  ] , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]     ] , ["builtin#greaterThen" , 4 , vars [1]     ]    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["\\+" , ["/bootstrap#forall" , ["/bootstrap#listMember" , vars [1]  , ["/bootstrap#number"  ] , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]     ] , ["builtin#greaterThen" , 3 , vars [1]     ]    ]   ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/bootstrap#listMember" , 1 , ["/bootstrap#number"  ] , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["builtin#true"  ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["\\+" , ["builtin#fail"  ]   ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/cedalionWeb/xml#generates2" , ["/cedalionWeb/ui#ul" , ["." , ["/cedalionWeb/xml#str" , "A"   ] , ["." , ["/cedalionWeb/xml#str" , "B"   ] , ["." , ["/cedalionWeb/xml#str" , "C"   ] , ["[]"  ]    ]    ]    ]   ] , "<ul><li>A</li><li>B</li><li>C</li> </ul>" , ["[]"  ] , ["[]"  ]      ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["/cedalionWeb/visualization#editable" , ["builtin#succ" , vars [1]  , vars [2]     ] , ["." , ["builtin#varName" , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , "X"    ] , ["." , ["builtin#varName" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , "Y"    ] , ["[]"  ]    ]    ] , {"get" : function () { 
     return [] ;  


}
  , "set" : function (__symbol3  ) { 
    // Empty
}
    }     ] , ["/bootstrap#pred"  ]    ]   ]   ] , vars [4]  , ["." , ["/cedalionWeb/jquery#uniqueName" , "abc-"   ] , ["[]"  ]    ] , vars [5]       ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/cedalionWeb/visualization#propagateDescriptor" , ["::" , ["/cedalionWeb/visualization#fastEdit" , ["builtin#succ" , 2 , 3    ] , "root/" , ["[]"  ] , ["[]"  ]      ] , ["/bootstrap#pred"  ]    ] , ["::" , ["builtin#succ" , ["/cedalionWeb/visualization#fastEdit" , 2 , "root/A" , ["[]"  ] , ["[]"  ]      ] , ["/cedalionWeb/visualization#fastEdit" , 3 , "root/B" , ["[]"  ] , ["[]"  ]      ]    ] , ["/bootstrap#pred"  ]    ] , ["[]"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["/cedalionWeb/visualization#fastEdit" , ["builtin#succ" , 2 , 3    ] , "root#" , ["[]"  ] , ["[]"  ]      ] , ["/bootstrap#pred"  ]    ]   ]   ] , "<div class=\"vis-term\" id=\"abc#1\"><div class=\"vis-horiz\"><div class=\"vis-horiz-elem\"><div class=\"vis-term\" id=\"abc#2\">&#160;3&#160;</div></div><div class=\"vis-horiz-elem\">&#160;=&#160;</div><div class=\"vis-horiz-elem\"><div class=\"vis-term\" id=\"abc#3\">&#160;2&#160;</div></div><div class=\"vis-horiz-elem\">&#160;+1&#160;</div></div></div>" , ["." , ["/cedalionWeb/jquery#uniqueName" , "abc#"   ] , ["[]"  ]    ] , ["." , ["/cedalionWeb/jquery#runAfterGen" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [$ (("#" + logic . concreteTerm  (terms [0]  , []   )  )  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : ["abc#3" , ["/cedalionWeb/visualization#bind" , ["::" , ["/cedalionWeb/visualization#fastEdit" , 2 , "root#A" , ["[]"  ] , ["[]"  ]      ] , ["/bootstrap#number"  ]    ] , vars [1]  , ["cpi#default"  ]     ] , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["::" , {"expr" : 0   } , ["/cedalionWeb/visualization#jQueryElem"  ]    ]    ] , {"expr" : 1   }    ]    ]    }  )    ] , ["." , ["/cedalionWeb/jquery#runAfterGen" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [$ (("#" + logic . concreteTerm  (terms [0]  , []   )  )  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : ["abc#2" , ["/cedalionWeb/visualization#bind" , ["::" , ["/cedalionWeb/visualization#fastEdit" , 3 , "root#B" , ["[]"  ] , ["[]"  ]      ] , ["/bootstrap#number"  ]    ] , vars [2]  , ["cpi#default"  ]     ] , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [2]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["::" , {"expr" : 0   } , ["/cedalionWeb/visualization#jQueryElem"  ]    ]    ] , {"expr" : 1   }    ]    ]    }  )    ] , ["." , ["/cedalionWeb/jquery#runAfterGen" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [$ (("#" + logic . concreteTerm  (terms [0]  , []   )  )  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : ["abc#1" , ["/cedalionWeb/visualization#bind" , ["::" , ["/cedalionWeb/visualization#fastEdit" , ["builtin#succ" , 2 , 3    ] , "root#" , ["[]"  ] , ["[]"  ]      ] , ["/bootstrap#pred"  ]    ] , vars [2]  , ["cpi#default"  ]     ] , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [2]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["::" , {"expr" : 0   } , ["/cedalionWeb/visualization#jQueryElem"  ]    ]    ] , {"expr" : 1   }    ]    ]    }  )    ] , ["." , ["/cedalionWeb/jquery#uniqueName" , "abc#"   ] , ["[]"  ]    ]    ]    ]    ]      ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#raised" , ["/bootstrap#lineBorder" , ["/bootstrap#lowered" , ["/bootstrap#background" , ["/bootstrap#vert" , ["." , ["/bootstrap#color" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Hello"   ] , ["." , ["/bootstrap#label" , "World"   ] , ["[]"  ]    ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#color" , ["/bootstrap#symbol" , 8607   ] , ["cpi#rgb" , 150 , 150 , 0     ]    ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "mondi"   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , "Bold"   ]   ] , ["." , ["/bootstrap#italic" , ["/bootstrap#label" , "Italic"   ]   ] , ["." , ["/bootstrap#smaller" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "smaller"   ] , ["." , ["/bootstrap#smaller" , ["/bootstrap#label" , "even smaller"   ]   ] , ["[]"  ]    ]    ]   ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["cpi#rgb" , 150 , 150 , 255     ]    ]   ] , 3 , ["cpi#rgb" , 0 , 0 , 255     ]     ]   ]   ] , vars [1]  , ["[]"  ] , vars [2]       ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [1]  , ["." , ["builtin#varName" , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , "A"    ] , ["." , ["builtin#varName" , ["::" , vars [2]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , "B"    ] , ["." , ["builtin#varName" , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , "V"    ] , ["." , ["builtin#varName" , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , "APrime"    ] , ["." , ["builtin#varName" , ["::" , vars [5]  , ["/bootstrap#number"  ]    ] , "BPrime"    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ]   ]   ] , vars [6]  , ["." , ["/cedalionWeb/jquery#uniqueName" , "abc-"   ] , ["[]"  ]    ] , vars [7]       ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (17  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , ["builtin#succ" , vars [1]  , 2    ] , ["." , ["builtin#varName" , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , "Y"    ] , ["." , ["builtin#varName" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , "X"    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#pred"  ]    ]   ]   ] , "<div class=\"vis-term\" id=\"abc-1\"><div class=\"vis-horiz\"><div class=\"vis-horiz-elem\"><div class=\"vis-term\" id=\"abc-1\">&#160;2&#160;</div></div><div class=\"vis-horiz-elem\">&#160;=&#160;</div><div class=\"vis-horiz-elem\"><div class=\"vis-term\" id=\"abc-2\"><div class=\"vis-italic\"><div class=\"vis-color\" style=\"color: rgb(0, 128, 0)\">&#160;_&#160;</div></div></div></div><div class=\"vis-horiz-elem\">&#160;+1&#160;</div></div></div>" , ["." , ["/cedalionWeb/jquery#uniqueName" , "abc-"   ] , ["[]"  ]    ] , ["." , ["/cedalionWeb/jquery#uniqueName" , "abc-"   ] , ["." , ["/cedalionWeb/jquery#runAfterGen" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [$ (("#" + logic . concreteTerm  (terms [0]  , []   )  )  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : ["abc-1" , ["/cedalionWeb/visualization#bind" , ["::" , ["cpi#immediateDescriptor" , 2 , ["." , ["builtin#varName" , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , "Y"    ] , ["." , ["builtin#varName" , ["::" , vars [5]  , ["/bootstrap#number"  ]    ] , "X"    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#number"  ]    ] , vars [6]  , ["cpi#default"  ]     ] , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [3]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["::" , {"expr" : 0   } , ["/cedalionWeb/visualization#jQueryElem"  ]    ]    ] , {"expr" : 1   }    ]    ]    }  )    ] , ["." , ["/cedalionWeb/jquery#runAfterGen" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [$ (("#" + logic . concreteTerm  (terms [0]  , []   )  )  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : ["abc-2" , ["/cedalionWeb/visualization#bind" , ["::" , ["cpi#immediateDescriptor" , vars [8]  , ["." , ["builtin#varName" , ["::" , vars [9]  , ["/bootstrap#number"  ]    ] , "Y"    ] , ["." , ["builtin#varName" , ["::" , vars [10]  , ["/bootstrap#number"  ]    ] , "X"    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#number"  ]    ] , vars [11]  , ["cpi#default"  ]     ] , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [7]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["::" , {"expr" : 0   } , ["/cedalionWeb/visualization#jQueryElem"  ]    ]    ] , {"expr" : 1   }    ]    ]    }  )    ] , ["." , ["/cedalionWeb/jquery#runAfterGen" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [$ (("#" + logic . concreteTerm  (terms [0]  , []   )  )  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : ["abc-1" , ["/cedalionWeb/visualization#bind" , ["::" , ["cpi#immediateDescriptor" , ["builtin#succ" , vars [13]  , 2    ] , ["." , ["builtin#varName" , ["::" , vars [14]  , ["/bootstrap#number"  ]    ] , "Y"    ] , ["." , ["builtin#varName" , ["::" , vars [15]  , ["/bootstrap#number"  ]    ] , "X"    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#pred"  ]    ] , vars [16]  , ["cpi#default"  ]     ] , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [12]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["::" , {"expr" : 0   } , ["/cedalionWeb/visualization#jQueryElem"  ]    ]    ] , {"expr" : 1   }    ]    ]    }  )    ] , ["[]"  ]    ]    ]    ]    ]      ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/cedalionWeb/visualization#varName" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["builtin#varName" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , "X"    ] , ["." , ["builtin#varName" , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , "Y"    ] , ["." , ["builtin#varName" , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , "Z"    ] , ["[]"  ]    ]    ]    ] , "Y"     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Hello"   ] , ["." , ["/bootstrap#label" , "World"   ] , ["[]"  ]    ]    ]   ]   ] , "<div class=\"vis-horiz\"><div class=\"vis-horiz-elem\">&#160;Hello&#160;</div><div class=\"vis-horiz-elem\">&#160;World&#160;</div></div>" , ["[]"  ] , ["[]"  ]      ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#xmlList" , ["." , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "a"   ] , ["[]"  ] , ["/cedalionWeb/xml#empty"  ]     ] , ["." , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "b"   ] , ["[]"  ] , ["/cedalionWeb/xml#empty"  ]     ] , ["[]"  ]    ]    ]   ] , "<a></a><b></b>" , ["[]"  ] , ["[]"  ]      ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/cedalionWeb/xml#xmlEncode" , ["/Functional#const" , "XXX"   ]   ] , ["/bootstrap#string"  ] , "XXX"     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "myClass"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , "myID"   ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#str" , "Hello"   ]     ] , "<div class=\"myClass\" id=\"myID\">Hello</div>" , ["[]"  ] , ["[]"  ]      ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 123   ]   ] , "&#123;" , ["[]"  ] , ["[]"  ]      ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/bootstrap#listMember" , vars [1]  , ["/bootstrap#number"  ] , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["builtin#greaterThen" , 4 , 1    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["builtin#greaterThen" , 4 , 2    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["builtin#greaterThen" , 4 , 3    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/html#asHexString" , ["/Functional#wrap" , 192   ]   ] , ["/bootstrap#string"  ] , "C0"     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/html#toText" , ["::" , ["xml#element" , "someXML" , ["." , ["xml#attribute" , "name" , ["/bootstrap#string"  ] , "boaz"     ] , ["." , ["xml#attribute" , "age" , ["/bootstrap#number"  ] , 37     ] , ["[]"  ]    ]    ] , ["." , ["/html#unicode" , 3333   ] , ["." , ["xml#string" , "hello"   ] , ["[]"  ]    ]    ]     ] , ["/html#xml"  ]    ]   ] , ["/bootstrap#string"  ] , "<someXML name=\"boaz\" age=\"37\" >&#3333;hello</someXML>"     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/html#toText" , ["::" , ["." , ["xml#string" , "hello"   ] , ["[]"  ]    ] , ["/bootstrap#list" , ["/html#xml"  ]   ]    ]   ] , ["/bootstrap#string"  ] , "hello"     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/html#toText" , ["::" , ["." , ["xml#string" , "<hello & \"world\">"   ] , ["[]"  ]    ] , ["/bootstrap#list" , ["/html#xml"  ]   ]    ]   ] , ["/bootstrap#string"  ] , "&lt;hello &amp; &quot;world&quot;&gt;"     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/javascript/jsLogic#clauseFunction" , [":-" , ["/Functional#eval" , ["/Functional#minus" , vars [1]  , vars [2]     ] , ["/bootstrap#number"  ] , vars [3]      ] , ["," , ["/Functional#eval" , vars [1]  , ["/bootstrap#number"  ] , vars [4]      ] , ["," , ["/Functional#eval" , vars [2]  , ["/bootstrap#number"  ] , vars [5]      ] , ["builtin#minus" , vars [4]  , vars [5]  , vars [3]      ]    ]    ]    ]   ] , ["/javascript#expr"  ] , vars [6]      ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/javascript/jsLogic#length" , ["." , 2 , ["." , 3 , ["." , 5 , ["[]"  ]    ]    ]    ] , 3    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/javascript/jsLogic#predicateID" , ["/Functional#wrap" , ["/javascript/jsLogic#bodyIncludesGoal" , ["builtin#if" , vars [1]  , vars [2]  , vars [3]      ] , vars [4]     ]   ]   ] , ["/javascript/jsLogic#predicateID"  ] , ["/javascript/jsLogic#pred" , "/javascript/jsLogic#bodyIncludesGoal" , 2    ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/Functional#eval" , ["/javascript/jsLogic#jsTerm" , ["::" , ["/Functional#eval" , ["/Functional#applyBinOp" , ["/Functional#wrap" , 1   ] , ["/Functional#numPlus"  ] , ["/Functional#wrap" , 1   ]     ] , ["/bootstrap#number"  ] , 2     ] , ["/bootstrap#pred"  ]    ]   ] , ["/javascript#expr"  ] , ["/javascript#array" , ["." , ["/javascript#str" , "/Functional#eval"   ] , ["." , ["/javascript#array" , ["." , ["/javascript#str" , "/Functional#applyBinOp"   ] , ["." , ["/javascript#array" , ["." , ["/javascript#str" , "/Functional#wrap"   ] , ["." , ["/javascript#const" , 1   ] , ["[]"  ]    ]    ]   ] , ["." , ["/javascript#array" , ["." , ["/javascript#str" , "/Functional#numPlus"   ] , ["[]"  ]    ]   ] , ["." , ["/javascript#array" , ["." , ["/javascript#str" , "/Functional#wrap"   ] , ["." , ["/javascript#const" , 1   ] , ["[]"  ]    ]    ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , ["." , ["/javascript#array" , ["." , ["/javascript#str" , "/bootstrap#number"   ] , ["[]"  ]    ]   ] , ["." , ["/javascript#const" , 2   ] , ["[]"  ]    ]    ]    ]    ]   ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/javascript/optimization#concatGoals" , ["," , ["builtin#true"  ] , vars [1]     ] , ["," , ["builtin#fail"  ] , vars [2]     ] , ["," , ["builtin#true"  ] , ["," , vars [1]  , ["," , ["builtin#fail"  ] , vars [2]     ]    ]    ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/javascript/optimization#concatGoals" , ["builtin#true"  ] , ["," , ["builtin#fail"  ] , ["builtin#fail"  ]    ] , ["," , ["builtin#true"  ] , ["," , ["builtin#fail"  ] , ["builtin#fail"  ]    ]    ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/javascript/optimization#removeTrivial" , ["," , ["builtin#true"  ] , ["," , ["builtin#fail"  ] , ["," , ["builtin#true"  ] , ["builtin#fail"  ]    ]    ]    ] , ["," , ["builtin#fail"  ] , ["builtin#fail"  ]    ]    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/javascript/optimization#removeTrivial" , ["," , vars [1]  , ["," , ["builtin#true"  ] , vars [2]     ]    ] , ["," , vars [1]  , vars [2]     ]    ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/javascript/optimization#partialEval" , ["/bootstrap#member" , vars [1]  , ["/Functional#eset" , vars [2]  , vars [3]     ] , ["/bootstrap#number"  ]     ] , ["," , vars [3]  , ["/Functional#eval" , vars [2]  , ["/bootstrap#number"  ] , vars [1]      ]    ] , ["/javascript/jsLogic#allClauses"  ] , 2      ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/javascript/optimization#isBuiltin" , ["builtin#succ" , vars [1]  , vars [2]     ]   ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["\\+" , ["/javascript/optimization#isBuiltin" , ["/javascript/optimization#isBuiltin" , ["builtin#succ" , vars [1]  , vars [2]     ]   ]   ]   ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/bootstrap#member" , [":-" , ["/javascript/optimization#a" , vars [1]    ] , ["," , ["builtin#plus" , 1 , 2 , vars [2]      ] , ["builtin#plus" , vars [2]  , 3 , vars [1]      ]    ]    ] , ["/javascript/optimization#partialEvalClauses" , ["/javascript/optimization#testStatements"  ]   ] , ["/bootstrap#statement"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#member"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#member" , vars [0]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#member" , vars [0]  , ["/bootstrap#singleton" , ["/javascript/statepred#pred" , ["/bootstrap#member" , [":-" , ["/Functional#eval" , ["/Functional#switch" , vars [1]  , vars [2]  , vars [3]      ] , vars [4]  , vars [5]      ] , vars [6]     ] , ["/javascript/optimization#optAllClauses"  ] , ["/bootstrap#statement"  ]     ]   ]   ] , ["/javascript/statepred#statePred"  ]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Minimize comment" , ["::" , ["annotation#comment" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#minComment" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Restore comment" , ["::" , ["annotation#minComment" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#comment" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Remove annotation" , vars [0]  , vars [1]  , vars [2]  , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [1]  , vars [3]  , vars [2]      ]   ] , ["," , ["\\+" , ["builtin#var" , vars [0]    ]   ] , ["," , ["/bootstrap#safeParseTerm" , vars [0]  , vars [4]  , ["." , vars [3]  , vars [5]     ]     ] , ["builtin#strcat" , "annotation#" , vars [6]  , vars [4]      ]    ]    ]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Undo" , vars [0]  , ["cpi#path" , vars [1]  , vars [2]     ] , vars [3]  , ["cpi#undo" , vars [1]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Redo" , vars [0]  , ["cpi#path" , vars [1]  , vars [2]     ] , vars [3]  , ["/bootstrap#redo" , vars [1]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Cut" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["/bootstrap#cut" , ["." , vars [0]  , vars [1]     ] , vars [2]  , vars [4]  , vars [3]       ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Paste" , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , vars [2]  , vars [3]  , ["/bootstrap#paste" , vars [0]  , vars [1]  , vars [3]  , vars [2]       ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Show Definitions" , vars [0]  , vars [1]  , vars [2]  , ["/bootstrap#doShowDefinitions" , vars [0]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Insert" , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["." , vars [4]  , vars [0]     ] , ["/bootstrap#list" , vars [1]    ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Append" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["." , vars [0]  , ["." , vars [5]  , vars [1]     ]    ] , ["/bootstrap#list" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Delete" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , vars [1]  , ["/bootstrap#list" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Insert Case" , ["::" , vars [0]  , ["/Functional#cases" , vars [1]  , vars [2]     ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["/Functional#case" , vars [5]  , vars [6]  , vars [0]      ] , ["/Functional#cases" , vars [1]  , vars [2]     ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Remove Case" , ["::" , ["/Functional#case" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#cases" , vars [3]  , vars [4]     ]    ] , vars [5]  , vars [6]  , ["cpi#edit" , vars [5]  , ["::" , vars [2]  , ["/Functional#cases" , vars [3]  , vars [4]     ]    ] , vars [6]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Convert Wrap to Const" , ["::" , ["/Functional#wrap" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , vars [2]  , vars [3]  , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [2]  , ["::" , vars [4]  , ["/Functional#expr" , vars [1]    ]    ] , vars [5]      ]   ] , ["/Functional#wrapToConst" , ["/Functional#wrap" , vars [0]    ] , vars [4]  , vars [1]  , vars [3]  , vars [5]  , 1 , vars [6]          ]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Evaluate" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , vars [2]  , vars [3]  , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [2]  , ["::" , ["/Functional#wrap" , vars [4]    ] , ["/Functional#expr" , vars [1]    ]    ] , vars [3]      ]   ] , ["/Functional#eval" , vars [0]  , vars [1]  , vars [4]      ]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Turn to unit test" , ["::" , ["/bootstrap#sandbox" , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["/bootstrap#unitTest" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [4]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Insert Expression" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , ["/Functional#insertExpression" , vars [2]  , vars [1]     ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Generate XML File" , ["::" , vars [0]  , ["/html#xml"  ]    ] , vars [1]  , vars [2]  , ["/Functional#generateXMLFile" , "gen.xml" , vars [0]     ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Say Hello" , vars [0]  , vars [1]  , vars [2]  , ["/Test#sayHelloTo" , vars [0]  , vars [2]     ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Show all signatures for namespace" , vars [0]  , vars [1]  , vars [2]  , ["/Test#showAllSignaturesForNamespace" , vars [0]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Split here" , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [1]  , vars [2]  , ["/Test#splitStatementList" , vars [0]  , vars [2]  , vars [1]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Show numbered" , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , vars [2]  , vars [3]  , ["/Test#showNumbered" , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , vars [2]  , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Show in view" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , ["/bootstrap#where" , ["/bootstrap#showView" , ["cpi#vis" , ["::" , ["cpi#descriptor" , vars [2]  , vars [0]  , ["[]"  ]     ] , vars [1]     ] , ["/bootstrap#vert"  ]    ]   ] , ["builtin#true"  ]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , vars [0]  , ["::" , vars [1]  , ["/Test#state"  ]    ] , vars [2]  , vars [3]  , ["/Test#changeState" , vars [1]  , vars [0]  , vars [3]  , vars [2]       ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Create an alias" , ["::" , ["." , ["/bootstrap#signature" , vars [0]  , ["[]"  ]    ] , vars [1]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["." , ["/bootstrap#signature" , vars [0]  , ["[]"  ]    ] , ["." , ["/bootstrap#projection" , vars [0]  , ["/bootstrap#label" , "alias"   ]    ] , vars [1]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Define projection" , ["::" , ["." , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["." , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["." , ["/bootstrap#projection" , vars [0]  , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [2]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Set alignment" , ["::" , ["/bootstrap#horiz" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["/bootstrap#horiz" , vars [0]  , ["cpi#top"  ]    ] , ["/bootstrap#visualization"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Change projection mode" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#changeMode" , vars [0]  , ["cpi#default"  ]    ] , vars [1]     ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Display horizontally" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#changeMode" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#horiz"  ]    ] , ["/bootstrap#list" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Display vertically" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#changeMode" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#vert"  ]    ] , ["/bootstrap#list" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Define Projection" , ["::" , ["." , ["/bootstrap#defAtom" , vars [0]    ] , vars [1]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["." , ["/bootstrap#defAtom" , vars [0]    ] , ["." , ["/bootstrap#projection" , vars [0]  , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [1]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Add Icon" , ["::" , ["/bootstrap#contextMenuEntry" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#statement"  ]    ] , vars [5]  , vars [6]  , ["cpi#edit" , vars [5]  , ["::" , ["/bootstrap#contextMenuEntry" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [7]         ] , ["/bootstrap#statement"  ]    ] , vars [6]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Disable" , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["/bootstrap#disabled" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Enable" , ["::" , ["/bootstrap#disabled" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Add Description" , ["::" , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["/bootstrap#doc" , vars [4]  , ["/bootstrap#signature" , vars [0]  , vars [1]     ]    ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Export Cedalion Program" , ["::" , ["[]"  ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [0]  , vars [1]  , ["/bootstrap#exportCedalionProgram"  ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Unify signature and projection" , ["::" , ["." , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["." , ["/bootstrap#projection" , vars [0]  , vars [2]     ] , vars [3]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["." , ["/bootstrap#sigProj" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Split definitions" , ["::" , ["." , ["/bootstrap#sigProj" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["." , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["." , ["/bootstrap#projection" , vars [0]  , vars [2]     ] , vars [3]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Unify signature and projection" , ["::" , ["." , ["/bootstrap#defAtom" , vars [0]    ] , ["." , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , vars [2]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["." , ["/bootstrap#sigProjAtom" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Split definitions" , ["::" , ["." , ["/bootstrap#sigProjAtom" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["." , ["/bootstrap#defAtom" , vars [0]    ] , ["." , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , vars [2]     ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , vars [0]  , ["::" , ["/bootstrap#symbol" , vars [1]    ] , ["/bootstrap#visualization"  ]    ] , vars [2]  , vars [3]  , ["/bootstrap#showSymbols" , vars [0]  , vars [2]     ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Create brackets" , ["::" , ["." , ["/bootstrap#symbol" , vars [0]    ] , ["." , vars [1]  , ["." , ["/bootstrap#symbol" , vars [2]    ] , vars [3]     ]    ]    ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["." , ["/bootstrap#brackets" , vars [1]  , vars [0]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Split brackets" , ["::" , ["." , ["/bootstrap#brackets" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["." , ["/bootstrap#symbol" , vars [1]    ] , ["." , vars [0]  , ["." , ["/bootstrap#symbol" , vars [2]    ] , vars [3]     ]    ]    ] , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Show tree" , vars [0]  , vars [1]  , vars [2]  , ["/bootstrap#showTree" , vars [0]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Show all Failed Tests" , ["::" , ["/bootstrap#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["/bootstrap#showFailedTests"  ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Define Variable Name Macro" , vars [0]  , vars [1]  , ["." , ["builtin#varName" , vars [2]  , vars [3]     ] , ["[]"  ]    ] , ["/bootstrap#insertStatement" , ["/bootstrap#varNameMacroStatement" , vars [3]  , ["/bootstrap#symbol" , vars [4]    ]    ] , vars [1]  , ["[]"  ]     ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Add delay" , ["::" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["/cedalionWeb/jquery#onDelayed" , vars [1]  , vars [2]  , vars [0]  , 200 , vars [3]        ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Add event instance" , ["::" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [5]  , vars [2]       ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Insert" , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["/cedalionWeb/xml#list" , vars [3]  , vars [0]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Append" , ["::" , ["/cedalionWeb/xml#list" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["/cedalionWeb/xml#list" , vars [0]  , ["/cedalionWeb/xml#list" , vars [4]  , vars [1]     ]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Delete" , ["::" , ["/cedalionWeb/xml#list" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Create sub-tests" , ["::" , ["." , ["/bootstrap#unitTest" , vars [0]    ] , vars [1]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [2]  , vars [3]  , ["/debugging#createSubTests" , vars [0]  , vars [1]  , vars [3]  , vars [2]       ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Apply first goal" , ["::" , ["." , ["/bootstrap#unitTest" , vars [0]    ] , vars [1]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [2]  , vars [3]  , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [2]  , ["::" , ["." , ["/bootstrap#unitTest" , vars [4]    ] , vars [5]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [6]      ]   ] , ["," , ["=" , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["::" , ["," , vars [4]  , vars [7]     ] , ["/bootstrap#pred"  ]    ]    ] , ["," , ["builtin#findall" , ["/bootstrap#unitTest" , vars [7]    ] , ["/bootstrap#statement"  ] , vars [4]  , vars [8]       ] , ["," , ["/bootstrap#append" , vars [8]  , vars [1]  , vars [5]  , ["/bootstrap#statement"  ]      ] , ["/debugging#completeVarNames" , ["::" , ["." , ["/bootstrap#unitTest" , vars [4]    ] , vars [5]     ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [3]  , vars [6]      ]    ]    ]    ]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Show XML" , ["::" , vars [0]  , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [1]  , vars [2]  , ["/html#showXml" , vars [0]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Evaluate" , ["::" , vars [0]  , ["/javascript/ajax#ajaxExpr" , vars [1]    ]    ] , vars [2]  , vars [3]  , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [2]  , ["::" , ["/javascript/ajax#ajaxExpr" , vars [4]  , vars [5]     ] , ["/javascript/ajax#ajaxExpr" , vars [1]    ]    ] , vars [3]      ]   ] , ["cjs#ajaxEval" , vars [0]  , vars [1]  , vars [4]  , vars [5]       ]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Evaluate Fully" , ["::" , vars [0]  , ["/javascript/ajax#ajaxExpr" , vars [1]    ]    ] , vars [2]  , vars [3]  , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [2]  , ["::" , ["/javascript/ajax#ajaxExpr" , ["/Functional#const" , vars [4]    ] , ["[]"  ]    ] , ["/javascript/ajax#ajaxExpr" , vars [1]    ]    ] , vars [3]      ]   ] , ["," , ["cjs#ajaxEval" , vars [0]  , vars [1]  , vars [5]  , ["[]"  ]      ] , ["/Functional#eval" , vars [5]  , vars [1]  , vars [4]      ]    ]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "To String" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , ["[]"  ] , ["/bootstrap#where" , ["/bootstrap#doProc" , ["/bootstrap#showInView" , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]   ] , ["/Functional#eval" , ["/javascript#toString" , ["::" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#string"  ] , vars [3]      ]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Generate Javascript Code" , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , vars [1]  , vars [2]  , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , vars [0]    ]   ]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Generate raw clauses" , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , vars [1]  , vars [2]  , ["/javascript/jsLogic#writeClauses" , vars [0]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Generate Javascript Code for the Entire Program" , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [1]  , vars [2]  , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , ["/javascript/jsLogic#allClauses"  ]   ]   ]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Swap places" , ["::" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript#expr"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["/javascript#op" , vars [2]  , vars [1]  , vars [0]      ] , ["/javascript#expr"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Generate javascript for the entire program (optimized)" , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , vars [1]  , vars [2]  , ["/bootstrap#generateFileForSet" , "cedalion.js" , ["/javascript/jsLogic#jsStatementStrings" , ["/javascript/jsLogic#jsStatementsForClauses" , ["/javascript/optimization#optAllClauses"  ]   ]   ]    ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Add finally clause" , ["::" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : []    }  )      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#unitTest" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/xml#elem" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#elem" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#function" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript#function" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/Functional#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#applyBinOpList" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/Functional#applyBinOpList" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#applyBinOpListScalar" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/Functional#applyBinOpListScalar" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#reduce" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Functional#reduce" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#valueApplyBinOp" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]  , ["cpi#edit" , vars [5]  , ["::" , ["annotation#shrink" , ["/Functional#valueApplyBinOp" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ]   ] , ["/bootstrap#pred"  ]    ] , vars [6]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#otherwise" , vars [0]    ] , ["/Functional#cases" , vars [1]  , vars [2]     ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Functional#otherwise" , vars [0]    ]   ] , ["/Functional#cases" , vars [1]  , vars [2]     ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#eq" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Functional#eq" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["builtin#greaterThen" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["builtin#greaterThen" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#gt" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Functional#gt" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#ge" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Functional#ge" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#minus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Functional#minus" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#mult" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Functional#mult" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#idiv" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Functional#idiv" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#modulus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Functional#modulus" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#def" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Functional#def" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#func" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Functional#func" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#type"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#lambda" , vars [0]  , vars [1]     ] , ["/Functional#func" , vars [2]  , vars [3]     ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/Functional#lambda" , vars [0]  , vars [1]     ]   ] , ["/Functional#func" , vars [2]  , vars [3]     ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#apply" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/Functional#apply" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Functional#expr" , vars [3]    ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#pairType" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Functional#pairType" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#type"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#pair" , vars [0]  , vars [1]     ] , ["/Functional#pairType" , vars [2]  , vars [3]     ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/Functional#pair" , vars [0]  , vars [1]     ]   ] , ["/Functional#pairType" , vars [2]  , vars [3]     ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#plus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Functional#plus" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#element" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Functional#element" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#constSeq" , vars [0]    ] , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Functional#constSeq" , vars [0]    ]   ] , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#concat" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Functional#concat" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Functional#where" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Functional#where" , vars [0]  , vars [1]     ]   ] , ["/Functional#expr" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#f" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test#f" , vars [0]    ]   ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test/bnf#token" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test/bnf#token" , vars [0]    ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test/bnf#concat" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test/bnf#concat" , vars [0]  , vars [1]     ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test/bnf#prod" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test/bnf#prod" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test/bnf#parse" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Test/bnf#parse" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test/bnf#symbol" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test/bnf#symbol" , vars [0]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test/bnf#trainQuery" , vars [0]  , vars [1]     ] , ["/Test/bnf#trainQuery"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test/bnf#trainQuery" , vars [0]  , vars [1]     ]   ] , ["/Test/bnf#trainQuery"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test/bnf#fromTo" , vars [0]  , vars [1]     ] , ["/Test/bnf#routeQueryType"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test/bnf#fromTo" , vars [0]  , vars [1]     ]   ] , ["/Test/bnf#routeQueryType"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test/bnf#onDate" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test/bnf#timeQueryType"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Test/bnf#onDate" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Test/bnf#timeQueryType"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test/bnf#word" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test/bnf#word" , vars [0]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test/bnf#location" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test/bnf#location" , vars [0]    ]   ] , ["/Test/bnf#token"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#evaluatesTo" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#evaluatesTo" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#final" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test#final" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#finallyEvaluatesTo" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#finallyEvaluatesTo" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#and" , vars [0]  , vars [1]     ] , ["/Test#boolean"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#and" , vars [0]  , vars [1]     ]   ] , ["/Test#boolean"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#or" , vars [0]  , vars [1]     ] , ["/Test#boolean"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#or" , vars [0]  , vars [1]     ]   ] , ["/Test#boolean"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#not" , vars [0]    ] , ["/Test#boolean"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test#not" , vars [0]    ]   ] , ["/Test#boolean"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#trans" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Test#trans" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#prefix" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#prefix" , vars [0]  , vars [1]     ]   ] , ["/Test#process"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#alt" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#alt" , vars [0]  , vars [1]     ]   ] , ["/Test#process"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#procDef" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#procDef" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#reaches" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#reaches" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#cond" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#cond" , vars [0]  , vars [1]     ]   ] , ["/Test#process"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#costs" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#costs" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#worths" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#worths" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#sayHelloTo" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#sayHelloTo" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#statements" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test#statements" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#e" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#e" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#p" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#p" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#time" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test#eventTime"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Test#time" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/Test#eventTime"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#pavilion" , vars [0]    ] , ["/Test#location"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test#pavilion" , vars [0]    ]   ] , ["/Test#location"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#galleria" , vars [0]    ] , ["/Test#location"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test#galleria" , vars [0]    ]   ] , ["/Test#location"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#visitUsAt" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test#visitUsAt" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#subState" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test#subState" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#initialState" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test#initialState" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#transition" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/Test#transition" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#hello" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/Test#hello" , vars [0]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#adapter" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#adapter" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#alias" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#alias" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["annotation#changeMode" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["annotation#changeMode" , vars [0]  , vars [1]     ]   ] , vars [2]     ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#defAtom" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#defAtom" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#default" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#default" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#projection" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["~>" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["~>" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#typedTerm"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["::" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#typedTerm"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , [":-" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , [":-" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#signature" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#or" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#or" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#generateFileForSet" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#generateFileForSet" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#requires" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#requires" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#missing" , vars [0]    ] , ["/bootstrap#error"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#missing" , vars [0]    ]   ] , ["/bootstrap#error"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#defines" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#defines" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#deprecated" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#deprecated" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#deprecationReplacement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#deprecationReplacement" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["cpi#path" , vars [0]  , vars [1]     ] , ["cpi#path"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["cpi#path" , vars [0]  , vars [1]     ]   ] , ["cpi#path"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["builtin#succ" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["builtin#succ" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , [">" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , [">" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["=" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["=" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["+" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["+" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["-" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["-" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["cpi#constExpr" , vars [0]    ] , ["/bootstrap#expr" , vars [1]    ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["cpi#constExpr" , vars [0]    ]   ] , ["/bootstrap#expr" , vars [1]    ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["builtin#equals" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["builtin#equals" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["builtin#import" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["builtin#import" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#forall" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#forall" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#listMember" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#listMember" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["cpi#func" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["cpi#func" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#procedure"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#doAll" , vars [0]    ] , ["/bootstrap#command"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#doAll" , vars [0]    ]   ] , ["/bootstrap#command"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#assign" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#assign" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#command"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#doProc" , vars [0]    ] , ["/bootstrap#command"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#doProc" , vars [0]    ]   ] , ["/bootstrap#command"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#where" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#where" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#foreach" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#foreach" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#procedure"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["builtin#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["builtin#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#projection" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#member" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#member" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#setDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#setDef" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#union" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#union" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#set" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#intersect" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#intersect" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#set" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#diffSet" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#diffSet" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#set" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#notMember" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#notMember" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#shortcutKey" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#shortcutKey" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#signaturePlaceMismatch" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#signaturePlaceMismatch" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#error"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#nonVarInSignature" , vars [0]    ] , ["/bootstrap#error"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#nonVarInSignature" , vars [0]    ]   ] , ["/bootstrap#error"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [0]    ] , ["/bootstrap#error"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [0]    ]   ] , ["/bootstrap#error"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#symbolRange" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#symbolRange" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#tip" , vars [0]    ] , ["/bootstrap#marker"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#tip" , vars [0]    ]   ] , ["/bootstrap#marker"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#tip" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/bootstrap#tip" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#statement"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#true" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#true" , vars [0]    ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#missingSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#missingSignature" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#error"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#unitTest" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["\\+" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["\\+" , vars [0]    ]   ] , ["/bootstrap#pred"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#failedTest" , vars [0]    ] , ["/bootstrap#error"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#failedTest" , vars [0]    ]   ] , ["/bootstrap#error"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#insertStatement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#insertStatement" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#procedure"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["cpi#vis" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["cpi#vis" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#visualization"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#vert" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#vert" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#label" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#label" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#italic" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#italic" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#bold" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#bold" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#halfSize" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#halfSize" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#smaller" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#smaller" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#pivot" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#pivot" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#varNameMacroStatement" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/bootstrap#varNameMacroStatement" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#varNameSuffix" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/bootstrap#varNameSuffix" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#statePred"  ]    ] , vars [5]  , vars [6]  , ["cpi#edit" , vars [5]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [6]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["cjs#verifyDatabaseRev" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["cjs#verifyDatabaseRev" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/jquery#ajaxQuery" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#ajaxQuery" , vars [0]    ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/jquery#onServer" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#onServer" , vars [0]    ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/jquery#runAfterGen" , vars [0]    ] , ["/cedalionWeb/xml#annotation"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#runAfterGen" , vars [0]    ]   ] , ["/cedalionWeb/xml#annotation"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/jquery#changeContent" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#changeContent" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/jquery#applyAnnot" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#applyAnnot" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/jquery#modifyElement" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#modifyElement" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/jquery#replaceWith" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#replaceWith" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/jquery#prependTo" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#prependTo" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/jquery#appendTo" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/jquery#appendTo" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb#addKeyComponents" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb#addKeyComponents" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/node#get" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#get" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/node#json" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#json" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/node#dot" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#dot" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/node#jsonStringify" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#jsonStringify" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/node#arrayElement" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#arrayElement" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/node#urlQuery" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#urlQuery" , vars [0]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ] , ["/cedalionWeb/node#queryArg"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ]   ] , ["/cedalionWeb/node#queryArg"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb#implies" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb#implies" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb#rewrite" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb#rewrite" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/ui#ul" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/ui#ul" , vars [0]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/visualization#editActionIcon" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#editActionIcon" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/visualization#suggestion" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#suggestion" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/visualization#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/visualization#defineModifier" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/visualization#defineModifier" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/xml#macro" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#macro" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attr"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ]   ] , ["/cedalionWeb/xml#attr"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/xml#str" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#str" , vars [0]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/xml#entity" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#entity" , vars [0]    ]   ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/xml#generates2" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#generates2" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/xml#attr2" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attribute"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/xml#attr2" , vars [0]  , vars [1]     ]   ] , ["/cedalionWeb/xml#attribute"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/html#entity" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/html#entity" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/html#paragraph" , vars [0]    ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/html#paragraph" , vars [0]    ]   ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["xml#attribute" , vars [0]  , vars [1]  , vars [2]      ] , ["/html#xmlAttr"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["xml#attribute" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/html#xmlAttr"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["xml#string" , vars [0]    ] , ["/html#xml"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["xml#string" , vars [0]    ]   ] , ["/html#xml"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/html#unicode" , vars [0]    ] , ["/html#xml"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/html#unicode" , vars [0]    ]   ] , ["/html#xml"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/ajax#ajaxDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/javascript/ajax#ajaxDef" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["cjs#ajaxEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["cjs#ajaxEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/ajax#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/javascript/ajax#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#arrayElement" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript#arrayElement" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#var" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript#var" , vars [0]  , vars [1]     ]   ] , ["/javascript#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#assign" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript#assign" , vars [0]  , vars [1]     ]   ] , ["/javascript#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/asyncproc#sync" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/javascript/asyncproc#sync" , vars [0]    ]   ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#new" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/javascript#new" , vars [0]    ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#hasSpecialRendering" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript#hasSpecialRendering" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#return" , vars [0]    ] , ["/javascript#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/javascript#return" , vars [0]    ]   ] , ["/javascript#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#call" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript#call" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#exprStatement" , vars [0]    ] , ["/javascript#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/javascript#exprStatement" , vars [0]    ]   ] , ["/javascript#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#return"  ] , ["/javascript#statement"  ]    ] , vars [0]  , vars [1]  , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#return"  ]   ] , ["/javascript#statement"  ]    ] , vars [1]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#equal" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript#equal" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/jsLogic#pred" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#predicateID"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#pred" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#predicateID"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/jsLogic#throw" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#throw" , vars [0]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/jsLogic#typeof" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#typeof" , vars [0]    ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/jsLogic#length" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#length" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#pred"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/jsLogic#do" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#do" , vars [0]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/jsLogic#renderHTML" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript/jsLogic#renderHTML" , vars [0]  , vars [1]     ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#bind" , vars [0]  , vars [1]     ] , ["/javascript#fieldAssignment"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript#bind" , vars [0]  , vars [1]     ]   ] , ["/javascript#fieldAssignment"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#dot" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript#dot" , vars [0]  , vars [1]     ]   ] , ["/javascript#expr"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript#expr"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript#expr"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/optimization#concatGoals" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/javascript/optimization#concatGoals" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#pred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#async" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#async" , vars [0]    ]   ] , ["/javascript#expr"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#clause" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#clause" , vars [0]  , vars [1]     ]   ] , ["/bootstrap#statement"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#jsFunction" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#jsFunction" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#pair" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [2]  , vars [3]     ]   ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#pair" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [2]  , vars [3]     ]   ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#setDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#setDef" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#stateEval" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateEval" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#stateExprDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#stateExprDef" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/bootstrap#statement"  ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#where" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , vars [3]  , vars [4]  , ["cpi#edit" , vars [3]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#where" , vars [0]  , vars [1]     ]   ] , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , vars [4]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#trace" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#trace" , vars [0]    ]   ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#tracePred" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#tracePred" , vars [0]    ]   ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript/statepred#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/javascript/statepred#unitTest" , vars [0]    ]   ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/javascript#break"  ] , ["/javascript#statement"  ]    ] , vars [0]  , vars [1]  , ["cpi#edit" , vars [0]  , ["::" , ["annotation#shrink" , ["/javascript#break"  ]   ] , ["/javascript#statement"  ]    ] , vars [1]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test/bnf#or" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["/Test/bnf#or" , vars [0]  , vars [1]     ]   ] , ["/Test/bnf#pattern"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/Test#event" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/Test#event" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#statement"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#append" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/bootstrap#append" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#error" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]  , ["cpi#edit" , vars [4]  , ["::" , ["annotation#shrink" , ["/bootstrap#error" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]   ] , ["/bootstrap#pred"  ]    ] , vars [5]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#raised" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#raised" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/bootstrap#lowered" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["annotation#shrink" , ["/bootstrap#lowered" , vars [0]    ]   ] , ["/bootstrap#visualization"  ]    ] , vars [2]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["/cedalionWeb/couchdb#viewResults" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [5]  , vars [6]  , ["cpi#edit" , vars [5]  , ["::" , ["annotation#shrink" , ["/cedalionWeb/couchdb#viewResults" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ]   ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [6]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#actionProc"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#actionProc" , "Shrink" , ["::" , ["cjs#get" , vars [0]  , vars [1]     ] , ["/javascript/ajax#request"  ]    ] , vars [2]  , vars [3]  , ["cpi#edit" , vars [2]  , ["::" , ["annotation#shrink" , ["cjs#get" , vars [0]  , vars [1]     ]   ] , ["/javascript/ajax#request"  ]    ] , vars [3]      ]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#shortcutKey" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#shortcutKey" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , "Shift+Alt+Ins" , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#actionProc" , "Insert" , vars [5]  , vars [0]  , vars [6]  , vars [4]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#shortcutKey" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#shortcutKey" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , "Alt+Ins" , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#actionProc" , "Append" , vars [5]  , vars [0]  , vars [6]  , vars [4]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#shortcutKey" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#shortcutKey" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , "Shift+Alt+Del" , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#actionProc" , "Delete" , vars [5]  , vars [0]  , vars [6]  , vars [4]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#shortcutKey" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#shortcutKey" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , "Ctrl+Alt+V" , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#actionProc" , "Paste" , vars [5]  , vars [0]  , vars [6]  , vars [4]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#shortcutKey" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#shortcutKey" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , "F8" , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#actionProc" , "Show Definitions" , vars [5]  , vars [0]  , vars [6]  , vars [4]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#shortcutKey" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#shortcutKey" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , "Ctrl+Alt+Z" , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#actionProc" , "Undo" , vars [5]  , vars [0]  , vars [6]  , vars [4]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#shortcutKey" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#shortcutKey" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , "Ctrl+Shift+Alt+Z" , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#actionProc" , "Redo" , vars [5]  , vars [0]  , vars [6]  , vars [4]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#shortcutKey" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#shortcutKey" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , "Ctrl+Alt+X" , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#actionProc" , "Cut" , vars [5]  , vars [0]  , vars [6]  , vars [4]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#shortcutKey" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#shortcutKey" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , "F9" , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#actionProc" , "Define projection" , vars [5]  , vars [0]  , vars [6]  , vars [4]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#shortcutKey" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#shortcutKey" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , "Ctrl+F10" , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#actionProc" , "Create sub-tests" , vars [5]  , vars [0]  , vars [6]  , vars [4]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#shortcutKey" , "::" , "cpi#descriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cpi#shortcutKey" , ["::" , ["cpi#descriptor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , "Ctrl+Shift+F10" , vars [4]      ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#actionProc" , "Apply first goal" , vars [5]  , vars [0]  , vars [6]  , vars [4]        ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["cpi#termAtPath" , vars [0]  , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showSymbols"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showSymbols" , "Mathematical Symbols" , vars [0]     ] , ["/bootstrap#showView" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#symbolsMenu" , 8704 , 8959 , vars [0]  , vars [1]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showSymbols"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showSymbols" , "Arrows" , vars [0]     ] , ["/bootstrap#showView" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#symbolsMenu" , 8592 , 8703 , vars [0]  , vars [1]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showSymbols"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showSymbols" , "Supplemental Mathematical Symbols" , vars [0]     ] , ["/bootstrap#showView" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#symbolsMenu" , 10752 , 11007 , vars [0]  , vars [1]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showSymbols"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showSymbols" , "Supplemental Arrows-A" , vars [0]     ] , ["/bootstrap#showView" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#symbolsMenu" , 10224 , 10239 , vars [0]  , vars [1]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showSymbols"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showSymbols" , "Supplemental Arrows-B" , vars [0]     ] , ["/bootstrap#showView" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#symbolsMenu" , 10496 , 10623 , vars [0]  , vars [1]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showSymbols"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showSymbols" , "ASCII" , vars [0]     ] , ["/bootstrap#showView" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#symbolsMenu" , 32 , 127 , vars [0]  , vars [1]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showSymbols"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showSymbols" , "Miscellaneous Mathematical Symbols-A" , vars [0]     ] , ["/bootstrap#showView" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#symbolsMenu" , 10176 , 10223 , vars [0]  , vars [1]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showSymbols"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showSymbols" , "Miscellaneous Mathematical Symbols-B" , vars [0]     ] , ["/bootstrap#showView" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#symbolsMenu" , 10624 , 10751 , vars [0]  , vars [1]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showSymbols"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showSymbols" , "Greek and Coptic" , vars [0]     ] , ["/bootstrap#showView" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#symbolsMenu" , 880 , 1023 , vars [0]  , vars [1]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showSymbols"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showSymbols" , "Letterlike Symbols" , vars [0]     ] , ["/bootstrap#showView" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#symbolsMenu" , 8448 , 8527 , vars [0]  , vars [1]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#procedureCommand" , "/bootstrap#showSymbols"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#procedureCommand" , ["/bootstrap#showSymbols" , "Miscellaneous Symbols" , vars [0]     ] , ["/bootstrap#showView" , vars [1]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/bootstrap#symbolsMenu" , 9728 , 9983 , vars [0]  , vars [1]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , vars [1]  , vars [2]  , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#tip" , ["/bootstrap#where" , ["/bootstrap#doProc" , ["cpi#edit" , vars [0]  , ["::" , vars [3]  , ["/Functional#expr" , vars [4]    ]    ] , vars [5]      ]   ] , ["/Functional#wrapToConst" , ["/Functional#wrap" , vars [6]    ] , vars [3]  , vars [4]  , vars [2]  , vars [5]  , 1 , vars [7]          ]    ]   ]    ]      ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["=" , vars [1]  , ["::" , ["/Functional#wrap" , vars [6]    ] , ["/Functional#expr" , vars [4]    ]    ]    ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["\\+" , ["\\+" , ["=" , vars [8]  , ["::" , ["/Functional#wrap" , vars [6]    ] , ["/Functional#expr" , vars [4]    ]    ]    ]   ]   ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/bootstrap#saturate" , vars [8]  , 0 , vars [9]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#copyTerm" , vars [1]  , vars [8]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#check"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#check" , vars [0]  , vars [1]  , vars [2]  , ["/bootstrap#marker" , vars [0]  , ["/bootstrap#tip" , ["cpi#edit" , vars [0]  , ["::" , ["/javascript/statepred#def" , vars [3]  , vars [4]  , vars [5]  , vars [6]       ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]   ]    ]      ] , term   )  ) { 
     var g3   = function () { 
     logic . call  (["=" , vars [1]  , ["::" , ["/javascript/jsLogic#procedure" , ["/javascript/statepred#whenever" , vars [3]  , vars [4]  , vars [5]      ] , vars [6]     ] , ["/bootstrap#statement"  ]    ]    ] , next   )  ;  


}
 ; 
var g2   = function () { 
     logic . call  (["\\+" , ["\\+" , ["=" , vars [7]  , ["::" , ["/javascript/jsLogic#procedure" , ["/javascript/statepred#whenever" , vars [3]  , vars [4]  , vars [5]      ] , vars [6]     ] , ["/bootstrap#statement"  ]    ]    ]   ]   ] , g3     )  ;  


}
 ; 

var g1   = function () { 
     logic . call  (["/bootstrap#saturate" , vars [7]  , 0 , vars [8]      ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#copyTerm" , vars [1]  , vars [7]     ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#binOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#binOp" , vars [0]    ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#binOp" , vars [0]    ] , ["/bootstrap#type"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#applyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#applyBinOpList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#applyBinOpList" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#applyBinOpList" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#applyBinOpListScalar"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#applyBinOpListScalar" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#applyBinOpListScalar" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#applyBinOpSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#applyBinOpSet" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#set" , vars [3]    ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#set" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#set" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#set" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#applyBinOpSet" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#set" , vars [3]    ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#reduce"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#reduce" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#binOp" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#list" , vars [2]    ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#binOp" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#list" , vars [2]    ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#binOp" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#list" , vars [2]    ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#reduce" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#valueApplyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#valueApplyBinOp" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , vars [4]     ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [4]    ]    ] , ["." , ["::" , vars [2]  , vars [4]     ] , ["." , ["::" , vars [3]  , ["/Functional#expr" , vars [4]    ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , vars [4]     ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [4]    ]    ] , ["." , ["::" , vars [2]  , vars [4]     ] , ["." , ["::" , vars [3]  , ["/Functional#expr" , vars [4]    ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , vars [4]     ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [4]    ]    ] , ["." , ["::" , vars [2]  , vars [4]     ] , ["." , ["::" , vars [3]  , ["/Functional#expr" , vars [4]    ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#valueApplyBinOp" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#cases"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#cases" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#cases" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#switch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#switch" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/Functional#cases" , vars [1]  , vars [3]     ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/Functional#cases" , vars [1]  , vars [3]     ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/Functional#cases" , vars [1]  , vars [3]     ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#switch" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#evalCases"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#evalCases" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#cases" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , vars [1]     ] , ["." , ["::" , vars [4]  , vars [2]     ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/Functional#cases" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , vars [1]     ] , ["." , ["::" , vars [4]  , vars [2]     ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/Functional#cases" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , vars [1]     ] , ["." , ["::" , vars [4]  , vars [2]     ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#evalCases" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#case"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#case" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#cases" , vars [3]  , vars [4]     ]    ] , ["." , ["::" , vars [0]  , vars [3]     ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [4]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#cases" , vars [3]  , vars [4]     ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , vars [3]     ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [4]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#cases" , vars [3]  , vars [4]     ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , vars [3]     ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [4]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#cases" , vars [3]  , vars [4]     ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#case" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#cases" , vars [3]  , vars [4]     ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#otherwise"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#otherwise" , vars [0]    ] , ["/Functional#cases" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#otherwise" , vars [0]    ] , ["/Functional#cases" , vars [1]  , vars [2]     ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#if"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#eq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#eq" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#eq" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#greaterThen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#greaterThen" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#greaterThen" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#gt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#gt" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#gt" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#max"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#max" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#max" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#ge"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#ge" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#ge" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#const"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#const" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#const" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#wrapToConst"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#wrapToConst" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]          ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [6]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [8]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [6]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [8]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [6]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [9]  , vars [10]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#wrapToConst" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]          ] , ["/bootstrap#pred"  ]    ] , vars [7]  , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#wrapToConstArgs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (12  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#wrapToConstArgs" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]  , vars [7]           ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [6]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [7]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [9]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [6]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [7]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [9]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [6]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [7]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [10]  , vars [11]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#wrapToConstArgs" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]  , vars [7]           ] , ["/bootstrap#pred"  ]    ] , vars [8]  , vars [9]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#wrapToConst"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#wrapToConst" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]  , vars [7]  , vars [8]            ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , vars [4]     ] , ["." , ["::" , vars [1]  , vars [4]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [6]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [7]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [8]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [10]  , ["." , ["::" , vars [0]  , vars [4]     ] , ["." , ["::" , vars [1]  , vars [4]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [6]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [7]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [8]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [10]  , ["." , ["::" , vars [0]  , vars [4]     ] , ["." , ["::" , vars [1]  , vars [4]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [6]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [7]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [8]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [11]  , vars [12]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#wrapToConst" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]  , vars [7]  , vars [8]            ] , ["/bootstrap#pred"  ]    ] , vars [9]  , vars [10]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#eset"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#eset" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#eset" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#expr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#expr" , vars [0]    ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#expr" , vars [0]    ] , ["/bootstrap#type"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#eval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , vars [1]     ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , vars [1]     ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , vars [1]     ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#minus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#minus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#minus" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#minus" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#mult"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#mult" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#mult" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#mult"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#mult" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#mult" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#div"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#div" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#div" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#div"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#div" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#div" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#idiv"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#idiv" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#idiv" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#idiv"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#idiv" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#idiv" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#modulus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#modulus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#modulus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#modulus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#modulus" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#modulus" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#evalList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#evalList" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#list" , vars [1]    ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/Functional#expr" , vars [1]    ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/Functional#expr" , vars [1]    ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/Functional#expr" , vars [1]    ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#evalList" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#list" , vars [1]    ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#def"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#def" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#def" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#f"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#f" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#f" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#parentheses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#parentheses" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#parentheses" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#func"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#func" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#func" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#lambda"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#lambda" , vars [0]  , vars [1]     ] , ["/Functional#func" , vars [2]  , vars [3]     ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [3]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [3]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#lambda" , vars [0]  , vars [1]     ] , ["/Functional#func" , vars [2]  , vars [3]     ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#apply"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#apply" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#func" , vars [1]  , vars [3]     ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#func" , vars [1]  , vars [3]     ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#func" , vars [1]  , vars [3]     ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#apply" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#g"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#g" , vars [0]    ] , ["/Functional#expr" , ["/Functional#func" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#g" , vars [0]    ] , ["/Functional#expr" , ["/Functional#func" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#map"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#map" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [2]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#func" , vars [2]  , vars [3]     ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [2]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#func" , vars [2]  , vars [3]     ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#list" , vars [2]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#func" , vars [2]  , vars [3]     ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#map" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#pairType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#pairType" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#pairType" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#pair"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#pair" , vars [0]  , vars [1]     ] , ["/Functional#pairType" , vars [2]  , vars [3]     ]    ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , vars [3]     ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , vars [3]     ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , vars [3]     ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#pair" , vars [0]  , vars [1]     ] , ["/Functional#pairType" , vars [2]  , vars [3]     ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#plus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#plus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#plus" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#plus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#plus" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#plus" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#seq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#seq" , vars [0]    ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#seq" , vars [0]    ] , ["/bootstrap#type"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#seq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#seq" , vars [0]  , vars [1]     ] , ["/Functional#seq" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/Functional#seq" , vars [2]    ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/Functional#seq" , vars [2]    ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/Functional#seq" , vars [2]    ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#seq" , vars [0]  , vars [1]     ] , ["/Functional#seq" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#first"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#first" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#first" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#next"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#next" , vars [0]    ] , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#next" , vars [0]    ] , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#element"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#element" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#seq" , vars [2]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#seq" , vars [2]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/Functional#seq" , vars [2]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#element" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#fib"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#fib" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/Functional#seq" , ["/bootstrap#number"  ]   ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#fib" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/Functional#seq" , ["/bootstrap#number"  ]   ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#constSeq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#constSeq" , vars [0]    ] , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#constSeq" , vars [0]    ] , ["/Functional#expr" , ["/Functional#seq" , vars [1]    ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#num2str"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#num2str" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#num2str" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#concat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#concat" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#concat" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#sum"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#sum" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#sum" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#sumList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#sumList" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#sumList" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#where" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#where" , vars [0]  , vars [1]     ] , ["/Functional#expr" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#wrap"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#wrap" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#wrap" , vars [0]    ] , ["/Functional#expr" , vars [1]    ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#evalArgs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#evalArgs" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#evalArgs" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#compound"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#compound" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#compound" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#range"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#range" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#range" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#insertExpression"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#insertExpression" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#insertExpression" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#ancestorIsWrapper"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#ancestorIsWrapper" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#ancestorIsWrapper" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#generateXMLFile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#generateXMLFile" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/html#xml"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/html#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/html#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#generateXMLFile" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#mySet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#mySet"  ] , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#mySet"  ] , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#f"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#f" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#f" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#myNewThing"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#myNewThing"  ] , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#myNewThing"  ] , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#token"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#token" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [0]  , ["/Test/bnf#token"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test/bnf#token"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test/bnf#token"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#token" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#concat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#concat" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#concat" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#prod"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#prod" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#prod" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#parse"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#parse" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/Test/bnf#token"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/Test/bnf#token"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/Test/bnf#token"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/Test/bnf#token"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/Test/bnf#token"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/Test/bnf#token"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#parse" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#repeat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#repeat" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#repeat" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#sumExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#sumExpr" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#sumExpr" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#sumSuffix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#sumSuffix" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#sumSuffix" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#multExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#multExpr" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#multExpr" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#multSuffix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#multSuffix" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#multSuffix" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#number"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#number" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#number" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#atomicExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#atomicExpr" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#atomicExpr" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#symbol"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#symbol" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#symbol" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#trainQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#trainQuery" , vars [0]  , vars [1]     ] , ["/Test/bnf#trainQuery"  ]    ] , ["." , ["::" , vars [0]  , ["/Test/bnf#routeQueryType"  ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#timeQueryType"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test/bnf#routeQueryType"  ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#timeQueryType"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test/bnf#routeQueryType"  ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#timeQueryType"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#trainQuery" , vars [0]  , vars [1]     ] , ["/Test/bnf#trainQuery"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#fromTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#fromTo" , vars [0]  , vars [1]     ] , ["/Test/bnf#routeQueryType"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#fromTo" , vars [0]  , vars [1]     ] , ["/Test/bnf#routeQueryType"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#onDate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#onDate" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test/bnf#timeQueryType"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#onDate" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test/bnf#timeQueryType"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#word"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#word" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#word" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#date"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#date" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test/bnf#token"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#date" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test/bnf#token"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#location"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#location" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#location" , vars [0]    ] , ["/Test/bnf#token"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#query"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#query" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [0]  , ["/Test/bnf#trainQuery"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test/bnf#trainQuery"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test/bnf#trainQuery"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#query" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#routeQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#routeQuery" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [0]  , ["/Test/bnf#routeQueryType"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test/bnf#routeQueryType"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test/bnf#routeQueryType"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#routeQuery" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#timeQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#timeQuery" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [0]  , ["/Test/bnf#timeQueryType"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test/bnf#timeQueryType"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test/bnf#timeQueryType"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#timeQuery" , vars [0]    ] , ["/Test/bnf#pattern"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#boolean"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#boolean"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#boolean"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#evaluatesTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#evaluatesTo" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#evaluatesTo" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#final"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#final" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#final" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#finallyEvaluatesTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#finallyEvaluatesTo" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#finallyEvaluatesTo" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#true"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#true"  ] , ["/Test#boolean"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#true"  ] , ["/Test#boolean"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#false"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#false"  ] , ["/Test#boolean"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#false"  ] , ["/Test#boolean"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#and"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#and" , vars [0]  , vars [1]     ] , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#and" , vars [0]  , vars [1]     ] , ["/Test#boolean"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#or" , vars [0]  , vars [1]     ] , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#or" , vars [0]  , vars [1]     ] , ["/Test#boolean"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#not"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#not" , vars [0]    ] , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#not" , vars [0]    ] , ["/Test#boolean"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#parens"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#parens" , vars [0]    ] , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test#boolean"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#parens" , vars [0]    ] , ["/Test#boolean"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#goal"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#goal" , vars [0]    ] , ["/Test#boolean"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#goal" , vars [0]    ] , ["/Test#boolean"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#process"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#process"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#process"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#action"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#action"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#action"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#trans"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#trans" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#action"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#process"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#action"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#process"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#action"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#process"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#trans" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#prefix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#prefix" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#action"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#action"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#action"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#prefix" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#alt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#alt" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#process"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#process"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#process"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#alt" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#procDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#procDef" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#process"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#process"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#process"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#procDef" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#parentheses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#parentheses" , vars [0]    ] , ["/Test#process"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#parentheses" , vars [0]    ] , ["/Test#process"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#reaches"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#reaches" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/Test#action"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/Test#action"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/Test#action"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#reaches" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#quarter"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#quarter"  ] , ["/Test#action"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#quarter"  ] , ["/Test#action"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#tea"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#tea"  ] , ["/Test#action"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#tea"  ] , ["/Test#action"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#coffee"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#coffee"  ] , ["/Test#action"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#coffee"  ] , ["/Test#action"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#coffeeTeaMachine"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#coffeeTeaMachine"  ] , ["/Test#process"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#coffeeTeaMachine"  ] , ["/Test#process"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#cond"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#cond" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#process"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#cond" , vars [0]  , vars [1]     ] , ["/Test#process"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#vendingMachine"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#vendingMachine"  ] , ["/Test#process"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#vendingMachine"  ] , ["/Test#process"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#vendingMachine"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#vendingMachine" , vars [0]    ] , ["/Test#process"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#vendingMachine" , vars [0]    ] , ["/Test#process"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#costs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#costs" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#action"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#action"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#action"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#costs" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#worths"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#worths" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#action"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#action"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#action"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#worths" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#soda"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#soda"  ] , ["/Test#action"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#soda"  ] , ["/Test#action"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#dime"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#dime"  ] , ["/Test#action"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#dime"  ] , ["/Test#action"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#sayHelloTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#sayHelloTo" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#sayHelloTo" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#namespace"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#namespace" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#namespace" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#showAllSignaturesForNamespace"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#showAllSignaturesForNamespace" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#showAllSignaturesForNamespace" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#doShowAllSignaturesForNamespace"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#doShowAllSignaturesForNamespace" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#doShowAllSignaturesForNamespace" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#feature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#feature" , vars [0]    ] , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#feature" , vars [0]    ] , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#fullSequence"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#fullSequence" , vars [0]    ] , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#fullSequence" , vars [0]    ] , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#numbered"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#numbered" , vars [0]    ] , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#numbered" , vars [0]    ] , ["/bootstrap#mode"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#statements"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#statements" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#statements" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#splitStatementList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#splitStatementList" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#splitStatementList" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#showNumbered"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#showNumbered" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#showNumbered" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#e"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#e" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#e" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#p"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#p" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#p" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#time"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#time" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test#eventTime"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#conferenceDay"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#ampm"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Test#conferenceDay"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#ampm"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Test#conferenceDay"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#ampm"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#time" , vars [0]  , vars [1]  , vars [2]      ] , ["/Test#eventTime"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#pavilion"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#pavilion" , vars [0]    ] , ["/Test#location"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#direction"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test#direction"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test#direction"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#pavilion" , vars [0]    ] , ["/Test#location"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#galleria"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#galleria" , vars [0]    ] , ["/Test#location"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#galleria" , vars [0]    ] , ["/Test#location"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#visitUsAt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#visitUsAt" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#visitUsAt" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#subState"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#subState" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#state"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#state"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#state"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#subState" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#waiting"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#waiting"  ] , ["/Test#state"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#waiting"  ] , ["/Test#state"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#cycling"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#cycling"  ] , ["/Test#state"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#cycling"  ] , ["/Test#state"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#contains"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#contains" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/Test#state"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/Test#state"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/Test#state"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#contains" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#startCycling"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#startCycling"  ] , ["/Test#event"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#startCycling"  ] , ["/Test#event"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#stopCycling"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#stopCycling"  ] , ["/Test#event"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#stopCycling"  ] , ["/Test#event"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#default"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#default"  ] , ["/Test#event"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#default"  ] , ["/Test#event"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#state"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#state"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#state"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#idle"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#idle"  ] , ["/Test#state"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#idle"  ] , ["/Test#state"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#initialState"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#initialState" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#initialState" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#event"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#event"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#event"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#powerUp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#powerUp"  ] , ["/Test#event"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#powerUp"  ] , ["/Test#event"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#poweringUp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#poweringUp"  ] , ["/Test#state"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#poweringUp"  ] , ["/Test#state"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#transition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#transition" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#event"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#state"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#event"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#state"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#event"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#state"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#transition" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#powerUpComplete"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#powerUpComplete"  ] , ["/Test#event"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#powerUpComplete"  ] , ["/Test#event"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#ready"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#ready"  ] , ["/Test#state"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#ready"  ] , ["/Test#state"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#print"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#print"  ] , ["/Test#event"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#print"  ] , ["/Test#event"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#printing"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#printing"  ] , ["/Test#state"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#printing"  ] , ["/Test#state"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#printingDone"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#printingDone"  ] , ["/Test#event"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#printingDone"  ] , ["/Test#event"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#powerDown"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#powerDown"  ] , ["/Test#event"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#powerDown"  ] , ["/Test#event"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#t"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#t" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#event"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#state"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#event"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#state"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/Test#event"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#state"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#t" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#changeState"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#changeState" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Test#state"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#changeState" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#procedure"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#localName"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#localName" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#localName" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#hello"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#hello" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#hello" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#adapter"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#adapter" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#adapter" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#checkAdapter"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#checkAdapter" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#checkAdapter" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#setAtPathAndNotify"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#setAtPathAndNotify" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#setAtPathAndNotify" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#alias"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#alias" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#alias" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#aliasString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#aliasString" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#aliasString" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#localString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#localString" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#localString" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "annotation#escape"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["annotation#escape" , vars [0]    ] , vars [1]     ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["annotation#escape" , vars [0]    ] , vars [1]     ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "annotation#parentheses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["annotation#parentheses" , vars [0]    ] , vars [1]     ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["annotation#parentheses" , vars [0]    ] , vars [1]     ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "annotation#comment"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["annotation#comment" , vars [0]  , vars [1]     ] , vars [2]     ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["annotation#comment" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "annotation#minComment"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["annotation#minComment" , vars [0]  , vars [1]     ] , vars [2]     ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["annotation#minComment" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "annotation#changeMode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["annotation#changeMode" , vars [0]  , vars [1]     ] , vars [2]     ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["annotation#changeMode" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#defAtom"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#defAtom" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#defAtom" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#wrongAtomicSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#wrongAtomicSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#wrongAtomicSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#autocomplete"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#autocomplete" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , vars [0]     ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , vars [0]     ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , vars [0]     ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#autocomplete" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#strcat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#strcat" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#strcat" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#defaultRepresentation"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#defaultRepresentation" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#defaultRepresentation" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#autocomplete"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#autocomplete" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#autocomplete" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#validateVarNames"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#validateVarNames" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#validateVarNames" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#safeVarIn"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#safeVarIn" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#safeVarIn" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#safeVarInList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#safeVarInList" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#safeVarInList" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#injectContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#injectContent" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#injectContent" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#default"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#default" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#default" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#defaultRepresentationForAll"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#defaultRepresentationForAll" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#defaultRepresentationForAll" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#signature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["::" , vars [0]  , vars [1]     ] , ["/bootstrap#typedTerm"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , ":-"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , [":-" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , [":-" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , ","    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["," , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["," , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "~>"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["~>" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["~>" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["[]"  ] , ["/bootstrap#list" , vars [0]    ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["[]"  ] , ["/bootstrap#list" , vars [0]    ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , vars [2]    ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["." , vars [0]  , vars [1]     ] , ["/bootstrap#list" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#pred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#pred"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#pred"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#list"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#list" , vars [0]    ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#list" , vars [0]    ] , ["/bootstrap#type"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#horiz"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#horiz"  ] , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#horiz"  ] , ["/bootstrap#mode"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#horiz"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#horiz" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#alignment"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#alignment"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#alignment"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#horiz" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#or" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#or" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#statements"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#statements"  ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#statements"  ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#closure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#closure" , vars [0]    ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#closure" , vars [0]    ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#closure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#closure"  ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#closure"  ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#myStatementSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#myStatementSet"  ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#myStatementSet"  ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#checkClosure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#checkClosure" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#mark"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#mark"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#mark"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#checkClosure" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#generateFile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#generateFile" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#generateFile" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#generateFileForSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#generateFileForSet" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#generateFileForSet" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#requires"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#requires" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#requires" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#missing"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#missing" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#missing" , vars [0]    ] , ["/bootstrap#error"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#saturate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#saturate" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#saturate" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#saturateList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#saturateList" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#saturateList" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#$SAT$"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#$SAT$" , vars [0]    ] , vars [1]     ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#$SAT$" , vars [0]    ] , vars [1]     ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#context"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#context"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#context"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#checkContext"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#checkContext" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#context"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#context"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#context"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#checkContext" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#subTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#subTerm" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , vars [4]     ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , vars [4]     ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , vars [4]     ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#subTerm" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#subElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#subElement" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#subElement" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#checkWithContext"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#checkWithContext" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#context"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#marker"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#context"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#marker"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#context"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#marker"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#checkWithContext" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#contextMenuEntry"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#contextMenuEntry" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#menuEntry"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#menuEntry"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#menuEntry"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#contextMenuEntry" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#isShortcutKey"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#isShortcutKey" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#isShortcutKey" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#contextMenuEntry"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#contextMenuEntry" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#image"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#image"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#image"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [8]  , vars [9]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#contextMenuEntry" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#statement"  ]    ] , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#contextMenuEntry"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#contextMenuEntry" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#contextMenuEntry" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#statement"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#menuItem"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#menuItem" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#menuEntry"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#image"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#image"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#image"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#menuItem" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#menuEntry"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#redo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#redo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#redo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#redo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#redo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#redo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#redo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#redo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#redo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#inClipboard"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#inClipboard" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#inClipboard" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#clipboard"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#clipboard" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#clipboard" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#cut"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#cut" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#cut" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#procedure"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#paste"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#paste" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#paste" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#procedure"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#pairType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#pairType" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#pairType" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#pair"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#pair" , vars [0]  , vars [1]     ] , ["/bootstrap#pairType" , vars [2]  , vars [3]     ]    ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , vars [3]     ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , vars [3]     ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , vars [3]     ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#pair" , vars [0]  , vars [1]     ] , ["/bootstrap#pairType" , vars [2]  , vars [3]     ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#calculatePasteItems"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#calculatePasteItems" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#pairType" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , vars [1]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , vars [1]    ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#pairType" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , vars [1]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , vars [1]    ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#pairType" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , vars [1]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , vars [1]    ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [8]  , vars [9]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#calculatePasteItems" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#defines"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#defines" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#defines" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#canDefine"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#canDefine" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#canDefine" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#definitionOf"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#definitionOf" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#definitionType"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#definitionType"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#definitionType"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#definitionOf" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#showDefinitions"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#showDefinitions" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#showDefinitions" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#definitionsVisualization"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#definitionsVisualization" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#definitionsVisualization" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#definitionCategory"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#definitionCategory" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#definitionType"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#definitionType"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#definitionType"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#definitionCategory" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#showDefinitions"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#showDefinitions" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#showDefinitions" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#searchForDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#searchForDef" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#searchForDef" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#doShowDefinitions"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#doShowDefinitions" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#doShowDefinitions" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#blankList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#blankList" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#blankList" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#loadedStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#loadedStatement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#loadedStatement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#definitionMarker"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#definitionMarker" , vars [0]    ] , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#definitionMarker" , vars [0]    ] , ["/bootstrap#marker"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#missingDefinition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#missingDefinition" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#missingDefinition" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#requiredSemanticDefinition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#requiredSemanticDefinition"  ] , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#requiredSemanticDefinition"  ] , ["/bootstrap#definitionType"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#deprecated"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#deprecated" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#deprecated" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#conceptIsDeprecated"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#conceptIsDeprecated" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#conceptIsDeprecated" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#isDeprecated"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#isDeprecated" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#isDeprecated" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#deprecationReplacement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#deprecationReplacement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , vars [1]     ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , vars [1]     ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , vars [1]     ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#deprecationReplacement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#descriptorContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#descriptorContent" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#descriptorContent" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#descriptorContentWithDefault"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#descriptorContentWithDefault" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#descriptorContentWithDefault" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#disabled"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#disabled" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#disabled" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#doc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#doc" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#doc" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#subTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#subTerm" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#subTerm" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#safeParseTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#safeParseTerm" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#safeParseTerm" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#element"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#element" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , vars [3]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , vars [3]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [3]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , vars [3]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [3]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , vars [3]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#element" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#setElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#setElement" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , vars [4]    ]    ] , ["." , ["::" , vars [2]  , vars [4]     ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , vars [4]    ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , vars [4]    ]    ] , ["." , ["::" , vars [2]  , vars [4]     ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , vars [4]    ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , vars [4]    ]    ] , ["." , ["::" , vars [2]  , vars [4]     ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , vars [4]    ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#setElement" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#replaceSubterm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#replaceSubterm" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#replaceSubterm" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#replaceNthSubterm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#replaceNthSubterm" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#replaceNthSubterm" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , ">"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , [">" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , [">" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "="    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["=" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["=" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#editOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#editOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#undoFrame"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#editOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#undoFrame"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#containingStatementPath"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#containingStatementPath" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#containingStatementPath" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#undo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#undo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#undo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "+"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["+" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["+" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#plus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#plus" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#ref" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#ref" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#ref" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#plus" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "-"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["-" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["-" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#minus" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#ref" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#ref" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#ref" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#minus" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#fileContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#fileContent" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#fileContent"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#annotatedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#nsElem"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#annotatedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#nsElem"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#annotatedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#nsElem"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#fileContent" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#fileContent"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#loadedFile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#loadedFile" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#model"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#model"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#model"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#loadedFile" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#editState"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#editState" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#undoFrame"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#undoFrame"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#undoFrame"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#undoFrame"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#undoFrame"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#undoFrame"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#editState" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#fileIsLoaded"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#fileIsLoaded" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#model"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#model"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#model"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#fileIsLoaded" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#editStateIs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#editStateIs" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#undoFrame"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#undoFrame"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#undoFrame"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#undoFrame"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#undoFrame"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#undoFrame"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#editStateIs" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#fileToModel"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#fileToModel" , vars [0]    ] , ["/bootstrap#expr" , ["/bootstrap#model"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#fileContent"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#fileContent"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#fileContent"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#fileToModel" , vars [0]    ] , ["/bootstrap#expr" , ["/bootstrap#model"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#model"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#model" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#model"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#nsElem"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#nsElem"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#nsElem"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#model" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#model"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#fileModel"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#fileModel" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#annotatedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#annotatedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#annotatedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#fileModel" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#mergeVarNames"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#mergeVarNames" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#mergeVarNames" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#varInVarNames"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#varInVarNames" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#varInVarNames" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#modelToContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#modelToContent" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#model"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#fileContent"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#model"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#fileContent"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#model"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#fileContent"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#modelToContent" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#annotateStatements"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#annotateStatements" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#annotatedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#annotatedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#annotatedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#annotateStatements" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#selectVarNamesFor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#selectVarNamesFor" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#selectVarNamesFor" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#varIn"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#varIn" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#varIn" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#rootType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#rootType" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#rootType" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#rootMode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#rootMode" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#rootMode" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#forall"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#forall" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#forall" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#imageMarker"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#imageMarker" , vars [0]    ] , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#image"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#imageMarker" , vars [0]    ] , ["/bootstrap#marker"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#listMember"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#listMember" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#listMember" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#horizontalCont"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#horizontalCont" , vars [0]    ] , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#horizontalCont" , vars [0]    ] , ["/bootstrap#mode"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#horizontal"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#horizontal" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#horizontal" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#mode"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#horizontal"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#horizontal" , vars [0]  , vars [1]     ] , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#horizontal" , vars [0]  , vars [1]     ] , ["/bootstrap#mode"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#vertical"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#vertical" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#vertical" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#mode"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#markersForPath"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#markersForPath" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#markersForPath" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#applyMarkers"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#applyMarkers" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#applyMarkers" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#applyMarker"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#applyMarker" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#applyMarker" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#markerVis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#markerVis" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#markerVis" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#markerVisualization"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#markerVisualization" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#markerVisualization" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#checkError"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#checkError" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#error"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#error"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#error"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#checkError" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#procedureCommand"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#procedureCommand" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#procedureCommand" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#procedure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#procedure" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#procedure" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#true"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#true"  ] , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#true"  ] , ["/bootstrap#pred"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#expr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#expr" , vars [0]    ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#expr" , vars [0]    ] , ["/bootstrap#type"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#function"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#function" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#ref" , vars [1]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#ref" , vars [1]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#ref" , vars [1]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#function" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#ref"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#ref" , vars [0]    ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#ref" , vars [0]    ] , ["/bootstrap#type"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#func"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#func" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#ref" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#ref" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#ref" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#func" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#termClass"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#termClass" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#termClass" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#class"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#class" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#class" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#commandClass"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#commandClass" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#commandClass" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#doAll"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#doAll" , vars [0]    ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#command"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#command"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#command"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#doAll" , vars [0]    ] , ["/bootstrap#command"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#assign"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#assign" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#ref" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#ref" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#ref" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#assign" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#doProc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#doProc" , vars [0]    ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#doProc" , vars [0]    ] , ["/bootstrap#command"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#readFile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#readFile" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#fileContent"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#fileContent"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#fileContent"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#readFile" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#writeFile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#writeFile" , vars [0]  , vars [1]     ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#fileContent"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#fileContent"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#fileContent"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#writeFile" , vars [0]  , vars [1]     ] , ["/bootstrap#command"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#assignFinal"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#assignFinal" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#expr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#assignFinal" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#command"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#dbInsert"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#dbInsert" , vars [0]    ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#dbInsert" , vars [0]    ] , ["/bootstrap#command"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#dbRemove"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#dbRemove" , vars [0]    ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#dbRemove" , vars [0]    ] , ["/bootstrap#command"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#termToString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#termToString" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#namespacePair"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#ref" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#namespacePair"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#ref" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#namespacePair"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#ref" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#termToString" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#command"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#stringToTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#stringToTerm" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#ref" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#namespacePair"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#ref" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#namespacePair"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#ref" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#namespacePair"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#stringToTerm" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#command"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#notify"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#notify" , vars [0]    ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#notify" , vars [0]    ] , ["/bootstrap#command"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#if"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#where" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#where" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#foreach"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#foreach" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#command"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#foreach" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#pathIsPrefix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#pathIsPrefix" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#pathIsPrefix" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#visualizeTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#visualizeTerm" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#visualizeTerm" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#projection"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#userVisualization"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#userVisualization" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#mode"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#mode"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#mode"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#userVisualization" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#fixType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#fixType" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#fixType" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#isDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#isDescriptor" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#isDescriptor" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#sandbox"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#sandbox" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#sandbox" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#set"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#set" , vars [0]    ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#set" , vars [0]    ] , ["/bootstrap#type"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#set"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#set" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#set" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#horiz"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#horiz" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#horiz" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#projection"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#projection" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#label"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#label" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#label" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#member"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#member" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#member" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#setDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#setDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#setDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#union"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#union" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#union" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#intersect"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#intersect" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#intersect" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#singleton"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#singleton" , vars [0]    ] , ["/bootstrap#set" , vars [1]    ]    ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#singleton" , vars [0]    ] , ["/bootstrap#set" , vars [1]    ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#listSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#listSet" , vars [0]    ] , ["/bootstrap#set" , vars [1]    ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#listSet" , vars [0]    ] , ["/bootstrap#set" , vars [1]    ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#setParens"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#setParens" , vars [0]    ] , ["/bootstrap#set" , vars [1]    ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [1]    ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [1]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [1]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#setParens" , vars [0]    ] , ["/bootstrap#set" , vars [1]    ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#diffSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#diffSet" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#diffSet" , vars [0]  , vars [1]     ] , ["/bootstrap#set" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#notMember"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#notMember" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#set" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#notMember" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#shortcutKey"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#shortcutKey" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#shortcutKey" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#shortcutKey"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#shortcutKey" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#shortcutKey" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#actionProc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#actionProc" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#actionProc" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "annotation#shrink"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["annotation#shrink" , vars [0]    ] , vars [1]     ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["annotation#shrink" , vars [0]    ] , vars [1]     ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#checkSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#checkSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#error"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#error"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#error"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#checkSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#signaturePlaceMismatch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#signaturePlaceMismatch" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#signaturePlaceMismatch" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#nonVarInSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#nonVarInSignature" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#nonVarInSignature" , vars [0]    ] , ["/bootstrap#error"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#signatureVarInBodyAndNotInHead"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#signatureVarInBodyAndNotInHead" , vars [0]    ] , ["/bootstrap#error"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#varInVarNamesAndNotInTTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#varInVarNamesAndNotInTTerm" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#varInVarNamesAndNotInTTerm" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#removeAnnotations"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#removeAnnotations" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#removeAnnotations" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#sigProjAtom"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#sigProjAtom" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#sigProjAtom" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#symbolRange"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#symbolRange" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#symbolRange" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#showSymbols"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#showSymbols" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#showSymbols" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#symbolsMenu"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#symbolsMenu" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#symbolsMenu" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#tip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#tip" , vars [0]    ] , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#tip" , vars [0]    ] , ["/bootstrap#marker"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#tip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#tip" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#tip" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#treeElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#treeElement" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#treeElement" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#treeElementVis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#treeElementVis" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#treeElementVis" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#showTree"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#showTree" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#showTree" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#define"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#define" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#define" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#definitionToSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#definitionToSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#definitionToSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#defArgsToArgs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#defArgsToArgs" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#defArgsToArgs" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#check"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#check" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#locMarker"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#locMarker"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#locMarker"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#check" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#statementPath"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#statementPath" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#statementPath" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#true"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#true" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#true" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#typesNotFullyInstantiated"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#typesNotFullyInstantiated" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#typesNotFullyInstantiated" , vars [0]  , vars [1]     ] , ["/bootstrap#error"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#checkTypeConsistency"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#checkTypeConsistency" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [4]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [4]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [4]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [8]  , vars [9]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#checkTypeConsistency" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#checkTypes"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#checkTypes" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#checkTypes" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#validateType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#validateType" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [8]  , vars [9]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#validateType" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#marker"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#marker" , vars [0]  , vars [1]     ] , ["/bootstrap#locMarker"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#marker"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#marker"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#marker"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#marker" , vars [0]  , vars [1]     ] , ["/bootstrap#locMarker"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#error"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#error" , vars [0]  , vars [1]     ] , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#error" , vars [0]  , vars [1]     ] , ["/bootstrap#marker"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#typeMimatch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#typeMimatch" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#typeMimatch" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#checkVarType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#checkVarType" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#checkVarType" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#varType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#varType" , vars [0]    ] , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#varType" , vars [0]    ] , ["/bootstrap#marker"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#typeOf"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#typeOf" , vars [0]  , vars [1]     ] , ["/bootstrap#marker"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#typeOf" , vars [0]  , vars [1]     ] , ["/bootstrap#marker"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#findVarType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#findVarType" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#findVarType" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#missingSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#missingSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#missingSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#checkCompoundType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#checkCompoundType" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#checkCompoundType" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#checkSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#checkSignature" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#checkSignature" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#checkArgTypes"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#checkArgTypes" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#locMarker"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [8]  , vars [9]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#checkArgTypes" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#false"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#false" , vars [0]    ] , ["/bootstrap#exception"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#false" , vars [0]    ] , ["/bootstrap#exception"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#unitTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "\\+"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["\\+" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["\\+" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#failedTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#failedTest" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#failedTest" , vars [0]    ] , ["/bootstrap#error"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#exceptionThrown"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#exceptionThrown" , vars [0]    ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#exception"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#exception"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#exception"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#exceptionThrown" , vars [0]    ] , ["/bootstrap#error"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#testNotFullyInstantiated"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#testNotFullyInstantiated" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#testNotFullyInstantiated" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#error"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#testHasFailed"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#testHasFailed" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#error"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#error"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#error"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#testHasFailed" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#sanitizeVarNames"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#sanitizeVarNames" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#sanitizeVarNames" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#showView"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#showView" , vars [0]    ] , ["/bootstrap#command"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#showView" , vars [0]    ] , ["/bootstrap#command"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#showInView"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#showInView" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#showInView" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#autoFix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#autoFix" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#autoFix" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#fixError"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#fixError" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#fixError" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#showSolutions"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#showSolutions" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#showSolutions" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#visualizeSolutions"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#visualizeSolutions" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#procedure"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#procedure"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#procedure"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#visualizeSolutions" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#solution"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#solution" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#solution" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#errorSolution"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#errorSolution" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#error"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#errorSolution" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#insertStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#insertStatement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#insertStatement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#parentPath"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#parentPath" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#parentPath" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#visClass"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#visClass" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#visClass" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#vis" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#vis" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#vert"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#vert" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#vert" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#italic"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#italic" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#italic" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#bold"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#bold" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#bold" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#color"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#color" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#color" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#lineBorder"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#lineBorder" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#lineBorder" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#visualization"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#symbol"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#symbol" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#symbol" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#tooltip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#tooltip" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#tooltip" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#halfSize"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#halfSize" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#halfSize" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#smaller"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#smaller" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#smaller" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#action"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#action" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#action" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#action"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#action" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#action" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#visualization"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#background"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#background" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#background" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#roundRect"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#roundRect" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#roundRect" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#expand"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#expand" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#expand" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#link"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#link" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#link" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#brackets"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#brackets" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#brackets" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#visualization"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#box"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#box" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#box" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#dynamicList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#dynamicList" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#dynamicList" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#pivot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#pivot" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#pivot" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#image"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#image" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#image"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#image" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#visualizeVar"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#visualizeVar" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#visualizeVar" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#varNameMacro"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#varNameMacro" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#varNameMacro" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#varNameMacroStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#varNameMacroStatement" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#varNameMacroStatement" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#varNameSuffix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#varNameSuffix" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#varNameSuffix" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#subscriptVarSuffix"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#subscriptVarSuffix" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#subscriptVarSuffix" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/couchdb#createDatabase"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/couchdb#createDatabase" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/couchdb#createDatabase" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/couchdb#deleteDatabase"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/couchdb#deleteDatabase" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/couchdb#deleteDatabase" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/couchdb#insertDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/couchdb#updateDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/couchdb#updateDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [4]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [4]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [4]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#statePred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/couchdb#addRevision"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/couchdb#addRevision" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/couchdb#addRevision" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cjs#couchdbMap"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cjs#couchdbMap" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cjs#couchdbMap" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cjs#couchdb"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cjs#couchdb" , vars [0]  , vars [1]     ] , ["/cedalionWeb/couchdb#database"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cjs#couchdb" , vars [0]  , vars [1]     ] , ["/cedalionWeb/couchdb#database"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cjs#verifyDatabaseRev"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cjs#verifyDatabaseRev" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/couchdb#database"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/couchdb#database"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/couchdb#database"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cjs#verifyDatabaseRev" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#updateElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#updateElement" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#updateElement" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#removeElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#removeElement" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#removeElement" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#crudEditor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#crudEditor" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateSet" , ["/Functional#pairType" , vars [2]  , vars [1]     ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [4]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [5]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateSet" , ["/Functional#pairType" , vars [2]  , vars [1]     ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [4]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [5]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateSet" , ["/Functional#pairType" , vars [2]  , vars [1]     ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [4]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [5]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [8]  , vars [9]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#crudEditor" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#updateList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#updateList" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#updateList" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#edit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [2]  , vars [4]     ]    ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , vars [4]     ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [5]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [2]  , vars [4]     ]    ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , vars [4]     ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [5]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [2]  , vars [4]     ]    ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , vars [4]     ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [5]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [8]  , vars [9]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#editNew"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#editNew" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#editNew" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#remove"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#remove" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [3]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [3]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [3]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#remove" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#inlineEditor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#inlineEditor" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [1]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#inlineEditor" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#model"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#model" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#model" , vars [0]  , vars [1]     ] , ["/bootstrap#type"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#elements"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#elements" , vars [0]    ] , ["/javascript/statepred#stateSet" , ["/Functional#pairType" , vars [1]  , vars [2]     ]   ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [2]  , vars [1]     ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [2]  , vars [1]     ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [2]  , vars [1]     ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#elements" , vars [0]    ] , ["/javascript/statepred#stateSet" , ["/Functional#pairType" , vars [1]  , vars [2]     ]   ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#createNew"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#createNew" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [1]  , vars [2]     ]   ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [2]  , vars [1]     ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [2]  , vars [1]     ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [2]  , vars [1]     ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#createNew" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [1]  , vars [2]     ]   ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#update"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#update" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [4]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , vars [4]     ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [4]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , vars [4]     ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [4]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [3]  , vars [4]     ] , ["." , ["::" , vars [4]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#update" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#delete"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#delete" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [3]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [3]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/crud#model" , vars [3]  , vars [2]     ]    ] , ["." , ["::" , vars [1]  , vars [2]     ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#delete" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#ajaxQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#ajaxQuery" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#ajaxQuery" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#ajaxException"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#ajaxException" , vars [0]    ] , ["/javascript/jsLogic#exception"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#ajaxException" , vars [0]    ] , ["/javascript/jsLogic#exception"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#onServer"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#onServer" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#onServer" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#animate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/jquery#animateAction"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/jquery#animateAction"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/jquery#animateAction"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#runAfterGen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#runAfterGen" , vars [0]    ] , ["/cedalionWeb/xml#annotation"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#runAfterGen" , vars [0]    ] , ["/cedalionWeb/xml#annotation"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#animate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#changeContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#changeContent" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#changeContent" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#applyAnnot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#applyAnnot" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#annotation"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#annotation"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#annotation"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#applyAnnot" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#uniqueName"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#uniqueName" , vars [0]    ] , ["/cedalionWeb/xml#annotation"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#uniqueName" , vars [0]    ] , ["/cedalionWeb/xml#annotation"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#modifyElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#modifyElement" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#modifyElement" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#replaceWith"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#replaceWith" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#replaceWith" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#prependTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#prependTo" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#prependTo" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#appendTo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#appendTo" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#appendTo" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#onDelayed"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#onDelayed" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [4]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [4]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [4]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#onDelayed" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#on"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#on"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#openPage"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#openPage" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#openPage" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#addKeyComponents"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#addKeyComponents" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#addKeyComponents" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#indexKey"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#indexKey" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#indexKey" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#applyKey"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#applyKey" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb#key"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb#key"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb#key"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#applyKey" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#queryKey"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#queryKey" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#key"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#queryKey" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#http"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#http" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]          ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [5]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [6]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [8]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [5]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [6]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [8]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [5]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [6]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [9]  , vars [10]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#http" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]          ] , ["/javascript/statepred#statePred"  ]    ] , vars [7]  , vars [8]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#badResponse"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#badResponse" , vars [0]    ] , ["/javascript/jsLogic#exception"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#badResponse" , vars [0]    ] , ["/javascript/jsLogic#exception"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#connectionError"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#connectionError" , vars [0]    ] , ["/javascript/jsLogic#exception"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#connectionError" , vars [0]    ] , ["/javascript/jsLogic#exception"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#getContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#getContent" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#getContent" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#get"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#get" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#get" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#put"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#put" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#put" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#json"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#json" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#json" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#dot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#dot" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#dot" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#string"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#string" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#string" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#jsonStringify"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#jsonStringify" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#jsonStringify" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#arrayElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#arrayElement" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#arrayElement" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#streamContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#streamContent" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/node#stream"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/node#stream"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/node#stream"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#streamContent" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#urlQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#urlQuery" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/node#queryArg"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/node#queryArg"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/node#queryArg"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#urlQuery" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#arg"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ] , ["/cedalionWeb/node#queryArg"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ] , ["/cedalionWeb/node#queryArg"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#implies"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#implies" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#dataStatement"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#dataStatement"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#dataStatement"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#implies" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#rewrite"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#rewrite" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#dataStatement"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#dataStatement"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb#dataStatement"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#dataStatement"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#rewrite" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cjs#runService"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cjs#runService" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb#service"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#request"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb#response"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb#service"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#request"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb#response"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb#service"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb#request"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb#response"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cjs#runService" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#runProcedure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#runProcedure" , vars [0]    ] , ["/cedalionWeb#service"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#runProcedure" , vars [0]    ] , ["/cedalionWeb#service"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#query"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#query" , vars [0]    ] , ["/cedalionWeb#service"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#query" , vars [0]    ] , ["/cedalionWeb#service"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/ui#displayWhile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/ui#displayWhile" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/ui#displayWhile" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/ui#ajaxFor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/ui#ajaxFor" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/ui#ajaxFor" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/ui#ul"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/ui#ul" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/ui#ul" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/ui#ulBody"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/ui#ulBody" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/ui#ulBody" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/ui#tabs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/ui#tabs" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/ui#tabs" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#actionIcon"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#actionIcon" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#actionIcon" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#editActionIcon"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#editActionIcon" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#editActionIcon" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#commandBar"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#commandBar" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#commandBar" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["." , ["::" , vars [0]  , vars [3]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/visualization#handle"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [3]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/visualization#handle"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [3]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/visualization#handle"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#propagateEditableDescriptors"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#propagateEditableDescriptors" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/cedalionWeb/visualization#handle"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/cedalionWeb/visualization#handle"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/cedalionWeb/visualization#handle"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#propagateEditableDescriptors" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#fastEdit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#fastEdit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["." , ["::" , vars [0]  , vars [4]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/cedalionWeb/visualization#feature"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , vars [4]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/cedalionWeb/visualization#feature"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , vars [4]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/cedalionWeb/visualization#feature"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#fastEdit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#propagateFastEditDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#propagateFastEditDescriptor" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/cedalionWeb/visualization#feature"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/cedalionWeb/visualization#feature"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/cedalionWeb/visualization#feature"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [8]  , vars [9]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#propagateFastEditDescriptor" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#bindFeature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#bindFeature" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#feature"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#feature"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#feature"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#bindFeature" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#selectable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#selectable" , vars [0]    ] , ["/cedalionWeb/visualization#feature"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#selection"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#selection"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#selection"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#selectable" , vars [0]    ] , ["/cedalionWeb/visualization#feature"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#suggestion"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#suggestion" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#suggestion" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#isSuggestion"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#isSuggestion" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#isSuggestion" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#suggestionBox"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#suggestionBox" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#handle"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#handle"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#handle"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#suggestionBox" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#edit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#visualizeDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#visualizeDescriptor" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#removeDescriptorsFromType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#removeDescriptorsFromType" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#removeDescriptorsFromType" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#visualizeNumber"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#visualizeNumber" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#visualizeNumber" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#visualizeString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#visualizeString" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#visualizeString" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#visualizeCompound"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#visualizeCompound" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#visualizeCompound" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#propagateDescriptor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#propagateDescriptor" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#propagateDescriptor" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#propagateImmediateDescriptors"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#propagateImmediateDescriptors" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#propagateImmediateDescriptors" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#bind"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#bind" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#bind" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#bind"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#bind" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#bind" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#visualizeVar"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#visualizeVar" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#visualizeVar" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#varName"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#varName" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , vars [3]     ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , vars [3]     ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , vars [3]     ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#varName" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#varNameVisualization"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#varNameVisualization" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#varNameVisualization" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#specialVarNameVisualization"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#specialVarNameVisualization" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#specialVarNameVisualization" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#toHTML"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#toHTML" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#toHTML" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#toHTMLList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#toHTMLList" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#toHTMLList" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#defineModifier"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#defineModifier" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#defineModifier" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#rgbToText"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#rgbToText" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#rgbToText" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#for"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#for" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#for" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#xmlList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#xmlList" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#xml"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#xmlList" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#list"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#list" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#list" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#macro"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#macro" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#macro" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#genAttrTrans"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#genAttrTrans" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#genAttrTrans" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#elemToElem2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#elemToElem2" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#elemToElem2" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#transformAttrs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#transformAttrs" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attribute"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attribute"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attribute"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#transformAttrs" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#gen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#gen" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#gen" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#generates"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#attr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attr"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attr"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#genAttr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#genAttr" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#genAttr" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#elem"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#elem" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attr"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#elem" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#str"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#str" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#str" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#entity"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#entity" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#entity" , vars [0]    ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#elem2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#elem2" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attribute"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attribute"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attribute"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#elem2" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#generates2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#generates2" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#generates2" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#genAttr2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#genAttr2" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attribute"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attribute"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/xml#attribute"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#genAttr2" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#attr2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#attr2" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attribute"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#attr2" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#attribute"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#gen2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#gen2" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/cedalionWeb/xml#annotation"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#gen2" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#xmlEncode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#xmlEncode" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#xmlEncode" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/debugging#generateVarNames"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/debugging#generateVarNames" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/debugging#generateVarNames" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/debugging#generateVarNamesList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/debugging#generateVarNamesList" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/debugging#generateVarNamesList" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/bootstrap#pred"  ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/debugging#completeVarNames"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/debugging#completeVarNames" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/debugging#completeVarNames" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/debugging#createSubTests"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/debugging#createSubTests" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["cpi#path"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/debugging#createSubTests" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#procedure"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#showXml"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#showXml" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#showXml" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#xmlEncode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#xmlEncode" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#xmlEncode" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#encodeCharCodes"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#encodeCharCodes" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#encodeCharCodes" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#isEntity"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#isEntity" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#isEntity" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#entity"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#entity" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#entity" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#asHexString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#asHexString" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#asHexString" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#hexDigit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#hexDigit" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#hexDigit" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#simplePage"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#simplePage" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/Functional#expr" , ["/html#xml"  ]   ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/Functional#expr" , ["/html#xml"  ]   ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/Functional#expr" , ["/html#xml"  ]   ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#simplePage" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#head"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#head" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#head" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#paragraph"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#paragraph" , vars [0]    ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#paragraph" , vars [0]    ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#person"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#person" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#person" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#listComp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#listComp" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#listComp" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , ["/bootstrap#list" , vars [3]    ]   ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#toText"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#toText" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#toText" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#vis2html"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#vis2html" , vars [0]    ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#vis2html" , vars [0]    ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#colorString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#colorString" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#color"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#colorString" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#asString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#asString" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#asString" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#vis2htmlList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#vis2htmlList" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#list" , ["/html#xml"  ]   ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#visualization"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#vis2htmlList" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#list" , ["/html#xml"  ]   ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#writeHtmlFor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#writeHtmlFor" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#writeHtmlFor" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "xml#element"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["xml#element" , vars [0]  , vars [1]  , vars [2]      ] , ["/html#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/html#xml"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/html#xml"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/html#xml"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["xml#element" , vars [0]  , vars [1]  , vars [2]      ] , ["/html#xml"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "xml#attribute"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["xml#attribute" , vars [0]  , vars [1]  , vars [2]      ] , ["/html#xmlAttr"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , vars [1]     ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , vars [1]     ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , vars [1]     ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["xml#attribute" , vars [0]  , vars [1]  , vars [2]      ] , ["/html#xmlAttr"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "xml#string"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["xml#string" , vars [0]    ] , ["/html#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["xml#string" , vars [0]    ] , ["/html#xml"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#unicode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#unicode" , vars [0]    ] , ["/html#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#unicode" , vars [0]    ] , ["/html#xml"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/ajax#ajaxDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/ajax#ajaxDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/ajax#ajaxExpr" , vars [0]    ]    ] , ["." , ["::" , vars [2]  , ["/javascript/ajax#ajaxExpr" , vars [0]    ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/ajax#ajaxExpr" , vars [0]    ]    ] , ["." , ["::" , vars [2]  , ["/javascript/ajax#ajaxExpr" , vars [0]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/ajax#ajaxExpr" , vars [0]    ]    ] , ["." , ["::" , vars [2]  , ["/javascript/ajax#ajaxExpr" , vars [0]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/ajax#ajaxDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/ajax#ajaxExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/ajax#ajaxExpr" , vars [0]    ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/ajax#ajaxExpr" , vars [0]    ] , ["/bootstrap#type"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cjs#ajaxEval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cjs#ajaxEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/ajax#ajaxExpr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript/ajax#request"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/ajax#ajaxExpr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript/ajax#request"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/ajax#ajaxExpr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , vars [1]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript/ajax#request"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cjs#ajaxEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/ajax#applyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/ajax#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ] , ["." , ["::" , vars [0]  , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/ajax#applyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/ajax#ajaxExpr" , vars [3]    ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#array"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#array" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#array" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#arrayElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#arrayElement" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#arrayElement" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#var"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#var" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#symbol"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#symbol"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#symbol"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#var" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#const"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#const" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#const" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#assign"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#assign" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#assign" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#andThen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#andThen" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#andThen" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#asyncProc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#asyncProc" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#asyncProc" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#doProc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#doProc" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#doProc" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#wait"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#wait" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#wait" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#sync"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#sync" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#sync" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#catch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#catch" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#exception"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#exception"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#exception"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#catch" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#throw"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#throw" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#exception"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#exception"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#exception"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#throw" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#log"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#log" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#log" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#procDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#procDef" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#procDef" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#block"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#block" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript/asyncproc#asyncProc"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript/asyncproc#asyncProc"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript/asyncproc#asyncProc"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#block" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#new"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#new" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#new" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#toString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#toString" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#toString" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#toString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#toString" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#toString" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#hasSpecialRendering"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#hasSpecialRendering" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#hasSpecialRendering" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#visToString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#visToString" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#visToString" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#macro"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#macro" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#macro" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#debug"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#debug" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#debug" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#return"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#return" , vars [0]    ] , ["/javascript#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#return" , vars [0]    ] , ["/javascript#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#varExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#varExpr" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#symbol"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#varExpr" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#call"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#call" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#call" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#exprStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#exprStatement" , vars [0]    ] , ["/javascript#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#exprStatement" , vars [0]    ] , ["/javascript#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#javascript"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#javascript" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#javascript" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#function"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#function" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#symbol"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#symbol"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#symbol"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#function" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#twoStatements"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#twoStatements" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#statement"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#statement"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#statement"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#twoStatements" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#equal"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#equal" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#equal" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#if"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#statementsWoAnnotations"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#statementsWoAnnotations" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#statementsWoAnnotations" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#statement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#statement" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#statement" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#statement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#statement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#statement" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#pred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#pred" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#predicateID"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#pred" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#predicateID"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#headPredicate"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#headPredicate" , vars [0]    ] , ["/Functional#expr" , ["/javascript/jsLogic#predicateID"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#headPredicate" , vars [0]    ] , ["/Functional#expr" , ["/javascript/jsLogic#predicateID"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#predicateID"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#predicateID" , vars [0]    ] , ["/Functional#expr" , ["/javascript/jsLogic#predicateID"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#pred"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#pred"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#pred"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#predicateID" , vars [0]    ] , ["/Functional#expr" , ["/javascript/jsLogic#predicateID"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#g"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#g" , vars [0]    ] , ["/javascript#symbol"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#g" , vars [0]    ] , ["/javascript#symbol"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#clauseFunction"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#clauseFunction" , vars [0]    ] , ["/Functional#expr" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#clauseFunction" , vars [0]    ] , ["/Functional#expr" , ["/javascript#expr"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#goalFunction"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#goalFunction" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/javascript#statement"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#goalFunction" , vars [0]  , vars [1]     ] , ["/Functional#expr" , ["/javascript#statement"  ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#length"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#length" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#length" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#try"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#try" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#exception"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#exception"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#exception"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#try" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#throw"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#throw" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#exception"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#exception"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#exception"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#throw" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#typeof"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#typeof" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#typeof" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#firstArgName"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#firstArgName" , vars [0]    ] , ["/Functional#expr" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#firstArgName" , vars [0]    ] , ["/Functional#expr" , ["/javascript#expr"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#deepIndex"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#deepIndex" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#deepIndex" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#jsStatementsForClauses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#jsStatementsForClauses" , vars [0]    ] , ["/bootstrap#set" , ["/javascript#statement"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#jsStatementsForClauses" , vars [0]    ] , ["/bootstrap#set" , ["/javascript#statement"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#jsStatementStrings"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#jsStatementStrings" , vars [0]    ] , ["/bootstrap#set" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#jsStatementStrings" , vars [0]    ] , ["/bootstrap#set" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#writeClauses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#writeClauses" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#writeClauses" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#inlineTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#inlineTerm" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#inlineTerm" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#length"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#length" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#length" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#specialExtractTerms"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#specialExtractTerms" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#specialExtractTerms" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#extractTerms"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#extractTerms" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#extractTerms" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#extractTermsList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#extractTermsList" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#extractTermsList" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#extractJsExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#extractJsExpr" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [8]  , vars [9]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#extractJsExpr" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#extractJsExprList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#extractJsExprList" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [8]  , vars [9]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#extractJsExprList" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#specialExtractJsExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#specialExtractJsExpr" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [7]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [4]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [5]  , ["/bootstrap#list" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [8]  , vars [9]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#specialExtractJsExpr" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , ["/bootstrap#pred"  ]    ] , vars [6]  , vars [7]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#bodyIncludesGoal"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#bodyIncludesGoal" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#pred"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#pred"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#pred"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#bodyIncludesGoal" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#reachableFrom"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#reachableFrom" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#list" , ["/javascript/jsLogic#predicateID"  ]   ]   ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#predicateID"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#predicateID"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#predicateID"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#reachableFrom" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#list" , ["/javascript/jsLogic#predicateID"  ]   ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#procedure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#procedure" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#procedure" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cjs#procedureCommand"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cjs#procedureCommand" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cjs#procedureCommand" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#concreteCommand"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#concreteCommand" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#concreteCommand" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#runProcedure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#runProcedure" , vars [0]    ] , ["/javascript#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#runProcedure" , vars [0]    ] , ["/javascript#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#main2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#main2" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#main2" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#foreach"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#do"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#do" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#do" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#renderHTML"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#renderHTML" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#renderHTML" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#jsTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#jsTerm" , vars [0]    ] , ["/Functional#expr" , ["/javascript#expr"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#jsTerm" , vars [0]    ] , ["/Functional#expr" , ["/javascript#expr"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#specialTermConversion"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#specialTermConversion" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/javascript#expr"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#specialTermConversion" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#json"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#json" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#fieldAssignment"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#fieldAssignment"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript#fieldAssignment"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#json" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#bind"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#bind" , vars [0]  , vars [1]     ] , ["/javascript#fieldAssignment"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#bind" , vars [0]  , vars [1]     ] , ["/javascript#fieldAssignment"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#str"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#str" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#str" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#dot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#dot" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#dot" , vars [0]  , vars [1]     ] , ["/javascript#expr"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#op"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#operator"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#operator"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript#operator"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#op" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript#expr"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/optimization#concatGoals"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/optimization#concatGoals" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/optimization#concatGoals" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/optimization#removeTrivial"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/optimization#removeTrivial" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/optimization#removeTrivial" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/optimization#partialEvalClauses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/optimization#partialEvalClauses" , vars [0]    ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/optimization#partialEvalClauses" , vars [0]    ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/optimization#partialEval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/optimization#partialEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/optimization#partialEval" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/optimization#specialPartial"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/optimization#specialPartial" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/optimization#specialPartial" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/optimization#isBuiltin"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/optimization#isBuiltin" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/optimization#isBuiltin" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/optimization#a"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/optimization#a" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/optimization#a" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#async"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#async" , vars [0]    ] , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#async" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#countToThree"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#countToThree" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#countToThree" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#countToThree1"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#countToThree1" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#countToThree1" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#doAll"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#doAll" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript/jsLogic#jsCommand"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript/jsLogic#jsCommand"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript/jsLogic#jsCommand"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#doAll" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#countToThree2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#countToThree2" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#countToThree2" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#clause"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#clause" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#clause" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#stateClause"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#stateClause" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#stateClause" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#conj"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#conj" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#conj" , vars [0]  , vars [1]     ] , ["/javascript/statepred#statePred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#test1"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#test1" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#test1" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#for (s)"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#for (s)" , vars [0]  , vars [1]     ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#for (s)" , vars [0]  , vars [1]     ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#findall"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#if"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#jsFunction"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#jsFunction" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#jsFunction" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#str2num"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#str2num" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#str2num" , vars [0]    ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#number"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#not"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#not" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#not" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#pair"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#pair" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [2]  , vars [3]     ]   ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#pair" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , ["/Functional#pairType" , vars [2]  , vars [3]     ]   ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#stateSet"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#stateSet" , vars [0]    ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#stateSet" , vars [0]    ] , ["/bootstrap#type"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#member"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#set"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#set" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateSet" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , vars [2]     ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#set" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateSet" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#setDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#setDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateSet" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#setDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#eset"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#eset" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateSet" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#eset" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateSet" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#stateExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#stateExpr" , vars [0]    ] , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#stateExpr" , vars [0]    ] , ["/bootstrap#type"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#stateEval"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#stateEval" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , vars [1]     ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , vars [1]     ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [1]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , vars [1]     ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#stateEval" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#statePred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#stateApplyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/Functional#binOp" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/statepred#stateExpr" , vars [3]    ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#stateExprDef"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#stateExprDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#stateExprDef" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#expr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#expr" , vars [0]    ] , ["/javascript/statepred#stateExpr" , vars [1]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [1]    ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#expr" , vars [0]    ] , ["/javascript/statepred#stateExpr" , vars [1]    ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#where" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#where" , vars [0]  , vars [1]     ] , ["/javascript/statepred#stateExpr" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#whenever"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#whenever"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#pred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#pred" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#pred" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#frame"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#frame" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#frame" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#frame"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#frame" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#frame"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#frame"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/statepred#frame"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#frame" , vars [0]  , vars [1]  , vars [2]      ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#unframe"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#unframe" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#frame"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#frame"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#frame"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#unframe" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#trace"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#trace" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#trace" , vars [0]    ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#tracePred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#tracePred" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#tracePred" , vars [0]    ] , ["/javascript/statepred#statePred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#unitTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#runAllTests"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#runAllTests" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript/statepred#statePred"  ]   ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript/statepred#statePred"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/javascript/statepred#statePred"  ]   ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#runAllTests" , vars [0]    ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#unitTest"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#unitTest" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#unitTest" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#encodeString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#encodeString" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#encodeString" , vars [0]    ] , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#encodeCodes"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#encodeCodes" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#encodeCodes" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#specialChar"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#specialChar" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#specialChar" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#while"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#while" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/javascript#expr"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript#statement"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#while" , vars [0]  , vars [1]     ] , ["/javascript#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#htmlTerms"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#htmlTerms" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/visualization#jQueryElem"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/visualization#jQueryElem"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/cedalionWeb/visualization#jQueryElem"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#htmlTerms" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#htmlTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#htmlTerm" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/cedalionWeb/visualization#jQueryElem"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#htmlTerm" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#statePred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#numPlus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#numPlus"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#numPlus"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#minus"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#minus"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#times"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#times"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#times"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#divBy"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#divBy"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#divBy"  ] , ["/Functional#binOp" , ["/bootstrap#number"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#fib"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#fib"  ] , ["/Functional#expr" , ["/Functional#seq" , ["/bootstrap#number"  ]   ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#fib"  ] , ["/Functional#expr" , ["/Functional#seq" , ["/bootstrap#number"  ]   ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#concat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#concat"  ] , ["/Functional#binOp" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#concat"  ] , ["/Functional#binOp" , ["/bootstrap#string"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Functional#zero"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Functional#zero"  ] , ["/Functional#expr" , vars [0]    ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Functional#zero"  ] , ["/Functional#expr" , vars [0]    ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#a"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#a"  ] , ["/Test/bnf#token"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#a"  ] , ["/Test/bnf#token"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#b"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#b"  ] , ["/Test/bnf#token"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#b"  ] , ["/Test/bnf#token"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#s"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#s"  ] , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#s"  ] , ["/Test/bnf#pattern"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#empty"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#empty"  ] , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#empty"  ] , ["/Test/bnf#pattern"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#token"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#token"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#token"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#pattern"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#pattern"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#pattern"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#trainQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#trainQuery"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#trainQuery"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#routeQueryType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#routeQueryType"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#routeQueryType"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#timeQueryType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#timeQueryType"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#timeQueryType"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#today"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#today"  ] , ["/Test/bnf#timeQueryType"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#today"  ] , ["/Test/bnf#timeQueryType"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#tomorrow"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#tomorrow"  ] , ["/Test/bnf#timeQueryType"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#tomorrow"  ] , ["/Test/bnf#timeQueryType"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#query"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#query"  ] , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#query"  ] , ["/Test/bnf#pattern"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#routeQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#routeQuery"  ] , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#routeQuery"  ] , ["/Test/bnf#pattern"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#timeQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#timeQuery"  ] , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#timeQuery"  ] , ["/Test/bnf#pattern"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#spacer1"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#spacer1"  ] , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#spacer1"  ] , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#spacer2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#spacer2"  ] , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#spacer2"  ] , ["/bootstrap#set" , ["/bootstrap#list" , ["/bioinformatics#base"  ]   ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#eventType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#eventType"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#eventType"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#eventTime"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#eventTime"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#eventTime"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#ampm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#ampm"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#ampm"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#conferenceDay"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#conferenceDay"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#conferenceDay"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#location"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#location"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#location"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#direction"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#direction"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#direction"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#alignment"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#alignment"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#alignment"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#bottom"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#bottom"  ] , ["/bootstrap#alignment"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#bottom"  ] , ["/bootstrap#alignment"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#top"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#top"  ] , ["/bootstrap#alignment"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#top"  ] , ["/bootstrap#alignment"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#middle"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#middle"  ] , ["/bootstrap#alignment"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#middle"  ] , ["/bootstrap#alignment"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#Yellow tag.png"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#Yellow tag.png"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#Yellow tag.png"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#type"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#type"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#type"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#string"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#string"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#string"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#horizCont"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#horizCont"  ] , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#horizCont"  ] , ["/bootstrap#mode"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#wavy-arrow.png"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#wavy-arrow.png"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#wavy-arrow.png"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#menuEntry"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#menuEntry"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#menuEntry"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#noop"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#noop"  ] , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#noop"  ] , ["/bootstrap#procedure"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#none"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#none"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#none"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#noPath"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#noPath"  ] , ["cpi#path"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#noPath"  ] , ["cpi#path"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#Undo.png"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#Undo.png"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#Undo.png"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#Redo.png"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#Redo.png"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#Redo.png"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#Cut.png"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#Cut.png"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#Cut.png"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#definitionType"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#definitionType"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#definitionType"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#semanticDefinition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#semanticDefinition"  ] , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#semanticDefinition"  ] , ["/bootstrap#definitionType"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#typeSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#typeSignature"  ] , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#typeSignature"  ] , ["/bootstrap#definitionType"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#projectionDefinition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#projectionDefinition"  ] , ["/bootstrap#definitionType"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#projectionDefinition"  ] , ["/bootstrap#definitionType"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#Search.png"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#Search.png"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#Search.png"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#exportCedalionProgram"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#exportCedalionProgram"  ] , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#exportCedalionProgram"  ] , ["/bootstrap#procedure"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#undoFrame"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#undoFrame"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#undoFrame"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#model"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#model"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#model"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#nsElem"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#nsElem"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#nsElem"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#annotatedTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#annotatedTerm"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#annotatedTerm"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#topLevel"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#topLevel"  ] , ["/bootstrap#marker"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#topLevel"  ] , ["/bootstrap#marker"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#notTopLevel"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#notTopLevel"  ] , ["/bootstrap#marker"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#notTopLevel"  ] , ["/bootstrap#marker"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#image"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#image"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#image"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#Paste.png"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#Paste.png"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#Paste.png"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#New.png"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#New.png"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#New.png"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#vert"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#vert"  ] , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#vert"  ] , ["/bootstrap#mode"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#procedure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#procedure"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#procedure"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#command"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#command"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#command"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#statement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#statement"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#statement"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#typedTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#typedTerm"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#typedTerm"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#fileContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#fileContent"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#fileContent"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#number"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#number"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#number"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#varName"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#varName"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#varName"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#namespacePair"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#namespacePair"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#namespacePair"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#shrink"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#shrink"  ] , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#shrink"  ] , ["/bootstrap#mode"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#signatureSizeMismatch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#signatureSizeMismatch"  ] , ["/bootstrap#error"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#signatureSizeMismatch"  ] , ["/bootstrap#error"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#Magic wand.png"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#Magic wand.png"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#Magic wand.png"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#marker"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#marker"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#marker"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#locMarker"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#locMarker"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#locMarker"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#error"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#error"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#error"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#exception"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#exception"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#exception"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#showFailedTests"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#showFailedTests"  ] , ["/bootstrap#procedure"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#showFailedTests"  ] , ["/bootstrap#procedure"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#Create.png"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#Create.png"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#Create.png"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#Delete.png"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#Delete.png"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#Delete.png"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#Error.png"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#Error.png"  ] , ["/bootstrap#image"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#Error.png"  ] , ["/bootstrap#image"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#visualization"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#visualization"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#visualization"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#mode"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#mode"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#mode"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#color"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#color"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#color"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/couchdb#emit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/couchdb#emit"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/couchdb#emit"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/couchdb#database"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/couchdb#database"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/couchdb#database"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#index"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#index"  ] , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#index"  ] , ["/bootstrap#mode"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/crud#myModel"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/crud#myModel"  ] , ["/cedalionWeb/crud#model" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/crud#myModel"  ] , ["/cedalionWeb/crud#model" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#setTimeout"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#setTimeout"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#setTimeout"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#animateAction"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#animateAction"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#animateAction"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/jquery#clearTimeout"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/jquery#clearTimeout"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/jquery#clearTimeout"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#key"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#key"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#key"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#Array"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#Array"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#Array"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#Variable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#Variable"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#Variable"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#require"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#require"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#require"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#stream"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#stream"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#stream"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#queryArg"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#queryArg"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#queryArg"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/node#encodeURIComponent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/node#encodeURIComponent"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/node#encodeURIComponent"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#dataStatement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#dataStatement"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#dataStatement"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#service"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#service"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#service"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#request"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#request"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#request"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb#response"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb#response"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb#response"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/ui#helloButton"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/ui#helloButton"  ] , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/ui#helloButton"  ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#handle"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#handle"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#handle"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#feature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#feature"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#feature"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#selection"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#selection"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#selection"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#jQueryElem"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#jQueryElem"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#jQueryElem"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#document"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#document"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#document"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cjs#webMain"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cjs#webMain"  ] , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cjs#webMain"  ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#predictiveUniqueIDs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#predictiveUniqueIDs"  ] , ["/javascript/statepred#statePred"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#predictiveUniqueIDs"  ] , ["/javascript/statepred#statePred"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#this"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#this"  ] , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#this"  ] , ["/javascript#expr"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#xml"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#xml"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#xml"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#attr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#attr"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#attr"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#empty"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#empty"  ] , ["/cedalionWeb/xml#xml"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#empty"  ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#attribute"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#attribute"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#attribute"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/xml#annotation"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/xml#annotation"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/xml#annotation"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#myPage"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#myPage"  ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#myPage"  ] , ["/Functional#expr" , ["/html#xml"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#xml"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#xml"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#xml"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#xmlAttr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#xmlAttr"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#xmlAttr"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/html#xmlAttrValue"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/html#xmlAttrValue"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/html#xmlAttrValue"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/ajax#request"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/ajax#request"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/ajax#request"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#asyncProc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#asyncProc"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#asyncProc"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#helloException"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#helloException"  ] , ["/javascript/jsLogic#exception"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#helloException"  ] , ["/javascript/jsLogic#exception"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#testThrow1"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#testThrow1"  ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#testThrow1"  ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#testThrow2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#testThrow2"  ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#testThrow2"  ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#otherException"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#otherException"  ] , ["/javascript/jsLogic#exception"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#otherException"  ] , ["/javascript/jsLogic#exception"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#testThrow3Helper"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#testThrow3Helper"  ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#testThrow3Helper"  ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/asyncproc#testThrow3"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/asyncproc#testThrow3"  ] , ["/javascript/asyncproc#asyncProc"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/asyncproc#testThrow3"  ] , ["/javascript/asyncproc#asyncProc"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "test#testThrow"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["test#testThrow"  ] , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["test#testThrow"  ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#date"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#date"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#date"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#statement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#statement"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#statement"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#symbol"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#symbol"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#symbol"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#expr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#expr"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#expr"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#foo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#foo"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#foo"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#a"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#a"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#a"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#b"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#b"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#b"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#bar"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#bar"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#bar"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#return"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#return"  ] , ["/javascript#statement"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#return"  ] , ["/javascript#statement"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#true"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#true"  ] , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#true"  ] , ["/javascript#expr"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#false"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#false"  ] , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#false"  ] , ["/javascript#expr"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#allClauses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#allClauses"  ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#allClauses"  ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#predicateID"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#predicateID"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#predicateID"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#vars"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#vars"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#vars"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#Variable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#Variable"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#Variable"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#logic"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#logic"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#logic"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#next"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#next"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#next"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#term"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#term"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#term"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#exception"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#exception"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#exception"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#null"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#null"  ] , ["/javascript#expr"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#null"  ] , ["/javascript#expr"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#a"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#a"  ] , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#a"  ] , ["/bootstrap#pred"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#b"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#b"  ] , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#b"  ] , ["/bootstrap#pred"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#jsCommand"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#jsCommand"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#jsCommand"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#terms"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#terms"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#terms"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#jsExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#jsExpr"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#jsExpr"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#termExprs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#termExprs"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#termExprs"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#exprs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#exprs"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#exprs"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#transition"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#transition"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#transition"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#t"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#t"  ] , ["/javascript/jsLogic#transition"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#t"  ] , ["/javascript/jsLogic#transition"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#procedure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#procedure"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#procedure"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#main"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#main"  ] , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#main"  ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#console"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#console"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#console"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#jQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#jQuery"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#jQuery"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#onClick"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#onClick"  ] , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#onClick"  ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#JSON"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#JSON"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#JSON"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/jsLogic#runUnitTests"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/jsLogic#runUnitTests"  ] , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/jsLogic#runUnitTests"  ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#createJSON"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#createJSON"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#createJSON"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#fieldAssignment"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#fieldAssignment"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#fieldAssignment"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#operator"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#operator"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#operator"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#plus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#plus"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#plus"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#minus"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#minus"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#minus"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#times"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#times"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#times"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#div"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#div"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#div"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#and"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#and"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#and"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#or"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#or"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#eq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#eq"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#eq"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#eqq"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#eqq"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#eqq"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#gt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#gt"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#gt"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#lt"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#lt"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#lt"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#ne"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#ne"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#ne"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#instanceof"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#instanceof"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#instanceof"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#gte"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#gte"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#gte"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#lte"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#lte"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#lte"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "mod"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["mod"  ] , ["/javascript#operator"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["mod"  ] , ["/javascript#operator"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/optimization#testStatements"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/optimization#testStatements"  ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/optimization#testStatements"  ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/optimization#optAllClauses"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/optimization#optAllClauses"  ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/optimization#optAllClauses"  ] , ["/bootstrap#set" , ["/bootstrap#statement"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#parseFloat"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#parseFloat"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#parseFloat"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#main"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#main"  ] , ["/javascript/jsLogic#procedure"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#main"  ] , ["/javascript/jsLogic#procedure"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#Math"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#Math"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#Math"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#statePred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#statePred"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#statePred"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#frame"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#frame"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#frame"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#unitTests"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#unitTests"  ] , ["/bootstrap#set" , ["/javascript/statepred#statePred"  ]   ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#unitTests"  ] , ["/bootstrap#set" , ["/javascript/statepred#statePred"  ]   ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript#break"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript#break"  ] , ["/javascript#statement"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript#break"  ] , ["/javascript#statement"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#String"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#String"  ] , ["/javascript#symbol"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#String"  ] , ["/javascript#symbol"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#autocomplete"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#autocomplete"  ] , ["/cedalionWeb/visualization#feature"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#autocomplete"  ] , ["/cedalionWeb/visualization#feature"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/visualization#autocompleteOption"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/visualization#autocompleteOption"  ] , ["/cedalionWeb/visualization#feature"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/visualization#autocompleteOption"  ] , ["/cedalionWeb/visualization#feature"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#researchPaper"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#researchPaper"  ] , ["/Test#eventType"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#researchPaper"  ] , ["/Test#eventType"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#demo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#demo"  ] , ["/Test#eventType"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#demo"  ] , ["/Test#eventType"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#am"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#am"  ] , ["/Test#ampm"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#am"  ] , ["/Test#ampm"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#pm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#pm"  ] , ["/Test#ampm"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#pm"  ] , ["/Test#ampm"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#tue"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#tue"  ] , ["/Test#conferenceDay"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#tue"  ] , ["/Test#conferenceDay"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#wed"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#wed"  ] , ["/Test#conferenceDay"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#wed"  ] , ["/Test#conferenceDay"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#thu"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#thu"  ] , ["/Test#conferenceDay"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#thu"  ] , ["/Test#conferenceDay"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#east"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#east"  ] , ["/Test#direction"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#east"  ] , ["/Test#direction"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#charCodes"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#charCodes" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#charCodes" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#docSignature"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#docSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#docSignature" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#path"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#path"  ] , ["/bootstrap#type"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#path"  ] , ["/bootstrap#type"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#path"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#path" , vars [0]  , vars [1]     ] , ["cpi#path"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#number"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#path" , vars [0]  , vars [1]     ] , ["cpi#path"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#termAtPath"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#termAtPath" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#termAtPath" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#parseTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#parseTerm" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#parseTerm" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#succ"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#succ" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#succ" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#setAtPath"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#setAtPath" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#setAtPath" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#if"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#if" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#edit"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#edit" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#edit" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#undo"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#undo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#undo" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#isModified"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#isModified" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#isModified" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#termAsString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#termAsString" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#termAsString" , vars [0]  , vars [1]     ] , ["/bootstrap#expr" , ["/bootstrap#string"  ]   ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#editFromString"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#editFromString" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#ref" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#ref" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#ref" , ["/bootstrap#string"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#editFromString" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#openFile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#openFile" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#openFile" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#procedure"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#closeFile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#closeFile" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#closeFile" , vars [0]    ] , ["/bootstrap#procedure"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#fileContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#fileContent" , vars [0]  , vars [1]     ] , ["/bootstrap#fileContent"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#annotatedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#nsElem"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#annotatedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#nsElem"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , ["/bootstrap#annotatedTerm"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#nsElem"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#fileContent" , vars [0]  , vars [1]     ] , ["/bootstrap#fileContent"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#constExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#constExpr" , vars [0]    ] , ["/bootstrap#expr" , vars [1]    ]    ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#constExpr" , vars [0]    ] , ["/bootstrap#expr" , vars [1]    ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#statement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#statement" , vars [0]  , vars [1]     ] , ["/bootstrap#annotatedTerm"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#statement" , vars [0]  , vars [1]     ] , ["/bootstrap#annotatedTerm"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#varName"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#varName" , vars [0]  , vars [1]     ] , ["/bootstrap#varName"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#varName" , vars [0]  , vars [1]     ] , ["/bootstrap#varName"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#equals"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#equals" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#equals" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#saveFile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#saveFile" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#saveFile" , vars [0]  , vars [1]     ] , ["/bootstrap#procedure"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#import"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#import" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#import" , vars [0]  , vars [1]     ] , ["/bootstrap#statement"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#findall"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , vars [1]     ] , ["." , ["::" , vars [1]  , ["/bootstrap#type"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#list" , vars [1]    ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#default"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#default"  ] , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#default"  ] , ["/bootstrap#mode"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#copyTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#copyTerm" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#copyTerm" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#structurallyEqual"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#structurallyEqual" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#structurallyEqual" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#var"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#var" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#var" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#string"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#string" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#string" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#number"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#number" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#number" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#safeUnify"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#safeUnify" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#safeUnify" , vars [0]  , vars [1]     ] , ["/bootstrap#pred"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#throw"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#throw" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#exception"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#exception"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#exception"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#throw" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#fail"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#fail"  ] , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [1]  , ["[]"  ] , ["/bootstrap#signaturePlaceMismatch" , vars [2]  , vars [3]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#fail"  ] , ["/bootstrap#pred"  ]    ] , vars [0]  , vars [1]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#catch"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#catch" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#exception"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#exception"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#exception"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#pred"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#catch" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#pred"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#vis" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#vis" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#vis" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#mode"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#vis" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cpi#rgb"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cpi#rgb" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#color"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#number"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#number"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cpi#rgb" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#color"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "builtin#ground"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["builtin#ground" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["builtin#ground" , vars [0]    ] , ["/bootstrap#pred"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test/bnf#or"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test/bnf#or" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/Test/bnf#pattern"  ]    ] , ["." , ["::" , vars [1]  , ["/Test/bnf#pattern"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test/bnf#or" , vars [0]  , vars [1]     ] , ["/Test/bnf#pattern"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/Test#event"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/Test#event" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/Test#eventType"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#eventTime"  ]    ] , ["." , ["::" , vars [3]  , ["/Test#location"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Test#eventType"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#eventTime"  ]    ] , ["." , ["::" , vars [3]  , ["/Test#location"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/Test#eventType"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [2]  , ["/Test#eventTime"  ]    ] , ["." , ["::" , vars [3]  , ["/Test#location"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/Test#event" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#append"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#append" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , vars [3]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , vars [3]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/bootstrap#list" , vars [3]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , vars [3]    ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , vars [3]    ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#type"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#append" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#error"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#error" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#error"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#error"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["cpi#path"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/bootstrap#error"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#error" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#pred"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#sigProj"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#sigProj" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/bootstrap#typedTerm"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#sigProj" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#statement"  ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#raised"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#raised" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#raised" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/bootstrap#lowered"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/bootstrap#lowered" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [2]  , ["." , ["::" , vars [0]  , ["/bootstrap#visualization"  ]    ] , ["[]"  ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [3]  , vars [4]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/bootstrap#lowered" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , vars [1]  , vars [2]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/couchdb#viewResults"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/couchdb#viewResults" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [4]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [4]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [6]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [1]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [2]  , ["/Functional#expr" , ["/bootstrap#string"  ]   ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["." , ["::" , vars [4]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [7]  , vars [8]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/couchdb#viewResults" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#stateSet" , ["/javascript/jsLogic#jsExpr"  ]   ]    ] , vars [5]  , vars [6]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/cedalionWeb/ui#button"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/cedalionWeb/ui#button" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/cedalionWeb/ui#button" , vars [0]  , vars [1]     ] , ["/cedalionWeb/xml#xml"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/ajax#ajaxExpr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/ajax#ajaxExpr" , vars [0]  , vars [1]     ] , ["/javascript/ajax#ajaxExpr" , vars [2]    ]    ] , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript/ajax#request"  ]   ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript/ajax#request"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [4]  , ["." , ["::" , vars [0]  , ["/Functional#expr" , vars [2]    ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#list" , ["/javascript/ajax#request"  ]   ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [5]  , vars [6]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/ajax#ajaxExpr" , vars [0]  , vars [1]     ] , ["/javascript/ajax#ajaxExpr" , vars [2]    ]    ] , vars [3]  , vars [4]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "cjs#get"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["cjs#get" , vars [0]  , vars [1]     ] , ["/javascript/ajax#request"  ]    ] , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [3]  , ["." , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["." , ["::" , vars [1]  , ["/bootstrap#typedTerm"  ]    ] , ["[]"  ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [4]  , vars [5]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["cjs#get" , vars [0]  , vars [1]     ] , ["/javascript/ajax#request"  ]    ] , vars [2]  , vars [3]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#checkSignature" , "::" , "/javascript/statepred#def"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/bootstrap#checkSignature" , ["::" , ["/javascript/statepred#def" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ]    ] , term   )  ) { 
     var g2   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signatureSizeMismatch"  ]     ]   ] , next   )  ;  


}
 ; 
var g1   = function () { 
     logic . call  (["\\+" , ["/bootstrap#checkSignature" , vars [5]  , ["." , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["." , ["::" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [2]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["." , ["::" , vars [3]  , ["/javascript/jsLogic#jsCommand"  ]    ] , ["[]"  ]    ]    ]    ]    ] , ["/bootstrap#signaturePlaceMismatch" , vars [6]  , vars [7]     ]     ]   ] , g2     )  ;  


}
 ; 

var g0   = function () { 
     logic . call  (["builtin#parseTerm" , ["::" , ["/javascript/statepred#def" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/bootstrap#statement"  ]    ] , vars [4]  , vars [5]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#errorSolution" , "/bootstrap#typesNotFullyInstantiated"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#errorSolution" , ["/bootstrap#typesNotFullyInstantiated" , vars [0]  , vars [1]     ] , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , vars [0]  , ["/bootstrap#statement"  ]    ] , vars [2]      ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#errorSolution" , "/bootstrap#testNotFullyInstantiated"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/bootstrap#errorSolution" , ["/bootstrap#testNotFullyInstantiated" , vars [0]  , vars [1]  , vars [2]      ] , vars [2]  , ["cpi#edit" , vars [1]  , ["::" , ["/bootstrap#unitTest" , vars [0]    ] , ["/bootstrap#statement"  ]    ] , vars [2]      ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#errorSolution" , "/bootstrap#missingSignature"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/bootstrap#errorSolution" , ["/bootstrap#missingSignature" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , ["/bootstrap#insertStatement" , ["/bootstrap#signature" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "cpi#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["cpi#vis" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.VisualTerm"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "cpi#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["cpi#vis" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.VisualTerm"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#vis" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.VisualTerm"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#horiz"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#horiz" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.HorizontalFlow"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#vert"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#vert" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.VerticalFlow"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#label"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#label" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.LabelFigure"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#italic"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#italic" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.Italic"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#bold"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#bold" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.Bold"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#color"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#color" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.TextColor"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#lineBorder"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#lineBorder" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.LineBorderFigure"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#symbol"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#symbol" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.Symbol"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#tooltip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#tooltip" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.Tooltip"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#halfSize"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#halfSize" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.HalfSize"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#smaller"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#smaller" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.Smaller"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#action"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#action" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.ActionFigure"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#action"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#action" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.ActionFigure"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#background"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#background" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.Background"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#roundRect"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#roundRect" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.RoundRect"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#expand"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#expand" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.ExpandFigure"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#raised"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#raised" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.Raised"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#lowered"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#lowered" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.Lowered"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#link"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#link" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.Link"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#brackets"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#brackets" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.Brackets"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#box"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#box" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.Box"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#dynamicList"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#dynamicList" , vars [0]  , vars [1]     ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.DynamicList"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#pivot"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#pivot" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.PivotFigure"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cpi#termClass" , "::" , "/bootstrap#image"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cpi#termClass" , ["::" , ["/bootstrap#image" , vars [0]    ] , ["/bootstrap#visualization"  ]    ] , "net.nansore.cedalion.figures.ImageFigure"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varNameMacro"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#varNameMacro" , "Alpha" , ["/bootstrap#symbol" , 945   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varNameMacro"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#varNameMacro" , "Beta" , ["/bootstrap#symbol" , 946   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varNameMacro"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#varNameMacro" , "Gamma" , ["/bootstrap#symbol" , 947   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varNameMacro"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/bootstrap#varNameMacro" , "Tau" , ["/bootstrap#symbol" , 964   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varNameMacro"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#varNameMacro" , vars [0]  , ["/bootstrap#horiz" , ["." , vars [1]  , ["." , ["/bootstrap#label" , "'"   ] , ["[]"  ]    ]    ]   ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#visualizeVar" , vars [3]  , ["." , ["builtin#varName" , vars [4]  , vars [2]     ] , ["[]"  ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "Prime" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varNameMacro"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#varNameMacro" , vars [0]  , ["/bootstrap#vert" , ["." , ["/bootstrap#box" , 1   ] , ["." , ["/bootstrap#pivot" , vars [1]    ] , ["[]"  ]    ]    ]   ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#visualizeVar" , vars [3]  , ["." , ["builtin#varName" , vars [4]  , vars [2]     ] , ["[]"  ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "Bar" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varNameMacro"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#varNameMacro" , vars [0]  , ["/bootstrap#horiz" , ["." , vars [1]  , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "1"   ]   ] , ["[]"  ]    ]    ] , ["cpi#bottom"  ]    ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#visualizeVar" , vars [3]  , ["." , ["builtin#varName" , vars [4]  , vars [2]     ] , ["[]"  ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "1" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varNameMacro"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#varNameMacro" , vars [0]  , ["/bootstrap#horiz" , ["." , vars [1]  , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "2"   ]   ] , ["[]"  ]    ]    ] , ["cpi#bottom"  ]    ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#visualizeVar" , vars [3]  , ["." , ["builtin#varName" , vars [4]  , vars [2]     ] , ["[]"  ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "2" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varNameMacro"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#varNameMacro" , vars [0]  , ["/bootstrap#horiz" , ["." , vars [1]  , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "3"   ]   ] , ["[]"  ]    ]    ] , ["cpi#bottom"  ]    ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#visualizeVar" , vars [3]  , ["." , ["builtin#varName" , vars [4]  , vars [2]     ] , ["[]"  ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "3" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varNameMacro"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#varNameMacro" , vars [0]  , ["/bootstrap#horiz" , ["." , vars [1]  , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "4"   ]   ] , ["[]"  ]    ]    ] , ["cpi#bottom"  ]    ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#visualizeVar" , vars [3]  , ["." , ["builtin#varName" , vars [4]  , vars [2]     ] , ["[]"  ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "4" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/bootstrap#varNameMacro"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/bootstrap#varNameMacro" , vars [0]  , ["/bootstrap#horiz" , ["." , vars [1]  , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "5"   ]   ] , ["[]"  ]    ]    ] , ["cpi#bottom"  ]    ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/bootstrap#visualizeVar" , vars [3]  , ["." , ["builtin#varName" , vars [4]  , vars [2]     ] , ["[]"  ]    ] , vars [1]      ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "5" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/Functional#expr" , vars [3]    ]    ] , "swap.gif" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["/Functional#applyBinOp" , vars [4]  , vars [5]  , vars [6]      ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/Functional#expr" , vars [3]    ]    ] , ["::" , ["/Functional#applyBinOp" , vars [6]  , vars [5]  , vars [4]      ] , ["/Functional#expr" , vars [3]    ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , vars [3]    ]    ] , "Delete.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , vars [4]    ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , vars [3]    ]    ] , ["::" , ["." , vars [5]  , vars [4]     ] , ["/bootstrap#list" , vars [3]    ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , ["/bootstrap#projection" , ["::" , vars [3]  , vars [4]     ] , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , vars [5]     ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/bootstrap#list" , vars [3]    ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , ["[]"  ] , vars [4]     ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#list" , vars [3]    ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , ["::" , vars [3]  , vars [4]     ] , vars [5]     ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["::" , vars [5]  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/bootstrap#color"  ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , ["cpi#rgb" , 0 , 0 , 0     ] , vars [3]     ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/bootstrap#color"  ]   ]    ] , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#color"  ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/html#xml"  ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , ["xml#element" , "name" , ["[]"  ] , ["[]"  ]     ] , vars [3]     ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/html#xml"  ]   ]    ] , ["::" , vars [3]  , ["/bootstrap#list" , ["/html#xml"  ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , ["xml#attribute" , "name" , ["/bootstrap#string"  ] , "value"     ] , vars [3]     ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ] , ["::" , vars [3]  , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/javascript/jsLogic#jsCommand"  ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 1   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , {"expr" : 0   } , vars [3]     ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/javascript/jsLogic#jsCommand"  ]   ]    ] , ["::" , vars [3]  , ["/bootstrap#list" , ["/javascript/jsLogic#jsCommand"  ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , vars [3]  , ["." , ["/bootstrap#projection" , ["::" , vars [4]  , vars [5]     ] , ["/bootstrap#horiz" , ["[]"  ]   ]    ] , ["[]"  ]    ]    ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ] , ["::" , ["." , vars [3]  , ["[]"  ]    ] , ["/bootstrap#list" , ["/bootstrap#statement"  ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/bootstrap#list" , vars [3]    ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , vars [4]  , ["." , ["[]"  ] , ["[]"  ]    ]    ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/bootstrap#list" , vars [3]    ]   ]    ] , ["::" , ["." , vars [4]  , ["[]"  ]    ] , ["/bootstrap#list" , ["/bootstrap#list" , vars [3]    ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , vars [3]  , ["." , ["::" , vars [4]  , vars [5]     ] , ["[]"  ]    ]    ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ] , ["::" , ["." , vars [3]  , ["[]"  ]    ] , ["/bootstrap#list" , ["/bootstrap#typedTerm"  ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/bootstrap#color"  ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , vars [3]  , ["." , ["cpi#rgb" , 0 , 0 , 0     ] , ["[]"  ]    ]    ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/bootstrap#color"  ]   ]    ] , ["::" , ["." , vars [3]  , ["[]"  ]    ] , ["/bootstrap#list" , ["/bootstrap#color"  ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/html#xml"  ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , vars [3]  , ["." , ["xml#element" , "name" , ["[]"  ] , ["[]"  ]     ] , ["[]"  ]    ]    ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/html#xml"  ]   ]    ] , ["::" , ["." , vars [3]  , ["[]"  ]    ] , ["/bootstrap#list" , ["/html#xml"  ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , vars [3]  , ["." , ["xml#attribute" , "name" , ["/bootstrap#string"  ] , "value"     ] , ["[]"  ]    ]    ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ] , ["::" , ["." , vars [3]  , ["[]"  ]    ] , ["/bootstrap#list" , ["/html#xmlAttr"  ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#actionIcon" , "::" , "/cedalionWeb/visualization#editable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#list" , ["/javascript/jsLogic#jsCommand"  ]   ]    ] , "Create.png" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 1   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [2]  , ["." , vars [3]  , ["." , {"expr" : 0   } , ["[]"  ]    ]    ]   ]    }  )      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["=" , ["::" , logic . concreteValue  (vars [2]   )  . get  ()  , ["/bootstrap#list" , ["/javascript/jsLogic#jsCommand"  ]   ]    ] , ["::" , ["." , vars [3]  , ["[]"  ]    ] , ["/bootstrap#list" , ["/javascript/jsLogic#jsCommand"  ]   ]    ]    ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#specialVarNameVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#specialVarNameVisualization" , "Alpha" , ["/bootstrap#symbol" , 945   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#specialVarNameVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#specialVarNameVisualization" , "Beta" , ["/bootstrap#symbol" , 946   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#specialVarNameVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#specialVarNameVisualization" , "Gamma" , ["/bootstrap#symbol" , 947   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#specialVarNameVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#specialVarNameVisualization" , "Tau" , ["/bootstrap#symbol" , 964   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#specialVarNameVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#specialVarNameVisualization" , vars [0]  , ["/bootstrap#horiz" , ["." , vars [1]  , ["." , ["/bootstrap#label" , "'"   ] , ["[]"  ]    ]    ]   ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/cedalionWeb/visualization#varNameVisualization" , vars [2]  , vars [1]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "Prime" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#specialVarNameVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#specialVarNameVisualization" , vars [0]  , ["/bootstrap#vert" , ["." , ["/bootstrap#box" , 1   ] , ["." , ["/bootstrap#pivot" , vars [1]    ] , ["[]"  ]    ]    ]   ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/cedalionWeb/visualization#varNameVisualization" , vars [2]  , vars [1]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "Bar" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#specialVarNameVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#specialVarNameVisualization" , vars [0]  , ["/bootstrap#horiz" , ["." , vars [1]  , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "1"   ]   ] , ["[]"  ]    ]    ] , ["cpi#bottom"  ]    ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/cedalionWeb/visualization#varNameVisualization" , vars [2]  , vars [1]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "1" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#specialVarNameVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#specialVarNameVisualization" , vars [0]  , ["/bootstrap#horiz" , ["." , vars [1]  , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "2"   ]   ] , ["[]"  ]    ]    ] , ["cpi#bottom"  ]    ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/cedalionWeb/visualization#varNameVisualization" , vars [2]  , vars [1]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "2" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#specialVarNameVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#specialVarNameVisualization" , vars [0]  , ["/bootstrap#horiz" , ["." , vars [1]  , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "3"   ]   ] , ["[]"  ]    ]    ] , ["cpi#bottom"  ]    ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/cedalionWeb/visualization#varNameVisualization" , vars [2]  , vars [1]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "3" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#specialVarNameVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#specialVarNameVisualization" , vars [0]  , ["/bootstrap#horiz" , ["." , vars [1]  , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "4"   ]   ] , ["[]"  ]    ]    ] , ["cpi#bottom"  ]    ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/cedalionWeb/visualization#varNameVisualization" , vars [2]  , vars [1]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "4" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/visualization#specialVarNameVisualization"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/visualization#specialVarNameVisualization" , vars [0]  , ["/bootstrap#horiz" , ["." , vars [1]  , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "5"   ]   ] , ["[]"  ]    ]    ] , ["cpi#bottom"  ]    ]    ] , term   )  ) { 
     var g1   = function () { 
     logic . call  (["/cedalionWeb/visualization#varNameVisualization" , vars [2]  , vars [1]     ] , next   )  ;  


}
 ; 
var g0   = function () { 
     logic . call  (["builtin#strcat" , vars [2]  , "5" , vars [0]      ] , g1     )  ;  


}
 ; 

logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/Test#hello"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/Test#hello" , vars [0]    ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "h1"   ] , ["[]"  ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#str" , "Hello, "   ] , ["/cedalionWeb/xml#list" , vars [0]  , ["/cedalionWeb/xml#empty"  ]    ]    ]     ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/crud#inlineEditor"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/crud#inlineEditor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , vars [4]  , vars [5]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/jquery#animate" , vars [6]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "crud-editor"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [6]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , vars [7]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/cedalionWeb/crud#updateList" , vars [0]  , vars [1]  , vars [2]  , vars [7]       ]  ]    }  )       ] , vars [3]  , vars [4]  , vars [5]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/ui#displayWhile"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/ui#displayWhile" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/jquery#animate" , vars [5]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "img"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "src"   ] , vars [6]     ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [5]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , function (__symbol7  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/statepred#whenever" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [8]     ] , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol7 . replaceWith  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [vars [8]   ]    }  )     ]  )   )  ;  


}
     ] , vars [2]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/ui#ajaxFor"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/ui#ajaxFor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , vars [4]  , vars [5]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/jquery#animate" , vars [6]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [6]    ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "img"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "src"   ] , vars [0]     ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "ajax-wait-image"   ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , ["/cedalionWeb/xml#empty"  ]    ]     ] , vars [7]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [1]  , []   )  . find  (".ajax-wait-image"  )  . remove  ()  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : [["/cedalionWeb/jquery#appendTo" , vars [7]  , vars [2]     ] , vars [7]  , ["/javascript/statepred#whenever" , vars [1]  , {"expr" : 0   } , {"expr" : 1   }     ]    ]    }  )       ] , vars [3]  , vars [4]  , vars [5]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/ui#button"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/ui#button" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/jquery#animate" , vars [5]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "input"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "type"   ] , ["/Functional#const" , "button"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "value"   ] , ["/Functional#const" , vars [0]    ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [5]    ]    ] , ["[]"  ]    ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , vars [6]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . concreteTerm  (terms [1]  , []   )  . stopPropagation  ()  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 2   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [["/javascript/jsLogic#do" , vars [1]    ] , vars [7]  , ["/cedalionWeb/jquery#on" , vars [6]  , "click" , vars [7]  , {"expr" : 0   }      ]    ]    }  )       ] , vars [2]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/ui#helloButton"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/ui#helloButton"  ] , vars [0]  , vars [1]  , vars [2]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/ui#button" , "Say Hello" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  ("Hello, World"  )  ;  


}
  , "terms" : []    }  )     ] , vars [0]  , vars [1]  , vars [2]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/ui#ul"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/ui#ul" , vars [0]    ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "ul"   ] , ["[]"  ] , ["/cedalionWeb/ui#ulBody" , vars [0]    ]     ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/ui#ulBody" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/ui#ulBody" , ["[]"  ]   ] , vars [0]  , vars [1]  , vars [2]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#str" , " "   ] , vars [0]  , vars [1]  , vars [2]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/ui#ulBody" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/ui#ulBody" , ["." , vars [0]  , vars [1]     ]   ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "li"   ] , ["[]"  ] , vars [0]      ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/ui#ulBody" , vars [1]    ] , ["/cedalionWeb/xml#empty"  ]    ]    ] , vars [2]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/ui#tabs"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/ui#tabs" , vars [0]    ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/jquery#animate" , vars [4]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "tab-container"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [4]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "tab-bar"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#for" , ["/bootstrap#listMember" , vars [5]  , ["/cedalionWeb/xml#xml"  ] , vars [0]      ] , ["/cedalionWeb/jquery#animate" , vars [6]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "tab"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [6]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [5]  , ["[]"  ]    ] , ["/cedalionWeb/xml#xml"  ]    ]   ]   ]     ] , vars [7]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . concreteTerm  (terms [0]  , []   )  . parents  (".tab-container"  )  . find  (".tab-content"  )   ]   )   )  ;  
     logic . concreteTerm  (terms [2]  , []   )  . parents  (".tab-container"  )  . find  (".tab"  )  . removeClass  ("tab-current"  )  ;  
     logic . concreteTerm  (terms [3]  , []   )  . addClass  ("tab-current"  )  ;  
     logic . concreteTerm  (terms [4]  , []   )  . stopPropagation  ()  ;  





}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [7]  , ["/cedalionWeb/jquery#changeContent" , {"expr" : 0   } , vars [5]     ] , vars [7]  , vars [7]  , vars [8]  , ["/cedalionWeb/jquery#on" , vars [7]  , "click" , vars [8]  , {"expr" : 0   }      ]       ]    }  )       ]    ]     ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "tab-content"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , ["/cedalionWeb/xml#empty"  ]    ]    ]     ] , vars [9]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     setTimeout (function (terms  ) { 
     return logic . preserveContext  (function () { 
     logic . concreteTerm  (terms [0]  , []   )  . find  (".tab"  )  . first  ()  . click  ()  ;  


}
  )  ;  


}
 (logic . zeros  (0  )  . concat  (logic . concreteValue  (terms . slice  (0 , 1   )   )   )   )  , 100   )  ;  


}
  , "terms" : [vars [9]   ]    }  )       ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#commandBar" , "::" , "/cedalionWeb/visualization#editable"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#commandBar" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]  , vars [7]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "command-bar-container"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "command-bar"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#for" , ["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [8]  , vars [9]      ] , ["/cedalionWeb/jquery#animate" , vars [10]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [10]    ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "img"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "src"   ] , ["/Functional#const" , vars [8]    ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#empty"  ]     ]     ] , vars [11]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . concreteTerm  (terms [1]  , []   )  . stopPropagation  ()  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  




}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 3   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [["/javascript/jsLogic#do" , vars [9]    ] , vars [12]  , ["/cedalionWeb/jquery#changeContent" , vars [4]  , ["/cedalionWeb/xml#empty"  ]    ] , ["/cedalionWeb/jquery#on" , vars [11]  , "click" , vars [12]  , {"expr" : 0   }      ]     ]    }  )       ]    ]     ]     ] , vars [5]  , vars [6]  , vars [7]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#suggestionBox"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#suggestionBox" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "suggestion-box-container"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "suggestion-box"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#for" , ["/cedalionWeb/visualization#isSuggestion" , ["::" , vars [5]  , vars [0]     ]   ] , ["/cedalionWeb/jquery#animate" , vars [6]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "suggestion"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [6]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [5]  , ["[]"  ]    ] , vars [0]     ]   ]   ]     ] , vars [7]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  
     logic . concreteTerm  (terms [2]  , []   )  . stopPropagation  ()  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [logic . concreteTerm  (terms [3]  , []   )  . parents  (".suggestion-box"  )   ]   )   )  ;  




}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [1]  , vars [5]  , vars [8]  , vars [7]  , ["/cedalionWeb/jquery#changeContent" , {"expr" : 0   } , ["/cedalionWeb/xml#empty"  ]    ] , ["/cedalionWeb/jquery#on" , vars [7]  , "click" , vars [8]  , {"expr" : 0   }      ]       ]    }  )       ]    ]     ]     ] , vars [2]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#edit" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (13  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#edit" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , ["::" , vars [3]  , vars [1]     ] , vars [4]       ] , vars [5]  , vars [6]  , vars [7]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/jquery#animate" , vars [8]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "term-editor"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [8]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , vars [9]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol10 = {"value" : logic . concreteTerm  (terms [0]  , []   )   , "nvs" : logic . concreteTerm  (terms [1]  , []   )   , "type" : logic . concreteTerm  (terms [2]  , []   )   , "target" : logic . concreteTerm  (terms [3]  , []   )   , "onchange" : logic . concreteTerm  (terms [4]  , []   )   , "get" : function () { 
     return this . value  ;  


}
  , "set" : function (__symbol11  ) { 
     this . value  = __symbol11 ;  


}
         } ;  
     var __symbol12 = function () { 
     logic . ctx  ("selection"  )  . bind  ({"isSelection" : true   } , logic   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [__symbol10 . value  , __symbol10 . vns  , __symbol10 , __symbol10 . type      ]   )   )  ;  



}
 ;  
     __symbol10 . notify  = function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [6]  , [__symbol10 . target  , __symbol10 . type  , __symbol10 . value  , __symbol10 . type  , __symbol10 . onchange       ]   )   )  ;  


}
 ;  
     __symbol12 ()  ;  
     __symbol10 . notify  ()  ;  






}
  , "terms" : [vars [0]  , vars [2]  , vars [1]  , vars [3]  , vars [4]  , ["/cedalionWeb/jquery#changeContent" , vars [9]  , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["/cedalionWeb/visualization#editable" , {"expr" : 0   } , {"expr" : 1   } , {"expr" : 2   }     ] , {"expr" : 3   }    ]   ]   ]    ] , ["/javascript/jsLogic#foreach" , ["=" , ["::" , {"expr" : 0   } , {"expr" : 1   }    ] , ["::" , {"expr" : 2   } , {"expr" : 3   }    ]    ] , {"expr" : 4   }    ]        ]    }  )       ] , vars [5]  , vars [6]  , vars [7]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#vis"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , vars [0]    ]   ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["cpi#vis" , vars [0]  , ["cpi#default"  ]    ]   ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#label"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#label" , vars [0]    ]   ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 160   ]   ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#str" , vars [0]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 160   ]   ] , ["/cedalionWeb/xml#empty"  ]    ]    ]    ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTMLList" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTMLList" , ["[]"  ] , vars [0]     ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#empty"  ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTMLList" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTMLList" , ["." , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]  , vars [5]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , vars [2]    ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , ["/cedalionWeb/visualization#toHTMLList" , vars [1]  , vars [2]     ]    ] , vars [3]  , vars [4]  , vars [5]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#horiz"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#horiz" , vars [0]    ]   ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-horiz"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTMLList" , vars [0]  , "vis-horiz-elem"    ]     ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#vert"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vert" , vars [0]    ]   ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-vert"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTMLList" , vars [0]  , "vis-vert-elem"    ]     ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#symbol"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#symbol" , vars [0]    ]   ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 160   ]   ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , vars [0]    ]   ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 160   ]   ] , ["/cedalionWeb/xml#empty"  ]    ]    ]    ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#color"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#color" , vars [0]  , vars [1]     ]   ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-color"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "style"   ] , ["/Functional#applyBinOp" , ["/Functional#const" , "color: "   ] , ["/Functional#concat"  ] , ["/cedalionWeb/visualization#rgbToText" , vars [1]    ]     ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [2]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#lineBorder"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#lineBorder" , vars [0]  , vars [1]  , vars [2]      ]   ] , vars [3]  , vars [4]  , vars [5]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-line-border"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "style"   ] , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#plus" , ["/Functional#const" , "border-width: "   ] , ["/Functional#num2str" , ["/Functional#const" , vars [1]    ]   ]    ] , ["/Functional#concat"  ] , ["/Functional#const" , "; border-color: "   ]     ] , ["/Functional#concat"  ] , ["/cedalionWeb/visualization#rgbToText" , vars [2]    ]     ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [3]  , vars [4]  , vars [5]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#background"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#background" , vars [0]  , vars [1]     ]   ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-background"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "style"   ] , ["/Functional#applyBinOp" , ["/Functional#const" , "background-color: "   ] , ["/Functional#concat"  ] , ["/cedalionWeb/visualization#rgbToText" , vars [1]    ]     ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [2]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#tooltip"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#tooltip" , vars [0]  , vars [1]     ]   ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-has-tooltip"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/visualization#toHTML" , vars [0]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-tooltip"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [1]    ]     ] , ["/cedalionWeb/xml#empty"  ]    ]    ]     ] , vars [2]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#brackets"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#brackets" , vars [0]  , vars [1]  , vars [2]      ]   ] , vars [3]  , vars [4]  , vars [5]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-brackets"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-brackets-left"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#entity" , ["/Functional#const" , vars [1]    ]   ]     ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-horiz-elem"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-brackets-right"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#entity" , ["/Functional#const" , vars [2]    ]   ]     ] , ["/cedalionWeb/xml#empty"  ]    ]    ]    ]     ] , vars [3]  , vars [4]  , vars [5]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/xml#xmlList" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#xmlList" , ["[]"  ]   ] , vars [0]  , vars [1]  , vars [2]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#empty"  ] , vars [0]  , vars [1]  , vars [2]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/xml#xmlList" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#xmlList" , ["." , vars [0]  , vars [1]     ]   ] , vars [2]  , vars [3]  , vars [4]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#list" , vars [0]  , ["/cedalionWeb/xml#xmlList" , vars [1]    ]    ] , vars [2]  , vars [3]  , vars [4]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#bold"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#bold" , vars [0]    ]   ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-bold"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#italic"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#italic" , vars [0]    ]   ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-italic"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#halfSize"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#halfSize" , vars [0]    ]   ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-halfsize"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#smaller"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#smaller" , vars [0]    ]   ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-smaller"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#lowered"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#lowered" , vars [0]    ]   ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-lowered"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/cedalionWeb/xml#generates2" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#raised"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#raised" , vars [0]    ]   ] , vars [1]  , vars [2]  , vars [3]       ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/cedalionWeb/xml#generates2" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-raised"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]  , vars [2]  , vars [3]       ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/html#isEntity"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/html#isEntity" , "<" , "lt"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/html#isEntity"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/html#isEntity" , ">" , "gt"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/html#isEntity"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/html#isEntity" , "&" , "amp"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/html#isEntity"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/html#isEntity" , "\"" , "quot"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/html#isEntity"  ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/html#isEntity" , "'" , "apos"    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/asyncproc#testThrow1"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#testThrow1"  ] , vars [0]  , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#block" , ["." , ["/javascript/asyncproc#sync" , ["/javascript/asyncproc#log" , "Hello1"   ]   ] , ["." , ["/javascript/asyncproc#catch" , ["/javascript/asyncproc#block" , ["." , ["/javascript/asyncproc#throw" , ["/javascript/asyncproc#helloException"  ]   ] , ["." , ["/javascript/asyncproc#sync" , ["/javascript/asyncproc#log" , "Mondi1"   ]   ] , ["[]"  ]    ]    ]   ] , ["/javascript/asyncproc#helloException"  ] , ["/javascript/asyncproc#block" , ["." , ["/javascript/asyncproc#sync" , ["/javascript/asyncproc#log" , "World1"   ]   ] , ["[]"  ]    ]   ]     ] , ["[]"  ]    ]    ]   ] , vars [0]  , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/asyncproc#testThrow2"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#testThrow2"  ] , vars [0]  , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#block" , ["." , ["/javascript/asyncproc#sync" , ["/javascript/asyncproc#log" , "Hello2"   ]   ] , ["." , ["/javascript/asyncproc#sync" , ["/javascript/asyncproc#log" , "World2"   ]   ] , ["." , ["/javascript/asyncproc#throw" , ["/javascript/asyncproc#helloException"  ]   ] , ["." , ["/javascript/asyncproc#sync" , ["/javascript/asyncproc#log" , "Mondi2"   ]   ] , ["[]"  ]    ]    ]    ]    ]   ] , vars [0]  , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/asyncproc#testThrow3Helper"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#testThrow3Helper"  ] , vars [0]  , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#block" , ["." , ["/javascript/asyncproc#catch" , ["/javascript/asyncproc#block" , ["." , ["/javascript/asyncproc#throw" , ["/javascript/asyncproc#helloException"  ]   ] , ["[]"  ]    ]   ] , ["/javascript/asyncproc#otherException"  ] , ["/javascript/asyncproc#block" , ["." , ["/javascript/asyncproc#sync" , ["/javascript/asyncproc#log" , "Mondi3"   ]   ] , ["[]"  ]    ]   ]     ] , ["[]"  ]    ]   ] , vars [0]  , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/asyncproc#testThrow3"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#testThrow3"  ] , vars [0]  , vars [1]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/asyncproc#block" , ["." , ["/javascript/asyncproc#sync" , ["/javascript/asyncproc#log" , "Hello3"   ]   ] , ["." , ["/javascript/asyncproc#catch" , ["/javascript/asyncproc#block" , ["." , ["/javascript/asyncproc#testThrow3Helper"  ] , ["[]"  ]    ]   ] , ["/javascript/asyncproc#helloException"  ] , ["/javascript/asyncproc#block" , ["." , ["/javascript/asyncproc#sync" , ["/javascript/asyncproc#log" , "World3"   ]   ] , ["[]"  ]    ]   ]     ] , ["[]"  ]    ]    ]   ] , vars [0]  , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript#hasSpecialRendering" , "::" , "/javascript/statepred#async"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript#hasSpecialRendering" , ["::" , ["/javascript/statepred#async" , vars [0]    ] , ["/javascript#expr"  ]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/Functional#eval" , ["/javascript#toString" , ["::" , ["/javascript#call" , ["/javascript#dot" , ["/javascript#varExpr" , ["/javascript/jsLogic#logic"  ]   ] , "snapshot"    ] , ["." , vars [0]  , ["[]"  ]    ]    ] , ["/javascript#expr"  ]    ]   ] , ["/bootstrap#string"  ] , vars [1]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "cjs#webMain"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["cjs#webMain"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     $ ("body"  )  . html  ("<h1>Hello, World</h1>"  )  ;  


}
  , "terms" : []    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "cjs#webMain"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["cjs#webMain"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/cedalionWeb/jquery#openPage" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "h1"   ] , ["[]"  ] , ["/cedalionWeb/xml#str" , "Hello, World"   ]     ]   ]  ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "cjs#webMain"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["cjs#webMain"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/cedalionWeb/jquery#openPage" , ["/Test#hello" , ["/cedalionWeb/xml#str" , "World"   ]   ]   ]  ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "cjs#couchdbMap"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["cjs#couchdbMap" , vars [0]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     emit (logic . concreteTerm  (terms [0]  , []   )  , null   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [3]  , ["/javascript/statepred#whenever" , ["/javascript/statepred#conj" , ["/javascript/statepred#pred" , ["/cedalionWeb#implies" , vars [0]  , vars [2]     ]   ] , ["/cedalionWeb#indexKey" , ["::" , vars [2]  , ["/cedalionWeb#dataStatement"  ]    ] , vars [3]     ]    ] , {"expr" : 0   }    ]   ]    }  )  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/crud#updateList"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/crud#updateList" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  
     logic . concreteTerm  (terms [2]  , []   )  . stopPropagation  ()  ;  



}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 3   )   )     }  )   ]   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 4   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (4  )  . concat  (terms . slice  (4 , 5   )   )     }  )     ]   )   )  ;  


}
  , "terms" : [["/cedalionWeb/crud#remove" , vars [0]  , vars [5]  , vars [2]      ] , ["/cedalionWeb/crud#edit" , vars [0]  , vars [6]  , vars [1]  , vars [5]  , vars [2]  , vars [8]         ] , vars [9]  , ["/cedalionWeb/jquery#on" , vars [8]  , "click" , vars [9]  , {"expr" : 0   }      ] , ["/cedalionWeb/crud#editNew" , vars [0]  , vars [1]  , vars [2]      ] , ["/cedalionWeb/jquery#changeContent" , vars [3]  , ["/cedalionWeb/xml#list" , ["/cedalionWeb/ui#ajaxFor" , ["/Functional#const" , "waiting-bar.gif"   ] , ["/cedalionWeb/jquery#ajaxQuery" , ["/javascript/statepred#member" , ["/Functional#pair" , vars [5]  , vars [6]     ] , ["/Functional#pairType" , vars [2]  , vars [1]     ] , ["/cedalionWeb/crud#elements" , vars [0]    ]     ]   ] , ["/cedalionWeb/jquery#animate" , vars [7]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "crud-item"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [7]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/ui#button" , "Remove" , {"expr" : 0   }    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/visualization#toHTML" , ["cpi#vis" , ["::" , ["cpi#immediateDescriptor" , vars [6]  , ["[]"  ]    ] , vars [1]     ] , ["/cedalionWeb/crud#index"  ]    ]   ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "crud-edit"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , ["/cedalionWeb/xml#empty"  ]    ]    ]    ]     ] , vars [8]  , {"expr" : 1   }      ]     ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/ui#button" , "Add" , {"expr" : 2   }    ] , ["/cedalionWeb/xml#empty"  ]    ]    ]    ]       ]    }  )  , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/crud#edit"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/crud#edit" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]         ] , vars [6]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol7 = logic . concreteTerm  (terms [0]  , []   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . concreteTerm  (terms [1]  , []   )  . parents  (".crud-editor"  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol7 = logic . concreteTerm  (terms [2]  , []   )  ;  


}
  , "terms" : logic . zeros  (2  )  . concat  (terms . slice  (2 , 3   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [__symbol7 , $ (".crud-editor"  )    ]   )   )  ;  


}
  , "terms" : logic . zeros  (3  )  . concat  (terms . slice  (3 , 4   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [$ (".crud-editor"  )   ]   )   )  ;  


}
  , "terms" : logic . zeros  (4  )  . concat  (terms . slice  (4 , 5   )   )     }  )      ]   )   )  ;  



}
  , "terms" : [vars [1]  , vars [5]  , vars [8]  , ["/javascript/asyncproc#andThen" , ["/cedalionWeb/jquery#onServer" , ["/cedalionWeb/crud#update" , vars [0]  , vars [3]  , vars [4]  , {"expr" : 0   } , vars [2]        ]   ] , ["/cedalionWeb/crud#updateList" , vars [0]  , vars [2]  , vars [4]  , {"expr" : 1   }      ]    ] , ["/cedalionWeb/crud#updateList" , vars [0]  , vars [2]  , vars [4]  , {"expr" : 0   }      ] , ["/cedalionWeb/jquery#changeContent" , {"expr" : 0   } , ["/cedalionWeb/xml#list" , ["/cedalionWeb/visualization#edit" , ["::" , vars [1]  , vars [2]     ] , ["[]"  ] , ["::" , vars [8]  , vars [2]     ] , {"expr" : 1   }      ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/ui#button" , "OK" , {"expr" : 2   }    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/ui#button" , "Cancel" , {"expr" : 3   }    ] , ["/cedalionWeb/xml#empty"  ]    ]    ]    ]    ]       ]    }  )  , vars [6]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/crud#editNew"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/crud#editNew" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , [$ (".crud-editor"  )   ]   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
    // Empty
}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 1   )   )     }  )    ]   )   )  ;  


}
  , "terms" : [["/cedalionWeb/crud#edit" , vars [0]  , vars [5]  , vars [1]  , vars [4]  , vars [2]  , {"expr" : 0   }        ] , ["/javascript/asyncproc#andThen" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/jquery#ajaxQuery" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/crud#createNew" , vars [0]    ] , ["/Functional#pairType" , vars [2]  , vars [1]     ] , ["/Functional#pair" , vars [4]  , vars [5]     ]     ]   ] , {"expr" : 0   }    ] , ["/javascript/jsLogic#do" , {"expr" : 1   }   ]    ]   ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/crud#remove"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/crud#remove" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , [$ (".crud-editor"  )   ]   )   )  ;  


}
  , "terms" : [["/javascript/asyncproc#andThen" , ["/cedalionWeb/jquery#onServer" , ["/cedalionWeb/crud#delete" , vars [0]  , vars [1]  , vars [2]      ]   ] , ["/cedalionWeb/crud#updateList" , vars [0]  , vars [4]  , vars [2]  , {"expr" : 0   }      ]    ]  ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/jquery#applyAnnot" , "/cedalionWeb/jquery#runAfterGen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/jquery#applyAnnot" , ["/cedalionWeb/jquery#runAfterGen" , vars [0]    ] , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , vars [0]  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/jquery#changeContent"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/jquery#changeContent" , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/cedalionWeb/jquery#modifyElement" , "html" , vars [0]  , vars [1]      ]  ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/jquery#modifyElement"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/jquery#modifyElement" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol4 = (Math . floor  ((Math . random  ()  * 1000000000 )  )  + "-" ) ;  
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [__symbol4 , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  [logic . concreteTerm  (terms [1]  , []   ) ]  (logic . concreteTerm  (terms [2]  , []   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (3  )  . concat  (terms . slice  (3 , 4   )   )     }  )   ]   )   )  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )    ]   )   )  ;  



}
  , "terms" : [vars [1]  , vars [0]  , vars [5]  , ["/cedalionWeb/jquery#applyAnnot" , vars [7]  , vars [1]     ] , ["/javascript/jsLogic#foreach" , ["/bootstrap#listMember" , vars [7]  , ["/cedalionWeb/xml#annotation"  ] , vars [6]      ] , {"expr" : 0   }    ] , ["/javascript/jsLogic#foreach" , ["/cedalionWeb/xml#generates2" , vars [2]  , vars [5]  , ["." , ["/cedalionWeb/jquery#uniqueName" , {"expr" : 0   }   ] , ["[]"  ]    ] , vars [6]       ] , {"expr" : 1   }    ]       ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/jquery#changeContent"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/jquery#changeContent" , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol3 = (Math . floor  ((Math . random  ()  * 1000000000 )  )  + "-" ) ;  
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [__symbol3 , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . html  (logic . concreteTerm  (terms [1]  , []   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (2  )  . concat  (terms . slice  (2 , 3   )   )     }  )   ]   )   )  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 4   )   )     }  )    ]   )   )  ;  



}
  , "terms" : [vars [0]  , vars [4]  , ["/cedalionWeb/jquery#applyAnnot" , vars [6]  , vars [0]     ] , ["/javascript/jsLogic#foreach" , ["/bootstrap#listMember" , vars [6]  , ["/cedalionWeb/xml#annotation"  ] , vars [5]      ] , {"expr" : 0   }    ] , ["/javascript/jsLogic#foreach" , ["/cedalionWeb/xml#generates2" , vars [1]  , vars [4]  , ["." , ["/cedalionWeb/jquery#uniqueName" , {"expr" : 0   }   ] , ["[]"  ]    ] , vars [5]       ] , {"expr" : 1   }    ]      ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/jquery#replaceWith"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/jquery#replaceWith" , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/cedalionWeb/jquery#modifyElement" , "replaceWith" , vars [0]  , vars [1]      ]  ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/jquery#prependTo"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/jquery#prependTo" , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/cedalionWeb/jquery#modifyElement" , "prepend" , vars [0]  , vars [1]      ]  ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/jquery#appendTo"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/jquery#appendTo" , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/cedalionWeb/jquery#modifyElement" , "append" , vars [0]  , vars [1]      ]  ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/jquery#onDelayed"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/jquery#onDelayed" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , vars [5]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol6 = null ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     if ( __symbol6 ) { 
     clearTimeout (__symbol6  )  ;  


} else {
    // Empty
}
 
     __symbol6 = setTimeout (function (terms  ) { 
     return logic . preserveContext  (function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  )  ;  


}
 (logic . zeros  (0  )  . concat  (logic . concreteValue  (terms . slice  (0 , 1   )   )   )   )  , logic . concreteTerm  (terms [1]  , []   )    )  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 2   )   )     }  )   ]   )   )  ;  



}
  , "terms" : [["/javascript/jsLogic#do" , vars [4]    ] , vars [3]  , ["/cedalionWeb/jquery#on" , vars [2]  , vars [0]  , vars [1]  , {"expr" : 0   }      ]    ]    }  )  , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/jquery#on"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . on  (logic . concreteTerm  (terms [1]  , []   )  , function (terms  ) { 
     return logic . preserveContext  (function (__symbol4  ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  


}
  )  ;  


}
 (logic . zeros  (2  )  . concat  (logic . concreteValue  (terms . slice  (2 , 3   )   )   )   )    )  ;  


}
  , "terms" : [vars [0]  , vars [1]  , ["/javascript/jsLogic#do" , vars [2]    ]    ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/jquery#on"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/jquery#on" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . on  (logic . concreteTerm  (terms [1]  , []   )  , function (terms  ) { 
     return logic . preserveContext  (function (__symbol5  ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [__symbol5  ]   )   )  ;  


}
  )  ;  


}
 (logic . zeros  (2  )  . concat  (logic . concreteValue  (terms . slice  (2 , 3   )   )   )   )    )  ;  


}
  , "terms" : [vars [0]  , vars [1]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["::" , {"expr" : 0   } , ["/javascript/jsLogic#jsExpr"  ]    ]    ] , vars [3]     ]    ]    }  )  , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/jquery#openPage"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/jquery#openPage" , vars [0]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , [$ ("#main"  )   ]   )   )  ;  


}
  , "terms" : [["/cedalionWeb/jquery#changeContent" , {"expr" : 0   } , vars [0]     ]  ]    }  )  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb#addKeyComponents" , "::"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb#addKeyComponents" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol4 = 0 ;  
     var __symbol5 = [logic . concreteTerm  (terms [0]  , []   )   ] ;  
     while ((__symbol5 . length  > 0 )) { 
     var __symbol6 = __symbol5 [(__symbol5 . length  - 1 )]  ;  
     if ( (__symbol6 . length  > 0 ) ) { 
     var __symbol7 = __symbol6 . splice  (0 , 1   )  [0]  ;  
     if ( (__symbol7 instanceof Array ) ) { 
     __symbol5 . push  (__symbol7  )  ;  


} else {
     if ( (__symbol7 instanceof Variable ) ) { 
     break ;  


} else {
     logic . concreteTerm  (terms [1]  , []   )  . key  . push  (__symbol7  )  ;  


}
 


}
 



} else {
     __symbol5 . pop  ()  ;  


}
 



}
 




}
  , "terms" : [vars [0]  , vars [2]    ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb#applyKey"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb#applyKey" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     if ( logic . unify  (logic . concreteTerm  (terms [0]  , []   )  , logic . concreteTerm  (terms [1]  , []   )    )  ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  


} else {
    // Empty
}
 


}
  , "terms" : [vars [0]  , vars [1]  , ["/javascript/jsLogic#do" , vars [2]    ]    ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/node#put"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/node#put" , vars [0]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol2 = require ("url"  )  . parse  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol4 = __symbol2 (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     __symbol4 . method  = "PUT" ;  
     var __symbol5 = require ("http"  )  . request  (__symbol4 , function () { 
    // Empty
}
   )  ;  




}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )   ]   )   )  ;  



}
  , "terms" : [vars [3]  , ["/javascript/statepred#whenever" , ["/javascript/statepred#stateEval" , vars [0]  , ["/bootstrap#string"  ] , vars [3]      ] , {"expr" : 0   }    ]   ]    }  )  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "cjs#runService" , "/cedalionWeb#runProcedure"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["cjs#runService" , ["/cedalionWeb#runProcedure" , vars [0]    ] , vars [1]  , vars [2]      ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . concreteTerm  (terms [1]  , []   )  . writeHead  (200 , "OK" , {"content-type" : "text/plain"   }    )  ;  
     logic . concreteTerm  (terms [2]  , []   )  . end  ()  ;  




}
  , "terms" : [["/javascript/jsLogic#do" , vars [0]    ] , vars [2]  , vars [2]     ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "cjs#runService" , "/cedalionWeb#query"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["cjs#runService" , ["/cedalionWeb#query" , vars [0]    ] , vars [1]  , vars [2]      ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . writeHead  (200 , "OK" , {"content-type" : "application/json"   }    )  ;  
     var __symbol4 = 0 ;  
     logic . concreteTerm  (terms [1]  , []   )  . write  ("["  )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [6]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     if ( (__symbol4 > 0 ) ) { 
     logic . concreteTerm  (terms [2]  , []   )  . write  (",\n"  )  ;  


} else {
    // Empty
}
 
     __symbol4 = (__symbol4 + 1 ) ;  
     logic . concreteTerm  (terms [3]  , []   )  . write  (logic . toJSON  (logic . concreteTerm  (terms [4]  , []   )   )   )  ;  




}
  , "terms" : logic . zeros  (2  )  . concat  (terms . slice  (2 , 5   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [5]  , []   )  . end  ("]"  )  ;  


}
  , "terms" : logic . zeros  (5  )  . concat  (terms . slice  (5 , 6   )   )     }  )    ]   )   )  ;  





}
  , "terms" : [vars [2]  , vars [2]  , vars [2]  , vars [2]  , vars [0]  , vars [2]  , ["/javascript/statepred#whenever" , vars [0]  , {"expr" : 0   } , {"expr" : 1   }     ]        ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/ui#testUL"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/ui#testUL"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [1]  , ["/javascript/statepred#whenever" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#ul" , ["." , ["/cedalionWeb/xml#str" , "A"   ] , ["[]"  ]    ]   ] , vars [1]     ] , {"expr" : 0   }    ]   ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/visualization#bind"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/visualization#bind" , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . concreteTerm  (terms [1]  , []   )  . stopPropagation  ()  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 2   )   )     }  )   ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [3]  , []   )  . find  (".command-bar"  )  . remove  ()  ;  
     logic . concreteTerm  (terms [4]  , []   )  . stopPropagation  ()  ;  



}
  , "terms" : logic . zeros  (3  )  . concat  (terms . slice  (3 , 5   )   )     }  )   ]   )   )  ;  



}
  , "terms" : [["/cedalionWeb/jquery#prependTo" , vars [1]  , ["/cedalionWeb/visualization#commandBar" , vars [0]  , vars [1]     ]    ] , vars [3]  , ["/cedalionWeb/jquery#on" , vars [1]  , "selected" , vars [3]  , {"expr" : 0   }      ] , vars [1]  , vars [3]  , ["/cedalionWeb/jquery#on" , vars [1]  , "unselected" , vars [3]  , {"expr" : 0   }      ]       ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/visualization#bind" , "::" , "/cedalionWeb/visualization#editable"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/visualization#bind" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]  , vars [5]      ] , vars [6]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol7 = logic . concreteTerm  (terms [0]  , []   )  ;  
     var __symbol8 = logic . concreteTerm  (terms [1]  , []   )  ;  
     var __symbol9 = logic . concreteTerm  (terms [2]  , []   )  ;  
     var __symbol10 = logic . concreteTerm  (terms [3]  , []   )  ;  
     var __symbol11 = logic . concreteTerm  (terms [4]  , []   )  ;  
     var __symbol12 = logic . ctx  ("selection"  )  . getValue  (logic  )  ;  
     var __symbol13 = function (__symbol14  ) { 
     logic . ctx  ("selection"  )  . bind  (__symbol12 , logic   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [__symbol10 , __symbol14 , __symbol7 , __symbol8 , __symbol9 , __symbol11       ]   )   )  ;  



}
 ;  
     logic . concreteTerm  (terms [6]  , []   )  . replaceFunc  = __symbol13 ;  
     if ( logic . concreteTerm  (terms [7]  , []   )  . listeners  ) { 
     logic . concreteTerm  (terms [8]  , []   )  . listeners  . push  (__symbol13  )  ;  


} else {
    // Empty
}
 










}
  , "terms" : [vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]  , ["/cedalionWeb/jquery#replaceWith" , {"expr" : 0   } , ["/cedalionWeb/visualization#toHTML" , ["cpi#vis" , ["::" , ["/cedalionWeb/visualization#editable" , {"expr" : 1   } , {"expr" : 2   } , {"expr" : 3   }     ] , {"expr" : 4   }    ] , {"expr" : 5   }    ]   ]    ] , vars [2]  , vars [2]  , vars [2]           ]    }  )  , vars [6]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/visualization#bind" , "::" , "/cedalionWeb/visualization#fastEdit"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/visualization#bind" , ["::" , ["/cedalionWeb/visualization#fastEdit" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , vars [5]     ] , vars [6]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . attr  ("ced_path" , logic . concreteTerm  (terms [1]  , []   )    )  ;  
     if ( (logic . concreteTerm  (terms [2]  , []   )  instanceof Array ) ) { 
     logic . concreteTerm  (terms [3]  , []   )  . addClass  ("ced-compound"  )  ;  
     logic . concreteTerm  (terms [4]  , []   )  . attr  ("ced_name" , logic . concreteTerm  (terms [5]  , []   )  [0]    )  ;  
     logic . concreteTerm  (terms [6]  , []   )  . attr  ("ced_arity" , (logic . concreteTerm  (terms [7]  , []   )  . length  - 1 )   )  ;  




} else {
     logic . runProcedure  (logic . concreteTerm  (terms [11]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [8]  , []   )  . addClass  ("ced-variable"  )  ;  
     logic . concreteTerm  (terms [9]  , []   )  . attr  ("ced_name" , logic . concreteTerm  (terms [10]  , []   )    )  ;  



}
  , "terms" : logic . zeros  (8  )  . concat  (terms . slice  (8 , 11   )   )     }  )   ]   )   )  ;  
     if ( (typeof (logic . concreteTerm  (terms [12]  , []   ) )  != "object" ) ) { 
     logic . concreteTerm  (terms [13]  , []   )  . addClass  ("ced-value"  )  ;  
     logic . concreteTerm  (terms [14]  , []   )  . attr  ("ced_value" , logic . concreteTerm  (terms [15]  , []   )    )  ;  



} else {
    // Empty
}
 



}
 
     logic . concreteTerm  (terms [16]  , []   )  . attr  ("ced_type" , logic . toJSON  (logic . concreteTerm  (terms [17]  , []   )   )    )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [19]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [18]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (18  )  . concat  (terms . slice  (18 , 19   )   )     }  )   ]   )   )  ;  





}
  , "terms" : [vars [5]  , vars [1]  , vars [0]  , vars [5]  , vars [5]  , vars [0]  , vars [5]  , vars [0]  , vars [5]  , vars [5]  , vars [7]  , ["/javascript/jsLogic#foreach" , ["," , ["builtin#var" , ["::" , vars [0]  , vars [4]     ]   ] , ["/cedalionWeb/visualization#varName" , ["::" , vars [0]  , vars [4]     ] , vars [3]  , vars [7]      ]    ] , {"expr" : 0   }    ] , vars [0]  , vars [5]  , vars [5]  , vars [0]  , vars [5]  , vars [4]  , ["/cedalionWeb/visualization#bindFeature" , vars [8]  , vars [5]     ] , ["/javascript/jsLogic#foreach" , ["/bootstrap#listMember" , vars [8]  , ["/cedalionWeb/visualization#feature"  ] , vars [2]      ] , {"expr" : 0   }    ]                     ]    }  )  , vars [6]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/visualization#bind" , "::" , "/cedalionWeb/visualization#editable"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/visualization#bind" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#string"  ]    ] , vars [3]     ] , vars [4]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [6]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     var __symbol6 = logic . concreteTerm  (terms [1]  , []   )  . find  ("input"  )  ;  
     __symbol6 . val  (logic . concreteTerm  (terms [2]  , []   )   )  ;  
     __symbol6 . attr  ("size" , __symbol6 . val  ()  . length    )  ;  
     __symbol6 . select  ()  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [__symbol6 , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     if ( __symbol6 . val  ) { 
     logic . concreteTerm  (terms [3]  , []   )  . set  (__symbol6 . val  ()   )  ;  
     __symbol6 . val  (__symbol6 . val  ()   )  ;  



} else {
    // Empty
}
 


}
  , "terms" : logic . zeros  (3  )  . concat  (terms . slice  (3 , 4   )   )     }  )    ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [__symbol6 , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol6 . attr  ("size" , __symbol6 . val  ()  . length    )  ;  


}
  , "terms" : logic . zeros  (5  )  . concat  (terms . slice  (5 , 5   )   )     }  )    ]   )   )  ;  








}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 6   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [["/cedalionWeb/jquery#changeContent" , vars [3]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "input"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "type"   ] , ["/Functional#const" , "text"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#empty"  ]     ]    ] , vars [3]  , vars [0]  , vars [2]  , ["/cedalionWeb/jquery#on" , {"expr" : 0   } , "blur" , {"expr" : 1   }     ] , ["/cedalionWeb/jquery#on" , {"expr" : 0   } , "keyup" , {"expr" : 1   }     ] , ["/cedalionWeb/jquery#on" , vars [3]  , "selected" , vars [5]  , {"expr" : 0   }      ]        ]    }  )  , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/visualization#bind" , "::" , "/cedalionWeb/visualization#editable"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/visualization#bind" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , ["/bootstrap#number"  ]    ] , vars [3]     ] , vars [4]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     var __symbol6 = logic . concreteTerm  (terms [1]  , []   )  . find  ("input"  )  ;  
     __symbol6 . val  ((logic . concreteTerm  (terms [2]  , []   )  + "" )  )  ;  
     __symbol6 . attr  ("size" , __symbol6 . val  ()  . length    )  ;  
     __symbol6 . select  ()  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [__symbol6 , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     if ( __symbol6 . val  ) { 
     logic . concreteTerm  (terms [3]  , []   )  . set  (parseFloat (__symbol6 . val  ()   )   )  ;  
     __symbol6 . val  ((parseFloat (__symbol6 . val  ()   )  + "" )  )  ;  



} else {
    // Empty
}
 


}
  , "terms" : logic . zeros  (3  )  . concat  (terms . slice  (3 , 4   )   )     }  )    ]   )   )  ;  
     __symbol6 . keyup  (function () { 
     __symbol6 . attr  ("size" , __symbol6 . val  ()  . length    )  ;  


}
  )  ;  








}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [["/cedalionWeb/jquery#changeContent" , vars [3]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "input"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "type"   ] , ["/Functional#const" , "text"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#empty"  ]     ]    ] , vars [3]  , vars [0]  , vars [2]  , ["/cedalionWeb/jquery#on" , {"expr" : 0   } , "blur" , {"expr" : 1   }     ] , ["/cedalionWeb/jquery#on" , vars [3]  , "selected" , vars [5]  , {"expr" : 0   }      ]       ]    }  )  , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/visualization#bind"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/visualization#bind" , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol3 = logic . concreteTerm  (terms [0]  , []   )  ;  
     __symbol3 . mouseover  (function (__symbol4  ) { 
     __symbol3 . addClass  ("mouse-over"  )  ;  
     __symbol4 . stopPropagation  ()  ;  



}
  )  ;  
     __symbol3 . mouseout  (function (__symbol4  ) { 
     __symbol3 . removeClass  ("mouse-over"  )  ;  
     __symbol4 . stopPropagation  ()  ;  



}
  )  ;  




}
  , "terms" : [vars [1]   ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/visualization#bind" , "::" , "/cedalionWeb/visualization#editable"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/visualization#bind" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]     ] , vars [5]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol7 = logic . ctx  ("selection"  )  . getValue  (logic  )  ;  
     if ( __symbol7 . isSelection  ) { 
     if ( __symbol7 . selectedElem  ) { 
     if ( (__symbol7 . selectedElem  === logic . concreteTerm  (terms [0]  , []   )  ) ) { 
     return ;  


} else {
    // Empty
}
 
     __symbol7 . selectedElem  . removeClass  ("selected"  )  ;  
     __symbol7 . selectedElem  . trigger  ("unselected"  )  ;  




} else {
    // Empty
}
 
     __symbol7 . selectedElem  = logic . concreteTerm  (terms [1]  , []   )  ;  
     __symbol7 . selectedElem  . addClass  ("selected"  )  ;  
     __symbol7 . selectedElem  . trigger  ("selected"  )  ;  
     if ( __symbol7 . selectionChanged  ) { 
     __symbol7 . selectionChanged  (logic . concreteTerm  (terms [2]  , []   )   )  ;  


} else {
    // Empty
}
 






} else {
    // Empty
}
 
     logic . concreteTerm  (terms [3]  , []   )  . stopPropagation  ()  ;  




}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 4   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [4]  , vars [4]  , vars [2]  , vars [6]  , ["/cedalionWeb/jquery#on" , vars [4]  , "click" , vars [6]  , {"expr" : 0   }      ]      ]    }  )  , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/visualization#bindFeature" , "/cedalionWeb/visualization#selectable"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/visualization#bindFeature" , ["/cedalionWeb/visualization#selectable" , vars [0]    ] , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [10]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . stopPropagation  ()  ;  
     if ( logic . concreteTerm  (terms [1]  , []   )  . selectedElem  ) { 
     if ( (logic . concreteTerm  (terms [2]  , []   )  . selectedElem  === logic . concreteTerm  (terms [3]  , []   )  ) ) { 
     return ;  


} else {
    // Empty
}
 
     logic . concreteTerm  (terms [4]  , []   )  . selectedElem  . removeClass  ("selected"  )  ;  
     logic . concreteTerm  (terms [5]  , []   )  . selectedElem  . trigger  ("unselected"  )  ;  




} else {
    // Empty
}
 
     logic . concreteTerm  (terms [6]  , []   )  . selectedElem  = logic . concreteTerm  (terms [7]  , []   )  ;  
     logic . concreteTerm  (terms [8]  , []   )  . selectedElem  . addClass  ("selected"  )  ;  
     logic . concreteTerm  (terms [9]  , []   )  . selectedElem  . trigger  ("selected"  )  ;  






}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 10   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [3]  , vars [0]  , vars [0]  , vars [1]  , vars [0]  , vars [0]  , vars [0]  , vars [1]  , vars [0]  , vars [0]  , ["/cedalionWeb/jquery#on" , vars [1]  , "click" , vars [3]  , {"expr" : 0   }      ]            ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/visualization#bind" , "::" , "/cedalionWeb/visualization#editable"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/visualization#bind" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]     ] , vars [5]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )   ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [2]  , []   )  . find  (".suggestion-box-container"  )  . remove  ()  ;  


}
  , "terms" : logic . zeros  (2  )  . concat  (terms . slice  (2 , 3   )   )     }  )   ]   )   )  ;  



}
  , "terms" : [["/cedalionWeb/jquery#appendTo" , vars [4]  , ["/cedalionWeb/visualization#suggestionBox" , vars [3]  , vars [2]     ]    ] , ["/cedalionWeb/jquery#on" , vars [4]  , "selected" , vars [6]  , {"expr" : 0   }      ] , vars [4]  , ["/cedalionWeb/jquery#on" , vars [4]  , "unselected" , vars [6]  , {"expr" : 0   }      ]     ]    }  )  , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/visualization#bind"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/visualization#bind" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/cedalionWeb/visualization#bind" , vars [0]  , vars [1]     ]  ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "test#testVis"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["test#testVis"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : [vars [1]  , ["/javascript/asyncproc#log" , "Finito"   ] , ["/javascript/statepred#whenever" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#raised" , ["/bootstrap#lineBorder" , ["/bootstrap#lowered" , ["/bootstrap#background" , ["/bootstrap#vert" , ["." , ["/bootstrap#color" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Hello"   ] , ["." , ["/bootstrap#label" , "World"   ] , ["[]"  ]    ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#color" , ["/bootstrap#symbol" , 8607   ] , ["cpi#rgb" , 150 , 150 , 0     ]    ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "mondi"   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , "Bold"   ]   ] , ["." , ["/bootstrap#italic" , ["/bootstrap#label" , "Italic"   ]   ] , ["." , ["/bootstrap#smaller" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "smaller"   ] , ["." , ["/bootstrap#smaller" , ["/bootstrap#label" , "even smaller"   ]   ] , ["[]"  ]    ]    ]   ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["cpi#rgb" , 150 , 150 , 255     ]    ]   ] , 3 , ["cpi#rgb" , 0 , 0 , 255     ]     ]   ]   ] , vars [1]     ] , {"expr" : 0   } , {"expr" : 1   }     ]    ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "test#testVis1"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["test#testVis1"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : [vars [1]  , ["/javascript/asyncproc#log" , "Finito"   ] , ["/javascript/statepred#whenever" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#color" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Hello"   ] , ["." , ["/bootstrap#label" , "World"   ] , ["[]"  ]    ]    ]   ] , ["cpi#rgb" , 255 , 255 , 255     ]    ]   ] , vars [1]     ] , {"expr" : 0   } , {"expr" : 1   }     ]    ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "test#testVis2"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["test#testVis2"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : [vars [1]  , ["/javascript/asyncproc#log" , "Finito"   ] , ["/javascript/statepred#whenever" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#raised" , ["/bootstrap#lineBorder" , ["/bootstrap#lowered" , ["/bootstrap#background" , ["/bootstrap#vert" , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "Hello"   ] , ["." , ["/bootstrap#label" , "World"   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#symbol" , 8607   ] , ["." , ["/bootstrap#halfSize" , ["/bootstrap#label" , "mondi"   ]   ] , ["[]"  ]    ]    ]   ] , ["." , ["/bootstrap#horiz" , ["." , ["/bootstrap#bold" , ["/bootstrap#label" , "Bold"   ]   ] , ["." , ["/bootstrap#italic" , ["/bootstrap#label" , "Italic"   ]   ] , ["." , ["/bootstrap#smaller" , ["/bootstrap#horiz" , ["." , ["/bootstrap#label" , "smaller"   ] , ["." , ["/bootstrap#smaller" , ["/bootstrap#label" , "even smaller"   ]   ] , ["[]"  ]    ]    ]   ]   ] , ["[]"  ]    ]    ]    ]   ] , ["[]"  ]    ]    ]    ]   ] , ["cpi#rgb" , 150 , 150 , 255     ]    ]   ] , 3 , ["cpi#rgb" , 0 , 0 , 255     ]     ]   ]   ] , vars [1]     ] , {"expr" : 0   } , {"expr" : 1   }     ]    ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/asyncproc#andThen"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/asyncproc#andThen" , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol3 = 1 ;  
     var __symbol4 = function (terms  ) { 
     return logic . preserveContext  (function (logic  ) { 
     __symbol3 = (__symbol3 - 1 ) ;  
     if ( (__symbol3 == 0 ) ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


} else {
    // Empty
}
 



}
  )  ;  


}
 (logic . zeros  (0  )  . concat  (logic . concreteValue  (terms . slice  (0 , 1   )   )   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol4 (logic  )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol3 = (__symbol3 + 1 ) ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  



}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  
     __symbol4 (logic  )  ;  





}
  , "terms" : [vars [1]  , ["/javascript/jsLogic#do" , vars [6]    ] , ["/javascript/jsLogic#foreach" , ["," , ["/javascript/asyncproc#asyncProc" , vars [0]  , ["/javascript/jsLogic#do" , {"expr" : 0   }   ] , vars [5]      ] , ["builtin#concreteCommand" , vars [5]  , vars [6]     ]    ] , {"expr" : 1   }    ]    ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/asyncproc#testWait"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/asyncproc#testWait"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (1  )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (2  )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (3  )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 0   )   )     }  )   ]   )   )  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )   ]   )   )  ;  



}
  , "terms" : [["/javascript/asyncproc#andThen" , ["/javascript/asyncproc#wait" , 1000   ] , ["/javascript/jsLogic#do" , {"expr" : 0   }   ]    ] , ["/javascript/asyncproc#andThen" , ["/javascript/asyncproc#wait" , 1000   ] , ["/javascript/jsLogic#do" , {"expr" : 0   }   ]    ]   ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/asyncproc#log"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/asyncproc#log" , vars [0]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [vars [0]   ]    }  )  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "test#testThrow"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["test#testThrow"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/javascript/asyncproc#andThen" , ["/javascript/asyncproc#testThrow1"  ] , ["/javascript/asyncproc#andThen" , ["/javascript/asyncproc#testThrow3"  ] , ["/javascript/asyncproc#andThen" , ["/javascript/asyncproc#testThrow2"  ] , ["/javascript/asyncproc#log" , "Done"   ]    ]    ]    ]  ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/jsLogic#testWG"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/jsLogic#testWG"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     setTimeout (function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     setTimeout (function () { 
     console . log  ((logic . concreteTerm  (terms [0]  , []   )  + logic . concreteTerm  (terms [1]  , []   )  )  )  ;  


}
 , (logic . concreteTerm  (terms [2]  , []   )  * 1000 )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 3   )   )     }  )   ]   )   )  ;  


}
 , (1000 * logic . concreteTerm  (terms [4]  , []   )  )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [2]  , vars [1]  , vars [2]  , ["/javascript/jsLogic#foreach" , ["/bootstrap#listMember" , vars [2]  , ["/bootstrap#number"  ] , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]     ] , {"expr" : 0   }    ] , vars [1]  , ["/javascript/jsLogic#foreach" , ["/bootstrap#listMember" , vars [1]  , ["/bootstrap#number"  ] , ["." , 0 , ["." , 3 , ["." , 6 , ["[]"  ]    ]    ]    ]     ] , {"expr" : 0   }    ]       ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/jsLogic#try"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/jsLogic#try" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol4 = logic . ctx  ("exceptionHandler"  )  . getValue  (logic  )  ;  
     logic . ctx  ("exceptionHandler"  )  . bind  (function (terms  ) { 
     return logic . preserveContext  (function (__symbol5  ) { 
     var __symbol6 = logic . stack  . length  ;  
     if ( logic . unify  (__symbol5 , logic . concreteTerm  (terms [0]  , []   )    )  ) { 
     logic . concreteTerm  (terms [1]  , []   )  (logic  )  ;  


} else {
     logic . resume  (__symbol6  )  ;  
     if ( (typeof (__symbol4)  == "function" ) ) { 
     __symbol4 (__symbol5  )  ;  


} else {
    // Empty
}
 



}
 



}
  )  ;  


}
 (logic . zeros  (0  )  . concat  (logic . concreteValue  (terms . slice  (0 , 2   )   )   )   )  , logic   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  




}
  , "terms" : [vars [1]  , vars [2]  , ["/javascript/jsLogic#do" , vars [0]    ]    ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/jsLogic#throw"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/jsLogic#throw" , vars [0]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol2 = logic . ctx  ("exceptionHandler"  )  . getValue  (logic  )  ;  
     if ( (typeof (__symbol2)  == "function" ) ) { 
     __symbol2 (logic . concreteTerm  (terms [0]  , []   )   )  ;  


} else {
    // Empty
}
 



}
  , "terms" : [vars [0]   ]    }  )  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/jsLogic#main"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/jsLogic#main"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  ("hello, world"  )  ;  


}
  , "terms" : []    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/jsLogic#main2"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/jsLogic#main2" , vars [0]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  ("Before"  )  ;  
     $ ("#test"  )  . text  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     console . log  ("After"  )  ;  




}
  , "terms" : [vars [0]   ]    }  )  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/jsLogic#onClick"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/jsLogic#onClick"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/javascript/jsLogic#renderHTML" , "#here" , ["/Functional#where" , ["/Functional#const" , vars [1]    ] , ["," , ["builtin#debug" , "Before" , ["::" , 1 , ["/bootstrap#number"  ]    ]    ] , ["," , ["/website#pageContent" , ["/website#index"  ] , "cedalion.org" , "cedalion-website.css" , "cedalion-logo.png" , ["." , ["/website#index"  ] , ["." , ["/website#documentation"  ] , ["." , ["/website#download"  ] , ["[]"  ]    ]    ]    ] , vars [1]         ] , ["builtin#debug" , "After" , ["::" , 2 , ["/bootstrap#number"  ]    ]    ]    ]    ]    ]    ]  ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/jsLogic#main"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/jsLogic#main"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     $ ("#start"  )  . click  (function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  )  ;  
     $ ("#testBtn"  )  . click  (function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  


}
  )  ;  
     $ ("#here"  )  . click  (function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , []   )   )  ;  


}
  )  ;  





}
  , "terms" : [["/javascript/jsLogic#renderHTML" , "#test" , ["/Functional#const" , ["xml#element" , "div" , ["[]"  ] , ["." , ["xml#element" , "input" , ["." , ["xml#attribute" , "type" , ["/bootstrap#string"  ] , "button"     ] , ["." , ["xml#attribute" , "id" , ["/bootstrap#string"  ] , "start"     ] , ["." , ["xml#attribute" , "value" , ["/bootstrap#string"  ] , "Start"     ] , ["[]"  ]    ]    ]    ] , ["[]"  ]     ] , ["." , ["xml#element" , "input" , ["." , ["xml#attribute" , "type" , ["/bootstrap#string"  ] , "button"     ] , ["." , ["xml#attribute" , "id" , ["/bootstrap#string"  ] , "testBtn"     ] , ["." , ["xml#attribute" , "value" , ["/bootstrap#string"  ] , "Test"     ] , ["[]"  ]    ]    ]    ] , ["[]"  ]     ] , ["." , ["xml#element" , "div" , ["." , ["xml#attribute" , "id" , ["/bootstrap#string"  ] , "here"     ] , ["[]"  ]    ] , ["[]"  ]     ] , ["[]"  ]    ]    ]    ]     ]   ]    ] , ["/javascript/jsLogic#renderHTML" , "#here" , ["/Functional#const" , ["xml#string" , "Hello"   ]   ]    ] , ["/javascript/jsLogic#onClick"  ] , ["/javascript/jsLogic#renderHTML" , "body" , ["/Functional#const" , ["xml#string" , "Good Bye"   ]   ]    ]     ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/statepred#testAsync"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/statepred#testAsync"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     setTimeout (function () { 
     setTimeout (function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  ((logic . concreteTerm  (terms [0]  , []   )  + 3 )  )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )   ]   )   )  ;  


}
 , 3000   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (logic . concreteTerm  (terms [2]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (2  )  . concat  (terms . slice  (2 , 3   )   )     }  )   ]   )   )  ;  



}
 , (logic . concreteTerm  (terms [4]  , []   )  * 1000 )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [1]  , ["/javascript/jsLogic#do" , {"expr" : 0   }   ] , vars [1]  , ["/javascript/jsLogic#do" , {"expr" : 0   }   ] , vars [1]  , ["/javascript/jsLogic#foreach" , ["/bootstrap#member" , vars [1]  , ["/bootstrap#listSet" , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]   ] , ["/bootstrap#number"  ]     ] , {"expr" : 0   }    ]       ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/statepred#doAll" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/statepred#doAll" , ["." , vars [0]  , vars [1]     ]   ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  



}
  , "terms" : [["/javascript/jsLogic#do" , vars [0]    ] , ["/javascript/statepred#doAll" , vars [1]    ]   ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "test#testStatePred"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["test#testStatePred"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : [vars [1]  , ["/javascript/asyncproc#log" , "Finito"   ] , ["/javascript/statepred#whenever" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#stateApplyBinOp" , ["/cedalionWeb/node#get" , ["/javascript/statepred#expr" , ["/Functional#const" , "http://cedalion.org"   ]   ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#expr" , ["/Functional#const" , "XXX"   ]   ]     ] , ["/bootstrap#string"  ] , vars [1]      ] , {"expr" : 0   } , {"expr" : 1   }     ]    ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/statepred#main"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/statepred#main"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  ("hello"  )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [Math . abs  , Math . sin  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  ("bye"  )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 1   )   )     }  )      ]   )   )  ;  



}
  , "terms" : [vars [1]  , ["/javascript/statepred#whenever" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , 3   ]   ] , ["/Functional#numPlus"  ] , ["/javascript/statepred#jsFunction" , {"expr" : 0   } , ["/javascript/statepred#jsFunction" , {"expr" : 1   } , ["/javascript/statepred#str2num" , ["/javascript/statepred#expr" , ["/Functional#const" , "4"   ]   ]   ] , ["/bootstrap#number"  ]     ] , ["/bootstrap#number"  ]     ]     ] , ["/bootstrap#number"  ] , vars [1]      ] , {"expr" : 2   } , {"expr" : 3   }     ]   ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/statepred#whenever"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/statepred#whenever" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/javascript/asyncproc#andThen" , ["/javascript/statepred#for (s)" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#do" , vars [2]    ]    ]  ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/statepred#frame"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/statepred#frame" , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/javascript/statepred#frame" , vars [0]  , vars [1]  , vars [3]      ]  ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/statepred#frame"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/statepred#frame" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol4 = logic . ctx  ("tracing"  )  ;  
     var __symbol5 = __symbol4 . getValue  (logic  )  ;  
     if ( (typeof (__symbol5)  == "function" ) ) { 
     var __symbol6 = Math . round  ((Math . random  ()  * 10000 )  )  ;  
     var __symbol7 = function (__symbol8  ) { 
     __symbol5 (("[" + ((logic . concreteTerm  (terms [0]  , []   )  + __symbol6 ) + ("]" + __symbol8 ) ) )  )  ;  


}
 ;  
     __symbol4 . bind  (__symbol7 , logic   )  ;  




} else {
    // Empty
}
 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [__symbol5  ]   )   )  ;  





}
  , "terms" : [vars [0]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [2]  , ["/javascript/statepred#frame"  ]    ] , ["::" , {"expr" : 0   } , ["/javascript/statepred#frame"  ]    ]    ] , vars [1]     ]   ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/statepred#unframe"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/statepred#unframe" , vars [0]  , vars [1]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol3 = logic . ctx  ("tracing"  )  ;  
     __symbol3 . bind  (logic . concreteTerm  (terms [0]  , []   )  , logic   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  




}
  , "terms" : [vars [0]  , ["/javascript/jsLogic#do" , vars [1]    ]   ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/statepred#trace"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/statepred#trace" , vars [0]    ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol2 = logic . ctx  ("tracing"  )  . getValue  (logic  )  ;  
     if ( (typeof (__symbol2)  == "function" ) ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol2 (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )   ]   )   )  ;  


} else {
    // Empty
}
 



}
  , "terms" : [vars [3]  , ["/javascript/statepred#whenever" , ["/javascript/statepred#stateEval" , vars [0]  , ["/bootstrap#string"  ] , vars [3]      ] , {"expr" : 0   }    ]   ]    }  )  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/javascript/jsLogic#runUnitTests"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/javascript/jsLogic#runUnitTests"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  ("Done"  )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 0   )   )     }  )   ]   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [["/javascript/asyncproc#andThen" , ["/javascript/statepred#runAllTests" , vars [2]    ] , ["/javascript/jsLogic#do" , {"expr" : 0   }   ]    ] , ["/javascript/jsLogic#foreach" , ["builtin#findall" , vars [1]  , ["/javascript/statepred#statePred"  ] , ["/bootstrap#member" , vars [1]  , ["/javascript/statepred#unitTests"  ] , ["/javascript/statepred#statePred"  ]     ] , vars [2]       ] , {"expr" : 0   }    ]   ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "test#htmlTerm"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["test#htmlTerm"  ] , vars [0]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol1 = {} ;  
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , [__symbol1  ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [$ (".vis-term"  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [__symbol1 . selectedElem  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  (logic . toJSON  (logic . concreteTerm  (terms [1]  , []   )   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  ("Done"  )  ;  


}
  , "terms" : logic . zeros  (2  )  . concat  (terms . slice  (2 , 2   )   )     }  )     ]   )   )  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 3   )   )     }  )    ]   )   )  ;  




}
  , "terms" : [["/cedalionWeb/jquery#openPage" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , "test"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["/cedalionWeb/visualization#fastEdit" , ["/Functional#eval" , ["/Functional#applyBinOp" , vars [2]  , ["/Functional#numPlus"  ] , ["/Functional#const" , 3   ]     ] , ["/bootstrap#number"  ] , vars [3]      ] , "root#" , ["." , ["/cedalionWeb/visualization#selectable" , {"expr" : 0   }   ] , ["." , ["/cedalionWeb/visualization#autocomplete"  ] , ["[]"  ]    ]    ] , ["." , ["builtin#varName" , ["::" , vars [2]  , ["/Functional#expr" , ["/bootstrap#number"  ]   ]    ] , "X"    ] , ["." , ["builtin#varName" , ["::" , vars [3]  , ["/bootstrap#number"  ]    ] , "Y"    ] , ["[]"  ]    ]    ]      ] , ["/bootstrap#pred"  ]    ]   ]   ]     ]   ] , vars [4]  , ["/javascript/asyncproc#andThen" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/visualization#htmlTerm" , {"expr" : 0   } , ["::" , vars [4]  , vars [5]     ] , ["[]"  ] , vars [6]       ] , {"expr" : 1   }    ] , ["/javascript/jsLogic#do" , {"expr" : 2   }   ]    ] , ["/cedalionWeb/jquery#on" , {"expr" : 0   } , "selected" , {"expr" : 1   }     ]     ]    }  )  , vars [0]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/visualization#bindFeature" , "/cedalionWeb/visualization#autocomplete"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/visualization#bindFeature" , ["/cedalionWeb/visualization#autocomplete"  ] , vars [0]     ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [9]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . removeClass  ("hidden"  )  ;  
     logic . concreteTerm  (terms [1]  , []   )  . addClass  ("tiny"  )  ;  
     logic . concreteTerm  (terms [2]  , []   )  . focus  ()  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [3]  , []   )  . removeClass  ("tiny"  )  ;  


}
  , "terms" : logic . zeros  (3  )  . concat  (terms . slice  (3 , 4   )   )     }  )   ]   )   )  ;  





}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )   ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [8]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [6]  , []   )  . addClass  ("hidden"  )  ;  
     logic . concreteTerm  (terms [7]  , []   )  . val  (""  )  ;  



}
  , "terms" : logic . zeros  (6  )  . concat  (terms . slice  (6 , 8   )   )     }  )   ]   )   )  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 9   )   )     }  )   ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [10]  , []   )   )  ;  



}
  , "terms" : [vars [3]  , vars [3]  , vars [3]  , vars [3]  , ["/cedalionWeb/jquery#on" , vars [3]  , "keydown" , vars [5]  , {"expr" : 0   }      ] , ["/cedalionWeb/jquery#on" , vars [0]  , "selected" , vars [4]  , {"expr" : 0   }      ] , vars [3]  , vars [3]  , ["/cedalionWeb/jquery#on" , vars [0]  , "unselected" , vars [6]  , {"expr" : 0   }      ] , ["/cedalionWeb/jquery#appendTo" , vars [0]  , ["/cedalionWeb/jquery#animate" , vars [2]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "input"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "type"   ] , ["/Functional#const" , "text"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "autocomplete hidden"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [2]    ]    ] , ["[]"  ]    ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , vars [3]  , {"expr" : 0   }      ]    ] , ["/cedalionWeb/visualization#bindFeature" , ["/cedalionWeb/visualization#autocompleteOption"  ] , vars [0]     ]            ]    }  )  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["cjs#procedureCommand" , "/cedalionWeb/visualization#bindFeature" , "/cedalionWeb/visualization#autocompleteOption"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["cjs#procedureCommand" , ["/cedalionWeb/visualization#bindFeature" , ["/cedalionWeb/visualization#autocompleteOption"  ] , vars [0]     ] , vars [1]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol2 = logic . concreteTerm  (terms [0]  , []   )  . find  (".autocomplete"  )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [__symbol2 , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
console.log(1);
console.log(logic . concreteTerm  (terms [1]  , []   )  . keyCode);
     if ( ((logic . concreteTerm  (terms [1]  , []   )  . keyCode  == 13 )/* && (__symbol2 . val  ()  . substr  (0 , 1   )  == "\"" ) */) ) { 
console.log(2);
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [__symbol2 . val  ()  . substr  (1  )  , logic . concreteTerm  (terms [2]  , []   )  . attr  ("ced-path"  )    ]   )   )  ;  


} else {
    // Empty
}
 


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 4   )   )     }  )    ]   )   )  ;  



}
  , "terms" : [vars [0]  , vars [3]  , vars [0]  , ["/cedalionWeb/jquery#replaceWith" , vars [0]  , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["/cedalionWeb/visualization#fastEdit" , {"expr" : 0   } , {"expr" : 1   } , ["." , ["/cedalionWeb/visualization#autocomplete"  ] , ["[]"  ]    ] , ["[]"  ]      ] , ["/bootstrap#string"  ]    ]   ]   ]    ] , ["/cedalionWeb/jquery#on" , {"expr" : 0   } , "keydown" , vars [3]  , {"expr" : 1   }      ]      ]    }  )  , vars [1]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/couchdb#createDatabase"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/couchdb#createDatabase" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#conj" , ["/cedalionWeb/node#http" , "PUT" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , vars [1]      ]     ] , {} , ["/javascript/statepred#expr" , ["/Functional#const" , ""   ]   ] , 201 , vars [5]  , vars [6]          ] , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [6]    ]   ]   ] , "ok"    ]   ] , ["/bootstrap#string"  ] , "true"     ]    ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/couchdb#deleteDatabase"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/couchdb#deleteDatabase" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#conj" , ["/cedalionWeb/node#http" , "DELETE" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , vars [1]      ]     ] , {} , ["/javascript/statepred#expr" , ["/Functional#const" , ""   ]   ] , 200 , vars [5]  , vars [6]          ] , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [6]    ]   ]   ] , "ok"    ]   ] , ["/bootstrap#string"  ] , "true"     ]    ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/couchdb#insertDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#if" , ["/javascript/statepred#pred" , ["builtin#var" , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ]   ] , ["/javascript/statepred#conj" , ["/cedalionWeb/node#http" , "POST" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , vars [1]      ]     ] , {"content-type" : "application/json"   } , ["/cedalionWeb/node#jsonStringify" , vars [3]    ] , 201 , vars [7]  , vars [8]          ] , ["/javascript/statepred#conj" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [8]    ]   ]   ] , "ok"    ]   ] , ["/bootstrap#string"  ] , "true"     ] , ["/javascript/statepred#conj" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [8]    ]   ]   ] , "id"    ]   ] , ["/bootstrap#string"  ] , vars [9]      ] , ["/javascript/statepred#pred" , ["=" , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["::" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [9]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]    ]   ]    ]    ]    ] , ["/javascript/statepred#conj" , ["/cedalionWeb/node#http" , "PUT" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , vars [1]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , vars [2]      ]     ]     ]     ] , {"content-type" : "application/json"   } , ["/cedalionWeb/node#jsonStringify" , vars [3]    ] , 201 , vars [10]  , vars [8]          ] , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [8]    ]   ]   ] , "ok"    ]   ] , ["/bootstrap#string"  ] , "true"     ]    ]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/couchdb#updateDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#if" , ["/javascript/statepred#conj" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/cedalionWeb/node#get" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , vars [1]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , vars [2]      ]     ]     ]     ]   ]   ] , "_rev"    ]   ] , ["/bootstrap#string"  ] , vars [7]      ] , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [7]  , vars [3]        ]    ] , ["/javascript/statepred#pred" , ["builtin#true"  ]   ] , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/couchdb#updateDocument"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , vars [5]     ] , vars [6]  , vars [7]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#conj" , ["/cedalionWeb/couchdb#addRevision" , vars [4]  , vars [3]  , vars [8]      ] , ["/javascript/statepred#conj" , ["/cedalionWeb/node#http" , "PUT" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , vars [1]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , vars [2]      ]     ]     ]     ] , {"content-type" : "application/json"   } , ["/cedalionWeb/node#jsonStringify" , vars [8]    ] , 201 , vars [9]  , vars [10]          ] , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [10]    ]   ]   ] , "ok"    ]   ] , ["/bootstrap#string"  ] , "true"     ]    ]    ] , vars [5]     ] , vars [6]  , vars [7]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "cjs#verifyDatabaseRev" , "cjs#couchdb"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["cjs#verifyDatabaseRev" , ["cjs#couchdb" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#conj" , ["/javascript/statepred#if" , ["/cedalionWeb/node#http" , "GET" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [0]    ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#expr" , ["/Functional#const" , vars [1]    ]   ]     ]     ] , {} , ["/javascript/statepred#expr" , ["/Functional#const" , ""   ]   ] , 200 , vars [7]  , vars [8]          ] , ["/javascript/statepred#pred" , ["builtin#true"  ]   ] , ["/cedalionWeb/couchdb#createDatabase" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [0]    ]   ] , ["/javascript/statepred#expr" , ["/Functional#const" , vars [1]    ]   ]    ]     ] , ["/javascript/statepred#if" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/cedalionWeb/node#get" , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#const" , vars [0]    ] , ["/Functional#concat"  ] , ["/Functional#applyBinOp" , ["/Functional#const" , "/"   ] , ["/Functional#concat"  ] , ["/Functional#applyBinOp" , ["/Functional#const" , vars [1]    ] , ["/Functional#concat"  ] , ["/Functional#const" , "/_design/cedalion"   ]     ]     ]     ]   ]   ]   ] , "program_rev"    ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , ["/javascript/statepred#pred" , ["builtin#true"  ]   ] , ["/cedalionWeb/couchdb#updateDocument" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [0]    ]   ] , ["/javascript/statepred#expr" , ["/Functional#const" , vars [1]    ]   ] , ["/javascript/statepred#expr" , ["/Functional#const" , "_design/cedalion"   ]   ] , {"language" : "javascript"  , "program_rev" : logic . concreteValue  (vars [3]   )   , "view" : {"statements" : {"map" : ("function(doc) {" + (logic . concreteValue  (vars [2]   )  + "logic.runProcedure([\"cjs#couchdbMap\", doc.term]);}" ) )   }   }     }      ]     ]    ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "cpi#vis" , "::"       ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["cpi#vis" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ]   ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#conj" , ["/javascript/statepred#pred" , ["," , ["/cedalionWeb/visualization#visualizeDescriptor" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , vars [7]      ] , ["/cedalionWeb/visualization#removeDescriptorsFromType" , ["::" , vars [0]  , vars [1]     ] , vars [8]     ]    ]   ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [9]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-term"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [9]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [7]    ]     ] , function (__symbol10  ) { 
     logic . runProcedure  (logic . concreteValue  (["/cedalionWeb/visualization#bind" , vars [8]  , __symbol10 , vars [2]      ]  )   )  ;  


}
     ] , vars [3]     ]    ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#elem2"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#const" , "<"   ] , ["/Functional#concat"  ] , vars [0]      ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#genAttr2" , vars [7]    ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , ">"   ]     ]   ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#gen" , vars [2]    ]     ] , ["/Functional#concat"  ] , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#const" , "</"   ] , ["/Functional#concat"  ] , vars [0]      ] , ["/Functional#concat"  ] , ["/Functional#const" , ">"   ]     ]   ]     ] , ["/bootstrap#string"  ] , vars [3]      ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#empty"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#empty"  ] , ""    ] , vars [0]     ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#pred" , ["builtin#true"  ]   ] , vars [0]     ] , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#str"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#str" , vars [0]    ] , vars [0]     ] , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#pred" , ["builtin#true"  ]   ] , vars [1]     ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#test1"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#test1" , 1   ] , vars [0]     ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#pred" , ["builtin#true"  ]   ] , vars [0]     ] , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#test1"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#test1" , 2   ] , vars [0]     ] , vars [1]  , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#pred" , ["builtin#true"  ]   ] , vars [0]     ] , vars [1]  , vars [2]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#member"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , ["/javascript/statepred#set" , vars [0]  , vars [2]     ]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , vars [2]  , vars [3]     ] , vars [4]  , vars [5]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/javascript/statepred#expr"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#expr" , vars [0]    ] , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]  , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#pred" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ]   ] , vars [3]     ] , vars [4]  , vars [5]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/javascript/statepred#where"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#where" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#conj" , vars [1]  , ["/javascript/statepred#stateEval" , vars [0]  , vars [2]  , vars [3]      ]    ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/visualization#htmlTerms" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/visualization#htmlTerms" , ["[]"  ] , ["[]"  ] , vars [0]  , vars [0]       ] , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#pred" , ["builtin#true"  ]   ] , vars [1]     ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/visualization#htmlTerms" , "."     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/visualization#htmlTerms" , ["." , vars [0]  , vars [1]     ] , ["." , vars [2]  , vars [3]     ] , vars [4]  , vars [5]       ] , vars [6]     ] , vars [7]  , vars [8]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#conj" , ["/cedalionWeb/visualization#htmlTerm" , vars [0]  , vars [2]  , vars [4]  , vars [9]       ] , ["/cedalionWeb/visualization#htmlTerms" , vars [1]  , vars [3]  , vars [9]  , vars [5]       ]    ] , vars [6]     ] , vars [7]  , vars [8]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/Test#hello"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/Test#hello" , vars [0]    ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "h1"   ] , ["[]"  ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#str" , "Hello, "   ] , ["/cedalionWeb/xml#list" , vars [0]  , ["/cedalionWeb/xml#empty"  ]    ]    ]     ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/crud#inlineEditor"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/crud#inlineEditor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [7]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "crud-editor"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [7]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , vars [8]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/cedalionWeb/crud#updateList" , vars [0]  , vars [1]  , vars [2]  , vars [8]       ]  ]    }  )       ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#displayWhile"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#displayWhile" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [6]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "img"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "src"   ] , vars [7]     ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [6]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , function (__symbol8  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/statepred#whenever" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [9]     ] , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol8 . replaceWith  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [vars [9]   ]    }  )     ]  )   )  ;  


}
     ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#ajaxFor"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#ajaxFor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [7]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [7]    ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "img"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "src"   ] , vars [0]     ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "ajax-wait-image"   ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , ["/cedalionWeb/xml#empty"  ]    ]     ] , vars [8]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [1]  , []   )  . find  (".ajax-wait-image"  )  . remove  ()  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : [["/cedalionWeb/jquery#appendTo" , vars [8]  , vars [2]     ] , vars [8]  , ["/javascript/statepred#whenever" , vars [1]  , {"expr" : 0   } , {"expr" : 1   }     ]    ]    }  )       ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#button"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#button" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [6]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "input"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "type"   ] , ["/Functional#const" , "button"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "value"   ] , ["/Functional#const" , vars [0]    ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [6]    ]    ] , ["[]"  ]    ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , vars [7]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . concreteTerm  (terms [1]  , []   )  . stopPropagation  ()  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 2   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [["/javascript/jsLogic#do" , vars [1]    ] , vars [8]  , ["/cedalionWeb/jquery#on" , vars [7]  , "click" , vars [8]  , {"expr" : 0   }      ]    ]    }  )       ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#helloButton"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#helloButton"  ] , vars [0]     ] , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#button" , "Say Hello" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  ("Hello, World"  )  ;  


}
  , "terms" : []    }  )     ] , vars [0]     ] , vars [1]     ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#ul"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#ul" , vars [0]    ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "ul"   ] , ["[]"  ] , ["/cedalionWeb/ui#ulBody" , vars [0]    ]     ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#ulBody" , "[]"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#ulBody" , ["[]"  ]   ] , vars [0]     ] , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#str" , " "   ] , vars [0]     ] , vars [1]     ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#ulBody" , "."      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#ulBody" , ["." , vars [0]  , vars [1]     ]   ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "li"   ] , ["[]"  ] , vars [0]      ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/ui#ulBody" , vars [1]    ] , ["/cedalionWeb/xml#empty"  ]    ]    ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#tabs"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#tabs" , vars [0]    ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [5]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "tab-container"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [5]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "tab-bar"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#for" , ["/bootstrap#listMember" , vars [6]  , ["/cedalionWeb/xml#xml"  ] , vars [0]      ] , ["/cedalionWeb/jquery#animate" , vars [7]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "tab"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [7]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [6]  , ["[]"  ]    ] , ["/cedalionWeb/xml#xml"  ]    ]   ]   ]     ] , vars [8]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . concreteTerm  (terms [0]  , []   )  . parents  (".tab-container"  )  . find  (".tab-content"  )   ]   )   )  ;  
     logic . concreteTerm  (terms [2]  , []   )  . parents  (".tab-container"  )  . find  (".tab"  )  . removeClass  ("tab-current"  )  ;  
     logic . concreteTerm  (terms [3]  , []   )  . addClass  ("tab-current"  )  ;  
     logic . concreteTerm  (terms [4]  , []   )  . stopPropagation  ()  ;  





}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [8]  , ["/cedalionWeb/jquery#changeContent" , {"expr" : 0   } , vars [6]     ] , vars [8]  , vars [8]  , vars [9]  , ["/cedalionWeb/jquery#on" , vars [8]  , "click" , vars [9]  , {"expr" : 0   }      ]       ]    }  )       ]    ]     ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "tab-content"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , ["/cedalionWeb/xml#empty"  ]    ]    ]     ] , vars [10]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     setTimeout (function (terms  ) { 
     return logic . preserveContext  (function () { 
     logic . concreteTerm  (terms [0]  , []   )  . find  (".tab"  )  . first  ()  . click  ()  ;  


}
  )  ;  


}
 (logic . zeros  (0  )  . concat  (logic . concreteValue  (terms . slice  (0 , 1   )   )   )   )  , 100   )  ;  


}
  , "terms" : [vars [10]   ]    }  )       ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#commandBar" , "::" , "/cedalionWeb/visualization#editable"       ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#commandBar" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]     ] , vars [5]     ] , vars [6]     ] , vars [7]  , vars [8]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "command-bar-container"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "command-bar"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#for" , ["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [9]  , vars [10]      ] , ["/cedalionWeb/jquery#animate" , vars [11]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [11]    ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "img"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "src"   ] , ["/Functional#const" , vars [9]    ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#empty"  ]     ]     ] , vars [12]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . concreteTerm  (terms [1]  , []   )  . stopPropagation  ()  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  




}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 3   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [["/javascript/jsLogic#do" , vars [10]    ] , vars [13]  , ["/cedalionWeb/jquery#changeContent" , vars [4]  , ["/cedalionWeb/xml#empty"  ]    ] , ["/cedalionWeb/jquery#on" , vars [12]  , "click" , vars [13]  , {"expr" : 0   }      ]     ]    }  )       ]    ]     ]     ] , vars [5]     ] , vars [6]     ] , vars [7]  , vars [8]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#suggestionBox"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#suggestionBox" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "suggestion-box-container"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "suggestion-box"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#for" , ["/cedalionWeb/visualization#isSuggestion" , ["::" , vars [6]  , vars [0]     ]   ] , ["/cedalionWeb/jquery#animate" , vars [7]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "suggestion"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [7]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [6]  , ["[]"  ]    ] , vars [0]     ]   ]   ]     ] , vars [8]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  
     logic . concreteTerm  (terms [2]  , []   )  . stopPropagation  ()  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [logic . concreteTerm  (terms [3]  , []   )  . parents  (".suggestion-box"  )   ]   )   )  ;  




}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [1]  , vars [6]  , vars [9]  , vars [8]  , ["/cedalionWeb/jquery#changeContent" , {"expr" : 0   } , ["/cedalionWeb/xml#empty"  ]    ] , ["/cedalionWeb/jquery#on" , vars [8]  , "click" , vars [9]  , {"expr" : 0   }      ]       ]    }  )       ]    ]     ]     ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#edit" , "::"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#edit" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , ["::" , vars [3]  , vars [1]     ] , vars [4]       ] , vars [5]     ] , vars [6]     ] , vars [7]  , vars [8]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [9]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "term-editor"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [9]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , vars [10]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol11 = {"value" : logic . concreteTerm  (terms [0]  , []   )   , "nvs" : logic . concreteTerm  (terms [1]  , []   )   , "type" : logic . concreteTerm  (terms [2]  , []   )   , "target" : logic . concreteTerm  (terms [3]  , []   )   , "onchange" : logic . concreteTerm  (terms [4]  , []   )   , "get" : function () { 
     return this . value  ;  


}
  , "set" : function (__symbol12  ) { 
     this . value  = __symbol12 ;  


}
         } ;  
     var __symbol13 = function () { 
     logic . ctx  ("selection"  )  . bind  ({"isSelection" : true   } , logic   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [__symbol11 . value  , __symbol11 . vns  , __symbol11 , __symbol11 . type      ]   )   )  ;  



}
 ;  
     __symbol11 . notify  = function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [6]  , [__symbol11 . target  , __symbol11 . type  , __symbol11 . value  , __symbol11 . type  , __symbol11 . onchange       ]   )   )  ;  


}
 ;  
     __symbol13 ()  ;  
     __symbol11 . notify  ()  ;  






}
  , "terms" : [vars [0]  , vars [2]  , vars [1]  , vars [3]  , vars [4]  , ["/cedalionWeb/jquery#changeContent" , vars [10]  , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["/cedalionWeb/visualization#editable" , {"expr" : 0   } , {"expr" : 1   } , {"expr" : 2   }     ] , {"expr" : 3   }    ]   ]   ]    ] , ["/javascript/jsLogic#foreach" , ["=" , ["::" , {"expr" : 0   } , {"expr" : 1   }    ] , ["::" , {"expr" : 2   } , {"expr" : 3   }    ]    ] , {"expr" : 4   }    ]        ]    }  )       ] , vars [5]     ] , vars [6]     ] , vars [7]  , vars [8]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#vis"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , vars [0]    ]   ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["cpi#vis" , vars [0]  , ["cpi#default"  ]    ]   ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#label"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#label" , vars [0]    ]   ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 160   ]   ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#str" , vars [0]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 160   ]   ] , ["/cedalionWeb/xml#empty"  ]    ]    ]    ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTMLList" , "[]"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTMLList" , ["[]"  ] , vars [0]     ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#empty"  ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTMLList" , "."      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTMLList" , ["." , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , vars [2]    ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , ["/cedalionWeb/visualization#toHTMLList" , vars [1]  , vars [2]     ]    ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#horiz"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#horiz" , vars [0]    ]   ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-horiz"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTMLList" , vars [0]  , "vis-horiz-elem"    ]     ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#vert"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vert" , vars [0]    ]   ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-vert"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTMLList" , vars [0]  , "vis-vert-elem"    ]     ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#symbol"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#symbol" , vars [0]    ]   ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 160   ]   ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , vars [0]    ]   ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 160   ]   ] , ["/cedalionWeb/xml#empty"  ]    ]    ]    ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#color"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#color" , vars [0]  , vars [1]     ]   ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-color"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "style"   ] , ["/Functional#applyBinOp" , ["/Functional#const" , "color: "   ] , ["/Functional#concat"  ] , ["/cedalionWeb/visualization#rgbToText" , vars [1]    ]     ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#lineBorder"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#lineBorder" , vars [0]  , vars [1]  , vars [2]      ]   ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-line-border"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "style"   ] , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#plus" , ["/Functional#const" , "border-width: "   ] , ["/Functional#num2str" , ["/Functional#const" , vars [1]    ]   ]    ] , ["/Functional#concat"  ] , ["/Functional#const" , "; border-color: "   ]     ] , ["/Functional#concat"  ] , ["/cedalionWeb/visualization#rgbToText" , vars [2]    ]     ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#background"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#background" , vars [0]  , vars [1]     ]   ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-background"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "style"   ] , ["/Functional#applyBinOp" , ["/Functional#const" , "background-color: "   ] , ["/Functional#concat"  ] , ["/cedalionWeb/visualization#rgbToText" , vars [1]    ]     ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#tooltip"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#tooltip" , vars [0]  , vars [1]     ]   ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-has-tooltip"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/visualization#toHTML" , vars [0]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-tooltip"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [1]    ]     ] , ["/cedalionWeb/xml#empty"  ]    ]    ]     ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#brackets"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#brackets" , vars [0]  , vars [1]  , vars [2]      ]   ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-brackets"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-brackets-left"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#entity" , ["/Functional#const" , vars [1]    ]   ]     ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-horiz-elem"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-brackets-right"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#entity" , ["/Functional#const" , vars [2]    ]   ]     ] , ["/cedalionWeb/xml#empty"  ]    ]    ]    ]     ] , vars [3]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#xmlList" , "[]"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#xmlList" , ["[]"  ]   ] , vars [0]     ] , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#empty"  ] , vars [0]     ] , vars [1]     ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#xmlList" , "."      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#xmlList" , ["." , vars [0]  , vars [1]     ]   ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#list" , vars [0]  , ["/cedalionWeb/xml#xmlList" , vars [1]    ]    ] , vars [2]     ] , vars [3]     ] , vars [4]  , vars [5]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#bold"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#bold" , vars [0]    ]   ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-bold"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#italic"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#italic" , vars [0]    ]   ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-italic"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#halfSize"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#halfSize" , vars [0]    ]   ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-halfsize"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#smaller"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#smaller" , vars [0]    ]   ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-smaller"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#lowered"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#lowered" , vars [0]    ]   ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-lowered"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#raised"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#raised" , vars [0]    ]   ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-raised"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]     ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#member"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (12  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#member" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ] , ["/cedalionWeb/couchdb#viewResults" , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]        ]     ] , vars [6]     ] , vars [7]  , vars [8]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#member" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ] , ["/javascript/statepred#eset" , ["/cedalionWeb/node#dot" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [9]    ]   ] , "value"    ] , ["/javascript/statepred#conj" , ["/cedalionWeb/node#http" , "GET" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , vars [1]  , ["/Functional#concat"  ] , ["/Functional#const" , "/_design/"   ]     ] , ["/Functional#concat"  ] , vars [2]      ] , ["/Functional#concat"  ] , ["/Functional#const" , "/_view/"   ]     ] , ["/Functional#concat"  ] , vars [3]      ]   ] , ["/Functional#concat"  ] , ["/cedalionWeb/node#urlQuery" , ["." , ["/cedalionWeb/node#arg" , "startkey" , ["/cedalionWeb/node#jsonStringify" , vars [4]    ]    ] , ["." , ["/cedalionWeb/node#arg" , "endkey" , ["/cedalionWeb/node#jsonStringify" , vars [5]    ]    ] , ["[]"  ]    ]    ]   ]     ] , {} , ["/javascript/statepred#expr" , ["/Functional#const" , ""   ]   ] , 200 , vars [10]  , vars [11]          ] , ["/cedalionWeb/node#arrayElement" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [11]    ]   ]   ] , "rows"    ] , vars [9]     ]    ]    ]     ] , vars [6]     ] , vars [7]  , vars [8]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#member"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#member" , vars [0]  , ["/Functional#pairType" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ] , ["/cedalionWeb/crud#elements" , ["/cedalionWeb/crud#myModel"  ]   ]     ] , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#member" , vars [0]  , ["/Functional#pairType" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ] , ["/javascript/statepred#set" , ["/Functional#pair" , vars [4]  , vars [4]     ] , ["/javascript/statepred#pred" , ["/bootstrap#listMember" , vars [4]  , ["/bootstrap#number"  ] , ["." , 1 , ["." , 2 , ["." , 3 , ["." , 4 , ["." , 5 , ["[]"  ]    ]    ]    ]    ]    ]     ]   ]    ]     ] , vars [1]     ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#member"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , ["/javascript/statepred#eset" , vars [2]  , vars [3]     ]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , ["/javascript/statepred#set" , vars [7]  , ["/javascript/statepred#conj" , vars [3]  , ["/javascript/statepred#stateEval" , vars [2]  , vars [1]  , vars [7]      ]    ]    ]     ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/cedalionWeb/crud#createNew" , "/cedalionWeb/crud#myModel"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/crud#createNew" , ["/cedalionWeb/crud#myModel"  ]   ] , ["/Functional#pairType" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ] , vars [0]      ] , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#expr" , ["/Functional#const" , ["/Functional#pair" , 1 , 2    ]   ]   ] , ["/Functional#pairType" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ] , vars [0]      ] , vars [1]     ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/cedalionWeb/node#get"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#get" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#where" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [5]    ]   ] , ["/cedalionWeb/node#http" , "GET" , vars [0]  , {} , ["/javascript/statepred#expr" , ["/Functional#const" , ""   ]   ] , 200 , vars [6]  , vars [5]          ]    ] , ["/bootstrap#string"  ] , vars [1]      ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/cedalionWeb/node#json"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#json" , vars [0]    ] , ["/javascript/jsLogic#jsExpr"  ] , vars [1]      ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#jsFunction" , function (__symbol5  ) { 
     return JSON . parse  (__symbol5  )  ;  


}
 , vars [0]  , ["/bootstrap#string"  ]     ] , ["/javascript/jsLogic#jsExpr"  ] , vars [1]      ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/cedalionWeb/node#string"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#jsFunction" , function (__symbol5  ) { 
     return __symbol5 . toString  ()  ;  


}
 , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]     ] , ["/bootstrap#string"  ] , vars [1]      ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/cedalionWeb/node#urlQuery" , "[]"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#urlQuery" , ["[]"  ]   ] , ["/bootstrap#string"  ] , vars [0]      ] , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#expr" , ["/Functional#const" , "?"   ]   ] , ["/bootstrap#string"  ] , vars [0]      ] , vars [1]     ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/cedalionWeb/node#urlQuery" , "." , "/cedalionWeb/node#arg"       ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#urlQuery" , ["." , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ] , vars [2]     ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#stateApplyBinOp" , ["/cedalionWeb/node#urlQuery" , vars [2]    ] , ["/Functional#concat"  ] , ["/javascript/statepred#expr" , ["/Functional#const" , "&"   ]   ]     ] , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#const" , vars [0]    ] , ["/Functional#concat"  ] , ["/Functional#const" , "="   ]     ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#jsFunction" , encodeURIComponent , vars [1]  , ["/bootstrap#string"  ]     ]     ]     ] , ["/bootstrap#string"  ] , vars [3]      ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/cedalionWeb/xml#gen"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/xml#gen" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#where" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [5]    ]   ] , ["/cedalionWeb/xml#generates" , vars [0]  , vars [5]     ]    ] , ["/bootstrap#string"  ] , vars [1]      ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/cedalionWeb/xml#genAttr" , "[]"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/xml#genAttr" , ["[]"  ]   ] , ["/bootstrap#string"  ] , vars [0]      ] , vars [1]     ] , vars [2]  , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#expr" , ["/Functional#const" , ""   ]   ] , ["/bootstrap#string"  ] , vars [0]      ] , vars [1]     ] , vars [2]  , vars [3]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/cedalionWeb/xml#genAttr" , "." , "/cedalionWeb/xml#attr"       ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/xml#genAttr" , ["." , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , vars [2]     ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , vars [4]     ] , vars [5]  , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#jsFunction" , function (__symbol7  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol7 + "\"" ) ) ) ;  


}
 , vars [1]  , ["/bootstrap#string"  ]     ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#genAttr" , vars [2]    ]     ] , ["/bootstrap#string"  ] , vars [3]      ] , vars [4]     ] , vars [5]  , vars [6]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/javascript/statepred#str2num"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#str2num" , vars [0]    ] , ["/bootstrap#number"  ] , vars [1]      ] , vars [2]     ] , vars [3]  , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#jsFunction" , parseFloat , vars [0]  , ["/bootstrap#string"  ]     ] , ["/bootstrap#number"  ] , vars [1]      ] , vars [2]     ] , vars [3]  , vars [4]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/javascript/statepred#stateApplyBinOp"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , vars [4]      ] , vars [5]     ] , vars [6]  , vars [7]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#where" , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#const" , vars [8]    ] , vars [1]  , ["/Functional#const" , vars [9]    ]     ]   ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#pair" , vars [0]  , vars [2]     ] , ["/Functional#pairType" , vars [3]  , vars [3]     ] , ["/Functional#pair" , vars [8]  , vars [9]     ]     ]    ] , vars [3]  , vars [4]      ] , vars [5]     ] , vars [6]  , vars [7]      ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/couchdb#createDatabase"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/couchdb#createDatabase" , vars [0]  , vars [1]     ] , ["/javascript/statepred#conj" , ["/cedalionWeb/node#http" , "PUT" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , vars [1]      ]     ] , {} , ["/javascript/statepred#expr" , ["/Functional#const" , ""   ]   ] , 201 , vars [2]  , vars [3]          ] , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [3]    ]   ]   ] , "ok"    ]   ] , ["/bootstrap#string"  ] , "true"     ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/couchdb#deleteDatabase"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/couchdb#deleteDatabase" , vars [0]  , vars [1]     ] , ["/javascript/statepred#conj" , ["/cedalionWeb/node#http" , "DELETE" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , vars [1]      ]     ] , {} , ["/javascript/statepred#expr" , ["/Functional#const" , ""   ]   ] , 200 , vars [2]  , vars [3]          ] , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [3]    ]   ]   ] , "ok"    ]   ] , ["/bootstrap#string"  ] , "true"     ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/couchdb#insertDocument"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#if" , ["/javascript/statepred#pred" , ["builtin#var" , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]   ]   ] , ["/javascript/statepred#conj" , ["/cedalionWeb/node#http" , "POST" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , vars [1]      ]     ] , {"content-type" : "application/json"   } , ["/cedalionWeb/node#jsonStringify" , vars [3]    ] , 201 , vars [4]  , vars [5]          ] , ["/javascript/statepred#conj" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [5]    ]   ]   ] , "ok"    ]   ] , ["/bootstrap#string"  ] , "true"     ] , ["/javascript/statepred#conj" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [5]    ]   ]   ] , "id"    ]   ] , ["/bootstrap#string"  ] , vars [6]      ] , ["/javascript/statepred#pred" , ["=" , ["::" , vars [2]  , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ] , ["::" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [6]    ]   ] , ["/javascript/statepred#stateExpr" , ["/bootstrap#string"  ]   ]    ]    ]   ]    ]    ]    ] , ["/javascript/statepred#conj" , ["/cedalionWeb/node#http" , "PUT" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , vars [1]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , vars [2]      ]     ]     ]     ] , {"content-type" : "application/json"   } , ["/cedalionWeb/node#jsonStringify" , vars [3]    ] , 201 , vars [7]  , vars [5]          ] , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [5]    ]   ]   ] , "ok"    ]   ] , ["/bootstrap#string"  ] , "true"     ]    ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/couchdb#updateDocument"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , ["/javascript/statepred#if" , ["/javascript/statepred#conj" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/cedalionWeb/node#get" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , vars [1]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , vars [2]      ]     ]     ]     ]   ]   ] , "_rev"    ]   ] , ["/bootstrap#string"  ] , vars [4]      ] , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [4]  , vars [3]        ]    ] , ["/javascript/statepred#pred" , ["builtin#true"  ]   ] , ["/cedalionWeb/couchdb#insertDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/couchdb#updateDocument"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/couchdb#updateDocument" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]        ] , ["/javascript/statepred#conj" , ["/cedalionWeb/couchdb#addRevision" , vars [4]  , vars [3]  , vars [5]      ] , ["/javascript/statepred#conj" , ["/cedalionWeb/node#http" , "PUT" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , vars [1]  , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , vars [2]      ]     ]     ]     ] , {"content-type" : "application/json"   } , ["/cedalionWeb/node#jsonStringify" , vars [5]    ] , 201 , vars [6]  , vars [7]          ] , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [7]    ]   ]   ] , "ok"    ]   ] , ["/bootstrap#string"  ] , "true"     ]    ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "cjs#verifyDatabaseRev" , "cjs#couchdb"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["cjs#verifyDatabaseRev" , ["cjs#couchdb" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , ["/javascript/statepred#conj" , ["/javascript/statepred#if" , ["/cedalionWeb/node#http" , "GET" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [0]    ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#const" , "/"   ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#expr" , ["/Functional#const" , vars [1]    ]   ]     ]     ] , {} , ["/javascript/statepred#expr" , ["/Functional#const" , ""   ]   ] , 200 , vars [4]  , vars [5]          ] , ["/javascript/statepred#pred" , ["builtin#true"  ]   ] , ["/cedalionWeb/couchdb#createDatabase" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [0]    ]   ] , ["/javascript/statepred#expr" , ["/Functional#const" , vars [1]    ]   ]    ]     ] , ["/javascript/statepred#if" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/cedalionWeb/node#get" , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#const" , vars [0]    ] , ["/Functional#concat"  ] , ["/Functional#applyBinOp" , ["/Functional#const" , "/"   ] , ["/Functional#concat"  ] , ["/Functional#applyBinOp" , ["/Functional#const" , vars [1]    ] , ["/Functional#concat"  ] , ["/Functional#const" , "/_design/cedalion"   ]     ]     ]     ]   ]   ]   ] , "program_rev"    ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , ["/javascript/statepred#pred" , ["builtin#true"  ]   ] , ["/cedalionWeb/couchdb#updateDocument" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [0]    ]   ] , ["/javascript/statepred#expr" , ["/Functional#const" , vars [1]    ]   ] , ["/javascript/statepred#expr" , ["/Functional#const" , "_design/cedalion"   ]   ] , {"language" : "javascript"  , "program_rev" : logic . concreteValue  (vars [3]   )   , "view" : {"statements" : {"map" : ("function(doc) {" + (logic . concreteValue  (vars [2]   )  + "logic.runProcedure([\"cjs#couchdbMap\", doc.term]);}" ) )   }   }     }      ]     ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "cpi#vis" , "::"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["cpi#vis" , ["::" , vars [0]  , vars [1]     ] , vars [2]     ]   ] , vars [3]     ] , ["/javascript/statepred#conj" , ["/javascript/statepred#pred" , ["," , ["/cedalionWeb/visualization#visualizeDescriptor" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , vars [4]      ] , ["/cedalionWeb/visualization#removeDescriptorsFromType" , ["::" , vars [0]  , vars [1]     ] , vars [5]     ]    ]   ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [6]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-term"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [6]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [4]    ]     ] , function (__symbol7  ) { 
     logic . runProcedure  (logic . concreteValue  (["/cedalionWeb/visualization#bind" , vars [5]  , __symbol7 , vars [2]      ]  )   )  ;  


}
     ] , vars [3]     ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#elem2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#const" , "<"   ] , ["/Functional#concat"  ] , vars [0]      ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#genAttr2" , vars [4]    ]     ] , ["/Functional#concat"  ] , ["/Functional#const" , ">"   ]     ]   ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#gen" , vars [2]    ]     ] , ["/Functional#concat"  ] , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#const" , "</"   ] , ["/Functional#concat"  ] , vars [0]      ] , ["/Functional#concat"  ] , ["/Functional#const" , ">"   ]     ]   ]     ] , ["/bootstrap#string"  ] , vars [3]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#empty"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#empty"  ] , ""    ] , ["/javascript/statepred#pred" , ["builtin#true"  ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#str"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#str" , vars [0]    ] , vars [0]     ] , ["/javascript/statepred#pred" , ["builtin#true"  ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#test1"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#test1" , 1   ] , ["/javascript/statepred#pred" , ["builtin#true"  ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#test1"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (0  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#test1" , 2   ] , ["/javascript/statepred#pred" , ["builtin#true"  ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#member"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , ["/javascript/statepred#set" , vars [0]  , vars [2]     ]     ] , vars [2]     ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/javascript/statepred#expr"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#expr" , vars [0]    ] , vars [1]  , vars [2]      ] , ["/javascript/statepred#pred" , ["/Functional#eval" , vars [0]  , vars [1]  , vars [2]      ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/javascript/statepred#where"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#where" , vars [0]  , vars [1]     ] , vars [2]  , vars [3]      ] , ["/javascript/statepred#conj" , vars [1]  , ["/javascript/statepred#stateEval" , vars [0]  , vars [2]  , vars [3]      ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/visualization#htmlTerms" , "[]"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/visualization#htmlTerms" , ["[]"  ] , ["[]"  ] , vars [0]  , vars [0]       ] , ["/javascript/statepred#pred" , ["builtin#true"  ]   ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/visualization#htmlTerms" , "."    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/visualization#htmlTerms" , ["." , vars [0]  , vars [1]     ] , ["." , vars [2]  , vars [3]     ] , vars [4]  , vars [5]       ] , ["/javascript/statepred#conj" , ["/cedalionWeb/visualization#htmlTerm" , vars [0]  , vars [2]  , vars [4]  , vars [6]       ] , ["/cedalionWeb/visualization#htmlTerms" , vars [1]  , vars [3]  , vars [6]  , vars [5]       ]    ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/Test#hello"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/Test#hello" , vars [0]    ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "h1"   ] , ["[]"  ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#str" , "Hello, "   ] , ["/cedalionWeb/xml#list" , vars [0]  , ["/cedalionWeb/xml#empty"  ]    ]    ]     ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/crud#inlineEditor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/crud#inlineEditor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [4]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "crud-editor"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [4]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , vars [5]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/cedalionWeb/crud#updateList" , vars [0]  , vars [1]  , vars [2]  , vars [5]       ]  ]    }  )       ] , vars [3]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#displayWhile"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#displayWhile" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [3]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "img"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "src"   ] , vars [4]     ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [3]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , function (__symbol5  ) { 
     logic . runProcedure  (logic . concreteValue  (["/javascript/statepred#whenever" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [6]     ] , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol5 . replaceWith  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [vars [6]   ]    }  )     ]  )   )  ;  


}
     ] , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#ajaxFor"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#ajaxFor" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [4]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [4]    ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "img"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "src"   ] , vars [0]     ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "ajax-wait-image"   ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , ["/cedalionWeb/xml#empty"  ]    ]     ] , vars [5]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [1]  , []   )  . find  (".ajax-wait-image"  )  . remove  ()  ;  


}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 2   )   )     }  )    ]   )   )  ;  


}
  , "terms" : [["/cedalionWeb/jquery#appendTo" , vars [5]  , vars [2]     ] , vars [5]  , ["/javascript/statepred#whenever" , vars [1]  , {"expr" : 0   } , {"expr" : 1   }     ]    ]    }  )       ] , vars [3]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#button"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#button" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [3]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "input"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "type"   ] , ["/Functional#const" , "button"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "value"   ] , ["/Functional#const" , vars [0]    ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [3]    ]    ] , ["[]"  ]    ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , vars [4]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . concreteTerm  (terms [1]  , []   )  . stopPropagation  ()  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 2   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [["/javascript/jsLogic#do" , vars [1]    ] , vars [5]  , ["/cedalionWeb/jquery#on" , vars [4]  , "click" , vars [5]  , {"expr" : 0   }      ]    ]    }  )       ] , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#helloButton"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#helloButton"  ] , vars [0]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#button" , "Say Hello" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     console . log  ("Hello, World"  )  ;  


}
  , "terms" : []    }  )     ] , vars [0]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#ul"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#ul" , vars [0]    ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "ul"   ] , ["[]"  ] , ["/cedalionWeb/ui#ulBody" , vars [0]    ]     ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#ulBody" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#ulBody" , ["[]"  ]   ] , vars [0]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#str" , " "   ] , vars [0]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#ulBody" , "."     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#ulBody" , ["." , vars [0]  , vars [1]     ]   ] , vars [2]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "li"   ] , ["[]"  ] , vars [0]      ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/ui#ulBody" , vars [1]    ] , ["/cedalionWeb/xml#empty"  ]    ]    ] , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/ui#tabs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/ui#tabs" , vars [0]    ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [2]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "tab-container"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [2]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "tab-bar"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#for" , ["/bootstrap#listMember" , vars [3]  , ["/cedalionWeb/xml#xml"  ] , vars [0]      ] , ["/cedalionWeb/jquery#animate" , vars [4]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "tab"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [4]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [3]  , ["[]"  ]    ] , ["/cedalionWeb/xml#xml"  ]    ]   ]   ]     ] , vars [5]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . concreteTerm  (terms [0]  , []   )  . parents  (".tab-container"  )  . find  (".tab-content"  )   ]   )   )  ;  
     logic . concreteTerm  (terms [2]  , []   )  . parents  (".tab-container"  )  . find  (".tab"  )  . removeClass  ("tab-current"  )  ;  
     logic . concreteTerm  (terms [3]  , []   )  . addClass  ("tab-current"  )  ;  
     logic . concreteTerm  (terms [4]  , []   )  . stopPropagation  ()  ;  





}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [5]  , ["/cedalionWeb/jquery#changeContent" , {"expr" : 0   } , vars [3]     ] , vars [5]  , vars [5]  , vars [6]  , ["/cedalionWeb/jquery#on" , vars [5]  , "click" , vars [6]  , {"expr" : 0   }      ]       ]    }  )       ]    ]     ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "tab-content"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , ["/cedalionWeb/xml#empty"  ]    ]    ]     ] , vars [7]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     setTimeout (function (terms  ) { 
     return logic . preserveContext  (function () { 
     logic . concreteTerm  (terms [0]  , []   )  . find  (".tab"  )  . first  ()  . click  ()  ;  


}
  )  ;  


}
 (logic . zeros  (0  )  . concat  (logic . concreteValue  (terms . slice  (0 , 1   )   )   )   )  , 100   )  ;  


}
  , "terms" : [vars [7]   ]    }  )       ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#commandBar" , "::" , "/cedalionWeb/visualization#editable"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#commandBar" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]     ] , vars [5]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "command-bar-container"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "command-bar"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#for" , ["/cedalionWeb/visualization#actionIcon" , ["::" , ["/cedalionWeb/visualization#editable" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [6]  , vars [7]      ] , ["/cedalionWeb/jquery#animate" , vars [8]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [8]    ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "img"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "src"   ] , ["/Functional#const" , vars [6]    ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#empty"  ]     ]     ] , vars [9]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . concreteTerm  (terms [1]  , []   )  . stopPropagation  ()  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  




}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 3   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [["/javascript/jsLogic#do" , vars [7]    ] , vars [10]  , ["/cedalionWeb/jquery#changeContent" , vars [4]  , ["/cedalionWeb/xml#empty"  ]    ] , ["/cedalionWeb/jquery#on" , vars [9]  , "click" , vars [10]  , {"expr" : 0   }      ]     ]    }  )       ]    ]     ]     ] , vars [5]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#suggestionBox"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#suggestionBox" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "suggestion-box-container"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "suggestion-box"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#for" , ["/cedalionWeb/visualization#isSuggestion" , ["::" , vars [3]  , vars [0]     ]   ] , ["/cedalionWeb/jquery#animate" , vars [4]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "suggestion"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [4]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["cpi#immediateDescriptor" , vars [3]  , ["[]"  ]    ] , vars [0]     ]   ]   ]     ] , vars [5]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . concreteTerm  (terms [0]  , []   )  . set  (logic . concreteTerm  (terms [1]  , []   )   )  ;  
     logic . concreteTerm  (terms [2]  , []   )  . stopPropagation  ()  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [logic . concreteTerm  (terms [3]  , []   )  . parents  (".suggestion-box"  )   ]   )   )  ;  




}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [1]  , vars [3]  , vars [6]  , vars [5]  , ["/cedalionWeb/jquery#changeContent" , {"expr" : 0   } , ["/cedalionWeb/xml#empty"  ]    ] , ["/cedalionWeb/jquery#on" , vars [5]  , "click" , vars [6]  , {"expr" : 0   }      ]       ]    }  )       ]    ]     ]     ] , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#edit" , "::"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (11  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#edit" , ["::" , vars [0]  , vars [1]     ] , vars [2]  , ["::" , vars [3]  , vars [1]     ] , vars [4]       ] , vars [5]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [6]  , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "term-editor"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "id"   ] , ["/Functional#const" , vars [6]    ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/xml#empty"  ]     ] , vars [7]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol8 = {"value" : logic . concreteTerm  (terms [0]  , []   )   , "nvs" : logic . concreteTerm  (terms [1]  , []   )   , "type" : logic . concreteTerm  (terms [2]  , []   )   , "target" : logic . concreteTerm  (terms [3]  , []   )   , "onchange" : logic . concreteTerm  (terms [4]  , []   )   , "get" : function () { 
     return this . value  ;  


}
  , "set" : function (__symbol9  ) { 
     this . value  = __symbol9 ;  


}
         } ;  
     var __symbol10 = function () { 
     logic . ctx  ("selection"  )  . bind  ({"isSelection" : true   } , logic   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [__symbol8 . value  , __symbol8 . vns  , __symbol8 , __symbol8 . type      ]   )   )  ;  



}
 ;  
     __symbol8 . notify  = function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [6]  , [__symbol8 . target  , __symbol8 . type  , __symbol8 . value  , __symbol8 . type  , __symbol8 . onchange       ]   )   )  ;  


}
 ;  
     __symbol10 ()  ;  
     __symbol8 . notify  ()  ;  






}
  , "terms" : [vars [0]  , vars [2]  , vars [1]  , vars [3]  , vars [4]  , ["/cedalionWeb/jquery#changeContent" , vars [7]  , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , ["::" , ["/cedalionWeb/visualization#editable" , {"expr" : 0   } , {"expr" : 1   } , {"expr" : 2   }     ] , {"expr" : 3   }    ]   ]   ]    ] , ["/javascript/jsLogic#foreach" , ["=" , ["::" , {"expr" : 0   } , {"expr" : 1   }    ] , ["::" , {"expr" : 2   } , {"expr" : 3   }    ]    ] , {"expr" : 4   }    ]        ]    }  )       ] , vars [5]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#vis"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vis" , vars [0]    ]   ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["cpi#vis" , vars [0]  , ["cpi#default"  ]    ]   ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#label"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#label" , vars [0]    ]   ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 160   ]   ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#str" , vars [0]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 160   ]   ] , ["/cedalionWeb/xml#empty"  ]    ]    ]    ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTMLList" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTMLList" , ["[]"  ] , vars [0]     ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#empty"  ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTMLList" , "."     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTMLList" , ["." , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , vars [2]    ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , ["/cedalionWeb/visualization#toHTMLList" , vars [1]  , vars [2]     ]    ] , vars [3]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#horiz"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#horiz" , vars [0]    ]   ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-horiz"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTMLList" , vars [0]  , "vis-horiz-elem"    ]     ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#vert"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#vert" , vars [0]    ]   ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-vert"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTMLList" , vars [0]  , "vis-vert-elem"    ]     ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#symbol"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#symbol" , vars [0]    ]   ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 160   ]   ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , vars [0]    ]   ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#entity" , ["/Functional#const" , 160   ]   ] , ["/cedalionWeb/xml#empty"  ]    ]    ]    ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#color"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#color" , vars [0]  , vars [1]     ]   ] , vars [2]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-color"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "style"   ] , ["/Functional#applyBinOp" , ["/Functional#const" , "color: "   ] , ["/Functional#concat"  ] , ["/cedalionWeb/visualization#rgbToText" , vars [1]    ]     ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#lineBorder"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#lineBorder" , vars [0]  , vars [1]  , vars [2]      ]   ] , vars [3]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-line-border"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "style"   ] , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#plus" , ["/Functional#const" , "border-width: "   ] , ["/Functional#num2str" , ["/Functional#const" , vars [1]    ]   ]    ] , ["/Functional#concat"  ] , ["/Functional#const" , "; border-color: "   ]     ] , ["/Functional#concat"  ] , ["/cedalionWeb/visualization#rgbToText" , vars [2]    ]     ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [3]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#background"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#background" , vars [0]  , vars [1]     ]   ] , vars [2]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-background"   ]    ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "style"   ] , ["/Functional#applyBinOp" , ["/Functional#const" , "background-color: "   ] , ["/Functional#concat"  ] , ["/cedalionWeb/visualization#rgbToText" , vars [1]    ]     ]    ] , ["[]"  ]    ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#tooltip"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#tooltip" , vars [0]  , vars [1]     ]   ] , vars [2]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-has-tooltip"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/visualization#toHTML" , vars [0]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-tooltip"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [1]    ]     ] , ["/cedalionWeb/xml#empty"  ]    ]    ]     ] , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#brackets"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#brackets" , vars [0]  , vars [1]  , vars [2]      ]   ] , vars [3]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-brackets"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-brackets-left"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#entity" , ["/Functional#const" , vars [1]    ]   ]     ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-horiz-elem"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , ["/cedalionWeb/xml#list" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-brackets-right"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/xml#entity" , ["/Functional#const" , vars [2]    ]   ]     ] , ["/cedalionWeb/xml#empty"  ]    ]    ]    ]     ] , vars [3]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#xmlList" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#xmlList" , ["[]"  ]   ] , vars [0]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#empty"  ] , vars [0]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#xmlList" , "."     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#xmlList" , ["." , vars [0]  , vars [1]     ]   ] , vars [2]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#list" , vars [0]  , ["/cedalionWeb/xml#xmlList" , vars [1]    ]    ] , vars [2]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#bold"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#bold" , vars [0]    ]   ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-bold"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#italic"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#italic" , vars [0]    ]   ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-italic"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#halfSize"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#halfSize" , vars [0]    ]   ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-halfsize"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#smaller"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#smaller" , vars [0]    ]   ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-smaller"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#lowered"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#lowered" , vars [0]    ]   ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-lowered"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/cedalionWeb/xml#generates" , "/cedalionWeb/visualization#toHTML" , "/bootstrap#raised"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/visualization#toHTML" , ["/bootstrap#raised" , vars [0]    ]   ] , vars [1]     ] , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem2" , ["/Functional#const" , "div"   ] , ["." , ["/cedalionWeb/xml#attr2" , ["/Functional#const" , "class"   ] , ["/Functional#const" , "vis-raised"   ]    ] , ["[]"  ]    ] , ["/cedalionWeb/visualization#toHTML" , vars [0]    ]     ] , vars [1]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#member"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#member" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ] , ["/cedalionWeb/couchdb#viewResults" , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]        ]     ] , ["/javascript/statepred#member" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ] , ["/javascript/statepred#eset" , ["/cedalionWeb/node#dot" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [6]    ]   ] , "value"    ] , ["/javascript/statepred#conj" , ["/cedalionWeb/node#http" , "GET" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , ["/Functional#applyBinOp" , vars [1]  , ["/Functional#concat"  ] , ["/Functional#const" , "/_design/"   ]     ] , ["/Functional#concat"  ] , vars [2]      ] , ["/Functional#concat"  ] , ["/Functional#const" , "/_view/"   ]     ] , ["/Functional#concat"  ] , vars [3]      ]   ] , ["/Functional#concat"  ] , ["/cedalionWeb/node#urlQuery" , ["." , ["/cedalionWeb/node#arg" , "startkey" , ["/cedalionWeb/node#jsonStringify" , vars [4]    ]    ] , ["." , ["/cedalionWeb/node#arg" , "endkey" , ["/cedalionWeb/node#jsonStringify" , vars [5]    ]    ] , ["[]"  ]    ]    ]   ]     ] , {} , ["/javascript/statepred#expr" , ["/Functional#const" , ""   ]   ] , 200 , vars [7]  , vars [8]          ] , ["/cedalionWeb/node#arrayElement" , ["/cedalionWeb/node#dot" , ["/cedalionWeb/node#json" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [8]    ]   ]   ] , "rows"    ] , vars [6]     ]    ]    ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#member"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#member" , vars [0]  , ["/Functional#pairType" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ] , ["/cedalionWeb/crud#elements" , ["/cedalionWeb/crud#myModel"  ]   ]     ] , ["/javascript/statepred#member" , vars [0]  , ["/Functional#pairType" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ] , ["/javascript/statepred#set" , ["/Functional#pair" , vars [1]  , vars [1]     ] , ["/javascript/statepred#pred" , ["/bootstrap#listMember" , vars [1]  , ["/bootstrap#number"  ] , ["." , 1 , ["." , 2 , ["." , 3 , ["." , 4 , ["." , 5 , ["[]"  ]    ]    ]    ]    ]    ]     ]   ]    ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#member"   ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#member" , vars [0]  , vars [1]  , ["/javascript/statepred#eset" , vars [2]  , vars [3]     ]     ] , ["/javascript/statepred#member" , vars [0]  , vars [1]  , ["/javascript/statepred#set" , vars [4]  , ["/javascript/statepred#conj" , vars [3]  , ["/javascript/statepred#stateEval" , vars [2]  , vars [1]  , vars [4]      ]    ]    ]     ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/cedalionWeb/crud#createNew" , "/cedalionWeb/crud#myModel"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/crud#createNew" , ["/cedalionWeb/crud#myModel"  ]   ] , ["/Functional#pairType" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ] , vars [0]      ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#expr" , ["/Functional#const" , ["/Functional#pair" , 1 , 2    ]   ]   ] , ["/Functional#pairType" , ["/bootstrap#number"  ] , ["/bootstrap#number"  ]    ] , vars [0]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/cedalionWeb/node#get"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#get" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#where" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [2]    ]   ] , ["/cedalionWeb/node#http" , "GET" , vars [0]  , {} , ["/javascript/statepred#expr" , ["/Functional#const" , ""   ]   ] , 200 , vars [3]  , vars [2]          ]    ] , ["/bootstrap#string"  ] , vars [1]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/cedalionWeb/node#json"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#json" , vars [0]    ] , ["/javascript/jsLogic#jsExpr"  ] , vars [1]      ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#jsFunction" , function (__symbol2  ) { 
     return JSON . parse  (__symbol2  )  ;  


}
 , vars [0]  , ["/bootstrap#string"  ]     ] , ["/javascript/jsLogic#jsExpr"  ] , vars [1]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/cedalionWeb/node#string"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#string" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#jsFunction" , function (__symbol2  ) { 
     return __symbol2 . toString  ()  ;  


}
 , vars [0]  , ["/javascript/jsLogic#jsExpr"  ]     ] , ["/bootstrap#string"  ] , vars [1]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/cedalionWeb/node#urlQuery" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#urlQuery" , ["[]"  ]   ] , ["/bootstrap#string"  ] , vars [0]      ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#expr" , ["/Functional#const" , "?"   ]   ] , ["/bootstrap#string"  ] , vars [0]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/cedalionWeb/node#urlQuery" , "." , "/cedalionWeb/node#arg"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#urlQuery" , ["." , ["/cedalionWeb/node#arg" , vars [0]  , vars [1]     ] , vars [2]     ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#stateApplyBinOp" , ["/cedalionWeb/node#urlQuery" , vars [2]    ] , ["/Functional#concat"  ] , ["/javascript/statepred#expr" , ["/Functional#const" , "&"   ]   ]     ] , ["/Functional#concat"  ] , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#const" , vars [0]    ] , ["/Functional#concat"  ] , ["/Functional#const" , "="   ]     ]   ] , ["/Functional#concat"  ] , ["/javascript/statepred#jsFunction" , encodeURIComponent , vars [1]  , ["/bootstrap#string"  ]     ]     ]     ] , ["/bootstrap#string"  ] , vars [3]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/cedalionWeb/xml#gen"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (3  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/xml#gen" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#where" , ["/javascript/statepred#expr" , ["/Functional#const" , vars [2]    ]   ] , ["/cedalionWeb/xml#generates" , vars [0]  , vars [2]     ]    ] , ["/bootstrap#string"  ] , vars [1]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/cedalionWeb/xml#genAttr" , "[]"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (1  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/xml#genAttr" , ["[]"  ]   ] , ["/bootstrap#string"  ] , vars [0]      ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#expr" , ["/Functional#const" , ""   ]   ] , ["/bootstrap#string"  ] , vars [0]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/cedalionWeb/xml#genAttr" , "." , "/cedalionWeb/xml#attr"      ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/xml#genAttr" , ["." , ["/cedalionWeb/xml#attr" , vars [0]  , vars [1]     ] , vars [2]     ]   ] , ["/bootstrap#string"  ] , vars [3]      ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#stateApplyBinOp" , ["/javascript/statepred#jsFunction" , function (__symbol4  ) { 
     return ((" " + logic . concreteValue  (vars [0]   )  ) + ("=\"" + (__symbol4 + "\"" ) ) ) ;  


}
 , vars [1]  , ["/bootstrap#string"  ]     ] , ["/Functional#concat"  ] , ["/cedalionWeb/xml#genAttr" , vars [2]    ]     ] , ["/bootstrap#string"  ] , vars [3]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/javascript/statepred#str2num"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (2  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#str2num" , vars [0]    ] , ["/bootstrap#number"  ] , vars [1]      ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#jsFunction" , parseFloat , vars [0]  , ["/bootstrap#string"  ]     ] , ["/bootstrap#number"  ] , vars [1]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/statepred#stateClause" , "/javascript/statepred#stateEval" , "/javascript/statepred#stateApplyBinOp"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/statepred#stateClause" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#stateApplyBinOp" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , vars [4]      ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#where" , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#const" , vars [5]    ] , vars [1]  , ["/Functional#const" , vars [6]    ]     ]   ] , ["/javascript/statepred#stateEval" , ["/javascript/statepred#pair" , vars [0]  , vars [2]     ] , ["/Functional#pairType" , vars [3]  , vars [3]     ] , ["/Functional#pair" , vars [5]  , vars [6]     ]     ]    ] , vars [3]  , vars [4]      ]    ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#true"  ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/couchdb#addRevision"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/couchdb#addRevision" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript/jsLogic#do" , vars [4]    ] , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol6 = logic . concreteTerm  (terms [0]  , []   )  ;  
     __symbol6 . _rev  = logic . concreteTerm  (terms [1]  , []   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [__symbol6  ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , []   )   )  ;  





}
  , "terms" : [vars [0]  , vars [1]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["::" , {"expr" : 0   } , ["/javascript/jsLogic#jsExpr"  ]    ]    ] , vars [3]     ] , ["/javascript/jsLogic#do" , vars [4]    ]     ]    }  )  , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/jquery#ajaxQuery"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/jquery#ajaxQuery" , vars [0]    ] , vars [1]     ] , ["/javascript/jsLogic#do" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol4 = {"type" : "POST"  , "processData" : false  , "data" : logic . toJSON  (logic . concreteTerm  (terms [0]  , []   )   )   , "dataType" : "json"  , "success" : function (terms  ) { 
     return logic . preserveContext  (function (__symbol5  ) { 
     var __symbol6 = 0 ;  
     while ((__symbol6 < __symbol5 . length  )) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [__symbol5 [__symbol6]   ]   )   )  ;  
     __symbol6 = (__symbol6 + 1 ) ;  



}
 



}
  )  ;  


}
 (logic . zeros  (1  )  . concat  (logic . concreteValue  (terms . slice  (1 , 2   )   )   )   )   , "error" : function (terms  ) { 
     return logic . preserveContext  (function (__symbol7 , __symbol8 , __symbol9    ) { 
     if ( (__symbol8 != null ) ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [__symbol8  ]   )   )  ;  


} else {
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [__symbol9  ]   )   )  ;  


}
 


}
  )  ;  


}
 (logic . zeros  (2  )  . concat  (logic . concreteValue  (terms . slice  (2 , 4   )   )   )   )   , "complete" : function (terms  ) { 
     return logic . preserveContext  (function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , []   )   )  ;  


}
  )  ;  


}
 (logic . zeros  (4  )  . concat  (logic . concreteValue  (terms . slice  (4 , 5   )   )   )   )          } ;  
     $ . ajax  ("/" , __symbol4   )  ;  



}
  , "terms" : [["/cedalionWeb#query" , vars [0]    ] , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [0]  , ["/javascript/statepred#statePred"  ]    ] , ["::" , {"expr" : 0   } , ["/javascript/statepred#statePred"  ]    ]    ] , vars [1]     ] , ["/javascript/jsLogic#throw" , ["/cedalionWeb/jquery#ajaxException" , {"expr" : 0   }   ]   ] , ["/javascript/jsLogic#throw" , ["/cedalionWeb/jquery#ajaxException" , {"expr" : 0   }   ]   ] , ["/javascript/jsLogic#do" , vars [2]    ]      ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/jquery#animate"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/jquery#animate" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]     ] , ["/javascript/jsLogic#do" , vars [5]    ] , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol7 = logic . ctx  ("uniqueIDGen"  )  . getValue  (logic  )  ;  
     var __symbol8 = (Math . floor  ((Math . random  ()  * 1000000000 )  )  + "" ) ;  
     if ( ((__symbol7 instanceof Variable ) == false ) ) { 
     __symbol8 = __symbol7 ()  ;  


} else {
    // Empty
}
 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [__symbol8 , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol9 = logic . ctx  ("jquery"  )  . getValue  (logic  )  ;  
     if ( ((__symbol9 instanceof Variable ) == false ) ) { 
     setTimeout (function (terms  ) { 
     return logic . preserveContext  (function () { 
     logic . concreteTerm  (terms [0]  , []   )  ($ (("#" + __symbol8 )  )   )  ;  


}
  )  ;  


}
 (logic . zeros  (0  )  . concat  (logic . concreteValue  (terms . slice  (0 , 1   )   )   )   )  , 0   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  



} else {
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  


}
 



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 3   )   )     }  )    ]   )   )  ;  





}
  , "terms" : [vars [2]  , ["/javascript/jsLogic#do" , vars [4]    ] , ["/javascript/jsLogic#do" , vars [4]    ] , ["/javascript/statepred#whenever" , ["/javascript/statepred#conj" , ["/javascript/statepred#pred" , ["=" , ["::" , vars [0]  , ["/bootstrap#string"  ]    ] , ["::" , {"expr" : 0   } , ["/bootstrap#string"  ]    ]    ]   ] , ["/cedalionWeb/xml#generates" , vars [1]  , vars [3]     ]    ] , {"expr" : 1   } , vars [5]      ]     ]    }  )  , vars [6]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb#indexKey"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb#indexKey" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#do" , vars [3]    ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol5 = {"key" : []   } ;  
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , [__symbol5  ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [__symbol5 . key  . concat  (["*"  ]  )   ]   )   )  ;  
     var __symbol6 = 1 ;  
     while ((__symbol6 <= __symbol5 . key  . length  )) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [__symbol5 . key  . slice  (0 , __symbol6   )   ]   )   )  ;  
     __symbol6 = (__symbol6 + 1 ) ;  



}
 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , []   )   )  ;  







}
  , "terms" : [["/cedalionWeb#addKeyComponents" , vars [0]  , {"expr" : 0   }    ] , ["/cedalionWeb#applyKey" , vars [1]  , {"expr" : 0   } , vars [2]      ] , ["/cedalionWeb#applyKey" , vars [1]  , {"expr" : 0   } , vars [2]      ] , ["/javascript/jsLogic#do" , vars [3]    ]     ]    }  )  , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb#queryKey"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb#queryKey" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#do" , vars [3]    ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol5 = {"key" : []   } ;  
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , [__symbol5  ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [__symbol5 . key   ]   )   )  ;  
     var __symbol6 = 1 ;  
     while ((__symbol6 < __symbol5 . key  . length  )) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [__symbol5 . key  . slice  (0 , __symbol6   )  . concat  (["*"  ]  )   ]   )   )  ;  
     __symbol6 = (__symbol6 + 1 ) ;  



}
 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , []   )   )  ;  







}
  , "terms" : [["/cedalionWeb#addKeyComponents" , vars [0]  , {"expr" : 0   }    ] , ["/cedalionWeb#applyKey" , vars [1]  , {"expr" : 0   } , vars [2]      ] , ["/cedalionWeb#applyKey" , vars [1]  , {"expr" : 0   } , vars [2]      ] , ["/javascript/jsLogic#do" , vars [3]    ]     ]    }  )  , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/node#http"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (18  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/node#http" , vars [0]  , vars [1]  , vars [2]  , vars [3]  , vars [4]  , vars [5]  , vars [6]          ] , vars [7]     ] , ["/javascript/jsLogic#do" , vars [8]    ] , vars [9]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [13]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol10 = require ("http"  )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [12]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     var __symbol13 = require ("url"  )  . parse  (logic . concreteTerm  (terms [1]  , []   )   )  ;  
     __symbol13 . method  = logic . concreteTerm  (terms [2]  , []   )  ;  
     __symbol13 . headers  = logic . concreteTerm  (terms [3]  , []   )  ;  
     var __symbol14 = function (terms  ) { 
     return logic . preserveContext  (function (__symbol15  ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , []   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [8]  , [__symbol15 , __symbol15 . statusCode  , __symbol15 . headers  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , []   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [6]  , []   )   )  ;  



}
  , "terms" : logic . zeros  (5  )  . concat  (terms . slice  (5 , 7   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [7]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (7  )  . concat  (terms . slice  (7 , 8   )   )     }  )       ]   )   )  ;  



}
  )  ;  


}
 (logic . zeros  (4  )  . concat  (logic . concreteValue  (terms . slice  (4 , 9   )   )   )   )  ;  
     var __symbol16 = __symbol10 . request  (__symbol13 , __symbol14   )  ;  
     __symbol16 . end  (logic . concreteTerm  (terms [9]  , []   )   )  ;  
     __symbol16 . on  ("error" , function (__symbol17  ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [10]  , [__symbol17 . toString  ()   ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [11]  , []   )   )  ;  



}
   )  ;  









}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 12   )   )     }  )   ]   )   )  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 13   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [["/javascript/statepred#trace" , ["/javascript/statepred#expr" , ["/Functional#applyBinOp" , ["/Functional#const" , "URL:"   ] , ["/Functional#concat"  ] , ["/Functional#const" , vars [11]    ]     ]   ]   ] , vars [11]  , vars [0]  , vars [2]  , ["/javascript/statepred#trace" , ["/javascript/statepred#expr" , ["/Functional#const" , "Received response"   ]   ]   ] , ["/javascript/statepred#trace" , ["/javascript/statepred#expr" , ["/Functional#const" , "Running Action"   ]   ]   ] , ["/javascript/jsLogic#do" , vars [7]    ] , ["/javascript/jsLogic#do" , vars [8]    ] , ["/javascript/statepred#whenever" , ["/javascript/statepred#conj" , ["/cedalionWeb/node#streamContent" , {"expr" : 0   } , vars [6]     ] , ["/javascript/statepred#conj" , ["/javascript/statepred#pred" , ["=" , ["::" , vars [4]  , ["/bootstrap#number"  ]    ] , ["::" , {"expr" : 1   } , ["/bootstrap#number"  ]    ]    ]   ] , ["/javascript/statepred#pred" , ["=" , ["::" , vars [5]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["::" , {"expr" : 2   } , ["/javascript/jsLogic#jsExpr"  ]    ]    ]   ]    ]    ] , {"expr" : 3   } , {"expr" : 4   }     ] , vars [12]  , ["/javascript/jsLogic#throw" , ["/cedalionWeb/node#connectionError" , {"expr" : 0   }   ]   ] , ["/javascript/jsLogic#do" , vars [8]    ] , ["/javascript/statepred#whenever" , ["/javascript/statepred#conj" , ["/javascript/statepred#stateEval" , vars [1]  , ["/bootstrap#string"  ] , vars [11]      ] , ["/javascript/statepred#stateEval" , vars [3]  , ["/bootstrap#string"  ] , vars [12]      ]    ] , {"expr" : 0   }    ] , ["/javascript/statepred#frame" , "http" , {"expr" : 0   }    ]               ]    }  )  , vars [9]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/cedalionWeb/node#dot"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#dot" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#jsExpr"  ] , vars [2]      ] , vars [3]     ] , ["/javascript/jsLogic#do" , vars [4]    ] , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . concreteTerm  (terms [0]  , []   )  [logic . concreteTerm  (terms [1]  , []   ) ]   ]   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 3   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [6]  , vars [1]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [2]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["::" , {"expr" : 0   } , ["/javascript/jsLogic#jsExpr"  ]    ]    ] , vars [3]     ] , ["/javascript/asyncproc#andThen" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ] , vars [6]      ] , {"expr" : 0   }    ] , ["/javascript/jsLogic#do" , vars [4]    ]    ]     ]    }  )  , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/cedalionWeb/node#jsonStringify"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/node#jsonStringify" , vars [0]    ] , ["/bootstrap#string"  ] , vars [1]      ] , vars [2]     ] , ["/javascript/jsLogic#do" , vars [3]    ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [JSON . stringify  (logic . concreteTerm  (terms [0]  , []   )   )   ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  



}
  , "terms" : [vars [0]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["::" , {"expr" : 0   } , ["/bootstrap#string"  ]    ]    ] , vars [2]     ] , ["/javascript/jsLogic#do" , vars [3]    ]    ]    }  )  , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/node#arrayElement"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/node#arrayElement" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#do" , vars [3]    ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol6 = 0 ;  
     while ((__symbol6 < logic . concreteTerm  (terms [0]  , []   )  . length  )) { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . concreteTerm  (terms [1]  , []   )  [__symbol6]  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (2  )  . concat  (terms . slice  (2 , 3   )   )     }  )    ]   )   )  ;  
     __symbol6 = (__symbol6 + 1 ) ;  



}
 
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , []   )   )  ;  




}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [5]  , vars [5]  , ["/javascript/jsLogic#do" , vars [2]    ] , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [1]  , ["/javascript/jsLogic#jsExpr"  ]    ] , ["::" , {"expr" : 0   } , ["/javascript/jsLogic#jsExpr"  ]    ]    ] , {"expr" : 1   }    ] , ["/javascript/jsLogic#do" , vars [3]    ] , ["/javascript/statepred#whenever" , ["/javascript/statepred#stateEval" , vars [0]  , ["/javascript/jsLogic#jsExpr"  ] , vars [5]      ] , {"expr" : 0   }    ]       ]    }  )  , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/node#streamContent"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/node#streamContent" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#do" , vars [3]    ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol5 = "" ;  
     logic . concreteTerm  (terms [0]  , []   )  . on  ("data" , function (__symbol6  ) { 
     __symbol5 = (__symbol5 + __symbol6 . toString  ()  ) ;  


}
   )  ;  
     logic . concreteTerm  (terms [1]  , []   )  . on  ("end" , function (terms  ) { 
     return logic . preserveContext  (function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [__symbol5  ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , []   )   )  ;  



}
  )  ;  


}
 (logic . zeros  (2  )  . concat  (logic . concreteValue  (terms . slice  (2 , 4   )   )   )   )    )  ;  




}
  , "terms" : [vars [0]  , vars [0]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["::" , {"expr" : 0   } , ["/bootstrap#string"  ]    ]    ] , vars [2]     ] , ["/javascript/jsLogic#do" , vars [3]    ]     ]    }  )  , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/visualization#predictiveUniqueIDs"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/visualization#predictiveUniqueIDs"  ] , vars [0]     ] , ["/javascript/jsLogic#do" , vars [1]    ] , vars [2]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol3 = 0 ;  
     logic . ctx  ("uniqueIDGen"  )  . bind  (function () { 
     __symbol3 = (__symbol3 + 1 ) ;  
     return __symbol3 ;  



}
 , logic   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  





}
  , "terms" : [["/javascript/jsLogic#do" , vars [0]    ] , ["/javascript/jsLogic#do" , vars [1]    ]   ]    }  )  , vars [2]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#for"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#for" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , ["/javascript/jsLogic#do" , vars [4]    ] , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol6 = "" ;  
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol6 = (__symbol6 + logic . concreteTerm  (terms [0]  , []   )  ) ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [__symbol6  ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  



}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 3   )   )     }  )    ]   )   )  ;  



}
  , "terms" : [vars [7]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["::" , {"expr" : 0   } , ["/bootstrap#string"  ]    ]    ] , vars [3]     ] , ["/javascript/jsLogic#do" , vars [4]    ] , ["/javascript/statepred#whenever" , ["/javascript/statepred#conj" , ["/javascript/statepred#pred" , vars [0]    ] , ["/cedalionWeb/xml#generates" , vars [1]  , vars [7]     ]    ] , {"expr" : 0   } , {"expr" : 1   }     ]     ]    }  )  , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#list"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#list" , vars [0]  , vars [1]     ] , vars [2]     ] , vars [3]     ] , ["/javascript/jsLogic#do" , vars [4]    ] , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol6 = "" ;  
     var __symbol7 = 0 ;  
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     if ( (__symbol6 == "" ) ) { 
     __symbol6 = logic . concreteTerm  (terms [0]  , []   )  ;  


} else {
     __symbol6 = (logic . concreteTerm  (terms [1]  , []   )  + __symbol6 ) ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [__symbol6  ]   )   )  ;  



}
 


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 3   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol7 = (__symbol7 + 1 ) ;  
     if ( (__symbol7 == 2 ) ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , []   )   )  ;  


} else {
    // Empty
}
 



}
  , "terms" : logic . zeros  (3  )  . concat  (terms . slice  (3 , 4   )   )     }  )    ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [9]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     if ( (__symbol6 == "" ) ) { 
     __symbol6 = logic . concreteTerm  (terms [5]  , []   )  ;  


} else {
     __symbol6 = (__symbol6 + logic . concreteTerm  (terms [6]  , []   )  ) ;  
     logic . runProcedure  (logic . concreteTerm  (terms [7]  , [__symbol6  ]   )   )  ;  



}
 


}
  , "terms" : logic . zeros  (5  )  . concat  (terms . slice  (5 , 8   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol7 = (__symbol7 + 1 ) ;  
     if ( (__symbol7 == 2 ) ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [8]  , []   )   )  ;  


} else {
    // Empty
}
 



}
  , "terms" : logic . zeros  (8  )  . concat  (terms . slice  (8 , 9   )   )     }  )    ]   )   )  ;  





}
  , "terms" : [vars [8]  , vars [8]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["::" , {"expr" : 0   } , ["/bootstrap#string"  ]    ]    ] , vars [3]     ] , ["/javascript/jsLogic#do" , vars [4]    ] , ["/javascript/statepred#whenever" , ["/cedalionWeb/xml#generates" , vars [0]  , vars [8]     ] , {"expr" : 0   } , {"expr" : 1   }     ] , vars [9]  , vars [9]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [2]  , ["/bootstrap#string"  ]    ] , ["::" , {"expr" : 0   } , ["/bootstrap#string"  ]    ]    ] , vars [3]     ] , ["/javascript/jsLogic#do" , vars [4]    ] , ["/javascript/statepred#whenever" , ["/cedalionWeb/xml#generates" , vars [1]  , vars [9]     ] , {"expr" : 0   } , {"expr" : 1   }     ]           ]    }  )  , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#elem"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (10  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#elem" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , vars [4]     ] , ["/javascript/jsLogic#do" , vars [5]    ] , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [((((((("<" + logic . concreteTerm  (terms [0]  , []   )  ) + logic . concreteTerm  (terms [1]  , []   )  ) + ">" ) + logic . concreteTerm  (terms [2]  , []   )  ) + "</" ) + logic . concreteTerm  (terms [3]  , []   )  ) + ">" )  ]   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 5   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [7]  , vars [8]  , vars [9]  , vars [7]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [3]  , ["/bootstrap#string"  ]    ] , ["::" , {"expr" : 0   } , ["/bootstrap#string"  ]    ]    ] , vars [4]     ] , ["/javascript/statepred#whenever" , ["/javascript/statepred#conj" , ["/javascript/statepred#pred" , ["/Functional#eval" , vars [0]  , ["/bootstrap#string"  ] , vars [7]      ]   ] , ["/javascript/statepred#conj" , ["/javascript/statepred#stateEval" , ["/cedalionWeb/xml#genAttr" , vars [1]    ] , ["/bootstrap#string"  ] , vars [8]      ] , ["/cedalionWeb/xml#generates" , vars [2]  , vars [9]     ]    ]    ] , {"expr" : 0   } , vars [5]      ]       ]    }  )  , vars [6]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/xml#generates" , "/cedalionWeb/xml#entity"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/xml#generates" , ["/cedalionWeb/xml#entity" , vars [0]    ] , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#do" , vars [3]    ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [("&#" + (logic . concreteTerm  (terms [0]  , []   )  + ";" ) )  ]   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 2   )   )     }  )   ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , []   )   )  ;  



}
  , "terms" : [vars [5]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [1]  , ["/bootstrap#string"  ]    ] , ["::" , {"expr" : 0   } , ["/bootstrap#string"  ]    ]    ] , vars [2]     ] , ["/javascript/jsLogic#foreach" , ["/Functional#eval" , vars [0]  , ["/bootstrap#number"  ] , vars [5]      ] , {"expr" : 0   }    ] , ["/javascript/jsLogic#do" , vars [3]    ]     ]    }  )  , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/asyncproc#doProc"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/asyncproc#doProc" , vars [0]    ] , vars [1]     ] , ["/javascript/jsLogic#do" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : [["/javascript/asyncproc#andThen" , vars [0]  , ["/javascript/jsLogic#do" , vars [2]    ]    ]  ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#countToThree"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#countToThree" , vars [0]    ] , vars [1]     ] , ["/javascript/jsLogic#do" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  



}
  , "terms" : [["/javascript/jsLogic#foreach" , ["/bootstrap#listMember" , vars [0]  , ["/bootstrap#number"  ] , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]     ] , vars [1]     ] , ["/javascript/jsLogic#do" , vars [2]    ]   ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#countToThree1"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#countToThree1" , vars [0]    ] , vars [1]     ] , ["/javascript/jsLogic#do" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     setTimeout (function (terms  ) { 
     return logic . preserveContext  (function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  )  ;  


}
 (logic . zeros  (0  )  . concat  (logic . concreteValue  (terms . slice  (0 , 1   )   )   )   )  , (logic . concreteTerm  (terms [1]  , []   )  * 100 )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 2   )   )     }  )   ]   )   )  ;  
     setTimeout (function (terms  ) { 
     return logic . preserveContext  (function () { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , []   )   )  ;  


}
  )  ;  


}
 (logic . zeros  (3  )  . concat  (logic . concreteValue  (terms . slice  (3 , 4   )   )   )   )  , 500   )  ;  



}
  , "terms" : [["/javascript/jsLogic#do" , vars [1]    ] , vars [0]  , ["/javascript/jsLogic#foreach" , ["/bootstrap#listMember" , vars [0]  , ["/bootstrap#number"  ] , ["." , 1 , ["." , 2 , ["." , 3 , ["[]"  ]    ]    ]    ]     ] , {"expr" : 0   }    ] , ["/javascript/jsLogic#do" , vars [2]    ]     ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#countToThree2"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#countToThree2" , vars [0]    ] , vars [1]     ] , ["/javascript/jsLogic#do" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [["/javascript/statepred#doAll" , vars [4]    ] , ["/javascript/asyncproc#andThen" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#findall" , vars [1]  , ["/javascript/jsLogic#jsCommand"  ] , ["/javascript/statepred#countToThree1" , vars [0]    ] , vars [4]       ] , {"expr" : 0   }    ] , ["/javascript/jsLogic#do" , vars [2]    ]    ]   ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#conj"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (6  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#conj" , vars [0]  , vars [1]     ] , vars [2]     ] , ["/javascript/jsLogic#do" , vars [3]    ] , vars [4]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol5 = {"count" : 0   } ;  
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol5 . count  = (__symbol5 . count  + 1 ) ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol5 . count  = (__symbol5 . count  - 1 ) ;  
     if ( (__symbol5 . atEnd  && (__symbol5 . count  == 0 ) ) ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     __symbol5 . atEnd  = 0 ;  



} else {
    // Empty
}
 



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )   ]   )   )  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 2   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol5 . atEnd  = 1 ;  
     if ( (__symbol5 . atEnd  && (__symbol5 . count  == 0 ) ) ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  
     __symbol5 . atEnd  = 0 ;  



} else {
    // Empty
}
 



}
  , "terms" : logic . zeros  (2  )  . concat  (terms . slice  (2 , 3   )   )     }  )    ]   )   )  ;  



}
  , "terms" : [["/javascript/jsLogic#do" , vars [3]    ] , ["/javascript/asyncproc#andThen" , ["/javascript/statepred#for (s)" , vars [1]  , vars [2]     ] , ["/javascript/jsLogic#do" , {"expr" : 0   }   ]    ] , ["/javascript/jsLogic#do" , vars [3]    ] , ["/javascript/asyncproc#andThen" , ["/javascript/statepred#for (s)" , vars [0]  , {"expr" : 0   }    ] , ["/javascript/jsLogic#do" , {"expr" : 1   }   ]    ]     ]    }  )  , vars [4]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#findall"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (8  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#findall" , vars [0]  , vars [1]  , vars [2]  , vars [3]       ] , vars [4]     ] , ["/javascript/jsLogic#do" , vars [5]    ] , vars [6]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol7 = [] ;  
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol7 . push  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 1   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [logic . toList  (__symbol7  )   ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  



}
  , "terms" : logic . zeros  (1  )  . concat  (terms . slice  (1 , 3   )   )     }  )    ]   )   )  ;  



}
  , "terms" : [vars [0]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [3]  , ["/bootstrap#list" , vars [1]    ]    ] , ["::" , {"expr" : 0   } , ["/bootstrap#list" , vars [1]    ]    ]    ] , vars [4]     ] , ["/javascript/jsLogic#do" , vars [5]    ] , ["/javascript/statepred#whenever" , vars [2]  , {"expr" : 0   } , {"expr" : 1   }     ]     ]    }  )  , vars [6]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#if"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (7  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#if" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]     ] , ["/javascript/jsLogic#do" , vars [4]    ] , vars [5]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol6 = 0 ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol6 = (__symbol6 + 1 ) ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 0   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     if ( (__symbol6 > 0 ) ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


} else {
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  


}
 


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 2   )   )     }  )    ]   )   )  ;  



}
  , "terms" : [["/javascript/statepred#whenever" , vars [1]  , vars [3]  , vars [4]      ] , ["/javascript/statepred#whenever" , vars [2]  , vars [3]  , vars [4]      ] , ["/javascript/statepred#whenever" , vars [0]  , {"expr" : 0   } , {"expr" : 1   }     ]    ]    }  )  , vars [5]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/javascript/statepred#jsFunction"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (9  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#jsFunction" , vars [0]  , vars [1]  , vars [2]      ] , vars [3]  , vars [4]      ] , vars [5]     ] , ["/javascript/jsLogic#do" , vars [6]    ] , vars [7]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . concreteTerm  (terms [0]  , []   )  (logic . concreteTerm  (terms [1]  , []   )   )   ]   )   )  ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 3   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [0]  , vars [8]  , ["/javascript/jsLogic#foreach" , ["=" , ["::" , vars [4]  , vars [3]     ] , ["::" , {"expr" : 0   } , vars [3]     ]    ] , vars [5]     ] , ["/javascript/statepred#whenever" , ["/javascript/statepred#stateEval" , vars [1]  , vars [2]  , vars [8]      ] , {"expr" : 0   } , vars [6]      ]     ]    }  )  , vars [7]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#not"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#not" , vars [0]    ] , vars [1]     ] , ["/javascript/jsLogic#do" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol4 = 0 ;  
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol4 = (__symbol4 + 1 ) ;  


}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 0   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     if ( (__symbol4 == 0 ) ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  


} else {
    // Empty
}
 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 2   )   )     }  )    ]   )   )  ;  



}
  , "terms" : [["/javascript/jsLogic#do" , vars [1]    ] , ["/javascript/jsLogic#do" , vars [2]    ] , ["/javascript/statepred#whenever" , vars [0]  , {"expr" : 0   } , {"expr" : 1   }     ]    ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#stateEval" , "/javascript/statepred#pair"     ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (15  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#stateEval" , ["/javascript/statepred#pair" , vars [0]  , vars [1]     ] , ["/Functional#pairType" , vars [2]  , vars [3]     ] , vars [4]      ] , vars [5]     ] , ["/javascript/jsLogic#do" , vars [6]    ] , vars [7]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     var __symbol8 = logic . variable  ()  ;  
     var __symbol9 = logic . variable  ()  ;  
     var __symbol10 = 0 ;  
     var __symbol11 = function () { 
     __symbol10 = (__symbol10 + 1 ) ;  
     if ( (__symbol10 == 2 ) ) { 
     if ( logic . unify  (logic . concreteTerm  (terms [0]  , [__symbol8 , __symbol9   ]   )  , logic . concreteTerm  (terms [1]  , []   )    )  ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [2]  , []   )   )  ;  


} else {
    // Empty
}
 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , []   )   )  ;  



} else {
    // Empty
}
 



}
 ;  
     logic . runProcedure  (logic . concreteTerm  (terms [5]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol8 = logic . concreteTerm  (terms [4]  , []   )  ;  


}
  , "terms" : logic . zeros  (4  )  . concat  (terms . slice  (4 , 5   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol11 ()  ;  


}
  , "terms" : logic . zeros  (5  )  . concat  (terms . slice  (5 , 5   )   )     }  )    ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [7]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol9 = logic . concreteTerm  (terms [6]  , []   )  ;  


}
  , "terms" : logic . zeros  (6  )  . concat  (terms . slice  (6 , 7   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     __symbol11 ()  ;  


}
  , "terms" : logic . zeros  (7  )  . concat  (terms . slice  (7 , 7   )   )     }  )    ]   )   )  ;  







}
  , "terms" : [["/Functional#pair" , {"expr" : 0   } , {"expr" : 1   }    ] , vars [4]  , ["/javascript/statepred#unframe" , vars [12]  , vars [5]     ] , ["/javascript/statepred#unframe" , vars [12]  , vars [6]     ] , vars [13]  , ["/javascript/statepred#whenever" , ["/javascript/statepred#stateEval" , vars [0]  , vars [2]  , vars [13]      ] , {"expr" : 0   } , {"expr" : 1   }     ] , vars [14]  , ["/javascript/statepred#whenever" , ["/javascript/statepred#stateEval" , vars [1]  , vars [3]  , vars [14]      ] , {"expr" : 0   } , {"expr" : 1   }     ]         ]    }  )  , vars [7]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#pred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (4  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#pred" , vars [0]    ] , vars [1]     ] , ["/javascript/jsLogic#do" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [0]  , []   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , []   )   )  ;  



}
  , "terms" : [["/javascript/jsLogic#foreach" , vars [0]  , vars [1]     ] , ["/javascript/jsLogic#do" , vars [2]    ]   ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/javascript/statepred#tracePred"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (5  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#tracePred" , vars [0]    ] , vars [1]     ] , ["/javascript/jsLogic#do" , vars [2]    ] , vars [3]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [9]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [1]  , [("Trying: " + logic . termToString  (logic . concreteTerm  (terms [0]  , []   )   )  )  ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [8]  , [logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [3]  , [("Success:  " + logic . termToString  (logic . concreteTerm  (terms [2]  , []   )   )  )  ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , []   )   )  ;  



}
  , "terms" : logic . zeros  (2  )  . concat  (terms . slice  (2 , 5   )   )     }  )  , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [6]  , [("Done: " + logic . termToString  (logic . concreteTerm  (terms [5]  , []   )   )  )  ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [7]  , []   )   )  ;  



}
  , "terms" : logic . zeros  (5  )  . concat  (terms . slice  (5 , 8   )   )     }  )    ]   )   )  ;  



}
  , "terms" : logic . zeros  (0  )  . concat  (terms . slice  (0 , 9   )   )     }  )   ]   )   )  ;  


}
  , "terms" : [vars [0]  , ["/javascript/statepred#trace" , ["/javascript/statepred#expr" , ["/Functional#const" , {"expr" : 0   }   ]   ]   ] , vars [0]  , ["/javascript/statepred#trace" , ["/javascript/statepred#expr" , ["/Functional#const" , {"expr" : 0   }   ]   ]   ] , ["/javascript/statepred#unframe" , vars [4]  , vars [1]     ] , vars [0]  , ["/javascript/statepred#trace" , ["/javascript/statepred#expr" , ["/Functional#const" , {"expr" : 0   }   ]   ]   ] , ["/javascript/statepred#unframe" , vars [4]  , vars [2]     ] , ["/javascript/statepred#whenever" , vars [0]  , {"expr" : 0   } , {"expr" : 1   }     ] , ["/javascript/statepred#frame" , "goal" , {"expr" : 0   } , vars [4]      ]           ]    }  )  , vars [3]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
logic . program  . add  (["/javascript/asyncproc#asyncProc" , "/javascript/statepred#for (s)" , "/cedalionWeb/visualization#htmlTerm"    ] , function (logic , term , next    ) { 
     var vars = Variable . variables  (14  )  ;  
     if ( logic . unify  (["/javascript/asyncproc#asyncProc" , ["/javascript/statepred#for (s)" , ["/cedalionWeb/visualization#htmlTerm" , vars [0]  , ["::" , vars [1]  , vars [2]     ] , vars [3]  , vars [4]       ] , vars [5]     ] , ["/javascript/jsLogic#do" , vars [6]    ] , vars [7]      ] , term   )  ) { 
     var g0   = function () { 
     logic . call  (["builtin#concreteCommand" , logic . wrapCommand  ({"func" : function (logic , terms   ) { 
     if ( logic . concreteTerm  (terms [0]  , []   )  . is  (".ced-compound"  )  ) { 
     var __symbol8 = logic . concreteTerm  (terms [1]  , []   )  . attr  ("ced_path"  )  ;  
     var __symbol9 = 65 ;  
     var __symbol10 = [] ;  
     while (true) { 
     var __symbol11 = (__symbol8 + String . fromCharCode  (__symbol9  )  ) ;  
     var __symbol12 = logic . concreteTerm  (terms [2]  , []   )  . find  ((".vis-term[ced_path=\"" + (__symbol11 + "\"]" ) )  )  ;  
     if ( (__symbol12 . length  == 0 ) ) { 
     break ;  


} else {
     __symbol10 . push  (__symbol12 . first  ()   )  ;  


}
 
     __symbol9 = (__symbol9 + 1 ) ;  





}
 
     logic . runProcedure  (logic . concreteTerm  (terms [4]  , [logic . toList  (__symbol10  )  , logic . concreteTerm  (terms [3]  , []   )  . attr  ("ced_name"  )    ]   )   )  ;  






} else {
     if ( logic . concreteTerm  (terms [5]  , []   )  . is  (".ced-variable"  )  ) { 
     logic . runProcedure  (logic . concreteTerm  (terms [7]  , [logic . concreteTerm  (terms [6]  , []   )  . attr  ("ced_name"  )   ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [8]  , []   )   )  ;  



} else {
     logic . runProcedure  (logic . concreteTerm  (terms [12]  , [logic . fromJSON  (logic . concreteTerm  (terms [9]  , []   )  . attr  ("ced_type"  )   )  , (logic . concreteTerm  (terms [10]  , []   )  . attr  ("ced_value"  )  * 1 ) , logic . concreteTerm  (terms [11]  , []   )  . attr  ("ced_value"  )     ]   )   )  ;  
     logic . runProcedure  (logic . concreteTerm  (terms [13]  , []   )   )  ;  



}
 


}
 


}
  , "terms" : [vars [0]  , vars [0]  , vars [0]  , vars [0]  , ["/javascript/asyncproc#andThen" , ["/javascript/statepred#for (s)" , ["/javascript/statepred#conj" , ["/cedalionWeb/visualization#htmlTerms" , {"expr" : 0   } , vars [13]  , vars [3]  , vars [4]       ] , ["/javascript/statepred#pred" , ["builtin#parseTerm" , ["::" , vars [1]  , vars [2]     ] , {"expr" : 1   } , vars [13]      ]   ]    ] , vars [5]     ] , ["/javascript/jsLogic#do" , vars [6]    ]    ] , vars [0]  , vars [0]  , ["/javascript/jsLogic#foreach" , ["/bootstrap#mergeVarNames" , vars [3]  , ["." , ["builtin#varName" , ["::" , vars [1]  , vars [2]     ] , {"expr" : 0   }    ] , ["[]"  ]    ] , vars [4]      ] , vars [5]     ] , ["/javascript/jsLogic#do" , vars [6]    ] , vars [0]  , vars [0]  , vars [0]  , ["/javascript/jsLogic#foreach" , ["," , ["=" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["::" , {"expr" : 0   } , ["/bootstrap#type"  ]    ]    ] , ["," , ["builtin#if" , ["=" , ["::" , vars [2]  , ["/bootstrap#type"  ]    ] , ["::" , ["/bootstrap#number"  ] , ["/bootstrap#type"  ]    ]    ] , ["=" , ["::" , vars [1]  , vars [2]     ] , ["::" , {"expr" : 1   } , vars [2]     ]    ] , ["=" , ["::" , vars [1]  , vars [2]     ] , ["::" , {"expr" : 2   } , vars [2]     ]    ]     ] , ["=" , ["::" , vars [4]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ] , ["::" , vars [3]  , ["/bootstrap#list" , ["/bootstrap#varName"  ]   ]    ]    ]    ]    ] , vars [5]     ] , ["/javascript/jsLogic#do" , vars [6]    ]               ]    }  )  , vars [7]     ] , next   )  ;  


}
 ; 
logic . push  (g0    )  ; 
 


} else {
    // Empty
}
 



}
   )  ; 
